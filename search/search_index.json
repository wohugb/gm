{
    "docs": [
        {
            "location": "/", 
            "text": "Get it!\n\n\n\u9996\u5148\u9700\u8981\u5b89\u88c5 \nGraphicsMagick\n \u6216\u8005 \nImageMagick\n. \u7136\u540e:\n\n\n npm install gm", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/#get-it", 
            "text": "\u9996\u5148\u9700\u8981\u5b89\u88c5  GraphicsMagick  \u6216\u8005  ImageMagick . \u7136\u540e:   npm install gm", 
            "title": "Get it!"
        }, 
        {
            "location": "/Manipulation/", 
            "text": "\u64cd\u4f5c\n\n\nA\n\n\n??? note \"adjoin\"\n    \ngm\n(\nimg.png\n).\nadjoin\n()\n\n\n\n\n??? note \"affine\"\n    \ngm\n(\nimg.png\n).\naffine\n(\nmatrix\n)\n\n\n\n\n??? note \"antialias\"\n    By default all imgs are anti-aliased by GraphicsMagick. To disable it pass false.\n    \ngm\n(\nimg.png\n).\nantialias\n(\nfalse\n)\n\n\n\n\n??? note \"append\"\n    Append a set of images\n    * img\n      * the path to another img\n    * ltr (optional)\n      * Boolean - specifies append direction\n      * true for left-to-right\n      * false for top-to-bottom (default)\n    \ngm\n(\nimg.png\n).\nappend\n(\nimg\n \n[,\n \nimg\n,\n \nltr\n])\n\n\n\n// appends another.jpg to img.png from left-to-right\n\n\ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\ntrue\n)\n\n\n\n// appends another.jpg to img.png from left-to-right\n\n\ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \ntrue\n)\n\n\n\n// appends another.jpg to img.png from top-to-bottom\n\n\ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n)\n\n\n\n// appends third.gif below another.jpg below img.png\n\n\ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\nthird.gif\n)\n\n\n\n// appends third.gif below another.jpg below img.png\n\n\ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n)\n\n\n\n// appends third.gif to the right of another.jpg to the right to img.png\n\n\ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n,\n \ntrue\n)\n\n\n\n\n??? note \"authenticate\"\n    \ngm\n(\nimg.png\n).\nauthenticate\n(\npassword\n)\n\n\n\n\n??? note \"autoOrient\"\n    Auto-orients the image according to its EXIF data.\n    GraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.\n    \ngm\n(\nimg.jpg\n).\nautoOrient\n()\n\n\n\n\n??? note \"average\"\n    \ngm\n(\nimg.png\n).\naverage\n()\n\n\n\n\nB\n\n\n??? note \"backdrop\"\n    \ngm\n(\nimg.png\n).\nbackdrop\n()\n\n\n\n\n??? note \"bitdepth\"\n    Specifies the number of bits of color to preserve in the image. See the docs for more detail.\n    \ngm\n(\nimg.png\n).\nbitdepth\n(\nbits\n)\n\n\n\n\n??? note \"blackThreshold\"\n    pixels below \nthreshold\n become black.\n    \ngm\n(\nimg.png\n).\nblackThreshold\n(\nred\n \n[,\ngreen\n]\n \n[,\nblue\n]\n \n[,\nopacity\n])\n\n\n\n\n??? note \"bluePrimary\"\n    \ngm\n(\nimg.png\n).\nbluePrimary\n(\nx\n,\n \nx\n)\n\n\n\n\n??? note \"blur\"\n    Accepts a radius and optional sigma (standard deviation).\n    \ngm\n(\nimg.png\n).\nblur\n(\nradius\n \n[,\n \nsigma\n])\n\n\n\n\n??? note \"border\"\n    \ngm\n(\nimg.png\n).\nborder\n(\nwidth\n,\n \nheight\n)\n\n\n\n\n??? note \"borderColor\"\n    \ngm\n(\nimg.png\n).\nborderColor\n(\ncolor\n)\n\n\n\n\n??? note \"box\"\n    \ngm\n(\nimg.png\n).\nbox\n(\ncolor\n)\n\n\n\n\nC\n\n\n??? note \"channel\"\n    type\n      Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray\n    \ngm\n(\nimg.png\n).\nchannel\n(\ntype\n)\n\n\n\n\n??? note \"charcoal\"\n    Simulates a charcoal drawing. Accepts a factor.\n    \ngm\n(\nimg.png\n).\ncharcoal\n(\nfactor\n)\n\n\n\n\n??? note \"chop\"\n    Removes pixels from the interior of an image.\n    \ngm\n(\nimg.png\n).\nchop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\n\n\n??? note \"clip\"\n    \ngm\n(\nimg.png\n).\nclip\n()\n\n\n\n??? note \"coalesce\"\n    \ngm\n(\nimg.png\n).\ncoalesce\n()\n\n\n\n\n??? note \"colorize\"\n    Colorize the image with optionally separate red, green, and blue values.\n    \ngm\n(\nimg.png\n).\ncolorize\n(\nred\n \n[,\n \ngreen\n \n[,\n \nblue\n]])\n\n\n\n??? note \"colorMap\"\n    type\n      shared or private\n    \ngm\n(\nimg.png\n).\ncolorMap\n(\ntype\n)\n\n\n\n\n??? note \"colors\"\n    Sets the preferred number of colors for the image (color reduction).\n    \ngm\n(\nimg.png\n).\ncolors\n(\nint\n)\n\n\n\n\n??? note \"colorspace\"\n    Specifies the type of colorspace. See the GraphicsMagick docs for val details.\n    \ngm\n(\nimg.png\n).\ncolorspace\n(\nval\n)\n\n\n\n\n??? note \"compose\"\n    \ngm\n(\nimg.png\n).\ncompose\n(\noperator\n)\n\n\n\n\n??? note \"compress\"\n    type\n    None, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA\n    \ngm\n(\nimg.png\n).\ncompress\n(\ntype\n)\n\n\n\n??? note \"comment\"\n    Annotates an image. See the docs for more info.\n    \ngm\n(\nimg.png\n).\ncomment\n(\ntext\n|\nformat\n)\n\n\n\n\n??? note \"contrast\"\n    Increases or reduces the image contrast. Accepts a multiplier.\n    \ngm\n(\nimg.png\n).\ncontrast\n([\n+-\n]\nmultiplier\n)\n\n\n\n\n??? note \"convolve\"\n    \ngm\n(\nimg.png\n).\nconvolve\n(\nkernel\n)\n\n\n\n??? note \"createDirectories\"\n    \ngm\n(\nimg.png\n).\ncreateDirectories\n()\n\n\n\n\n??? note \"crop\"\n    Crops the image to the given width and height at the given x and y position.\n    \ngm\n(\nimg.png\n).\ncrop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\n\n\n??? note \"cycle\"\n    Displace the image colormap by amount. amount is the number of positions each colormap entry is shifted.\n    \ngm\n(\nimg.png\n).\ncycle\n(\namount\n)\n\n\n\n\nD\n\n\n??? note \"deconstruct\"\n    \ngm\n(\nimg.png\n).\ndeconstruct\n()\n\n\n\n\n??? note \"define\"\n    \ngm\n(\nimg.png\n).\ndefine\n()\n\n\n\n\n??? note \"delay\"\n    \namount\n is in hundreths of a second.\n    \ngm\n(\nimg.png\n).\ndelay\n(\namout\n)\n\n\n\n\n??? note \"density\"\n    This option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image.\n    \ngm\n(\nimg.png\n).\ndensity\n(\nwidth\n,\n \nheight\n)\n\n\n\n\n??? note \"despeckle\"\n    Reduces the speckles within the image.\n    \ngm\n(\nimg.png\n).\ndespeckle\n()\n\n\n\n\n??? note \"displace\"\n    Shift image pixels as defined by a displacement map.\n    \ngm\n(\nimg.png\n).\ndisplace\n(\nhorizontal\n,\n \nvertical\n)\n\n\n\n\n??? note \"display\"\n    \ngm\n(\nimg.png\n).\ndisplay\n(\nvalue\n)\n\n\n\n\n??? note \"dispose\"\n    \ngm\n(\nimg.png\n).\ndispose\n(\nmethod\n)\n\n\n\n\n??? note \"dissolve\"\n    \ngm\n(\nimg.png\n).\ndissolve\n(\nmethod\n)\n\n\n\n\n??? note \"dither\"\n    Applies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\n    Note: either .colors() or .monochrome() must be used for this to take effect.\n    \ngm\n(\nimg.png\n).\ndither\n([\nbool\n])\n\n\n\n\nE\n\n\n??? note \"edge\"\n    Emphasizes edges in an image. Takes an optional radius of the emphasis to apply.\n    \ngm\n(\nimg.png\n).\nedge\n([\nradius\n])\n\n\n\n\n??? note \"emboss\"\n    Embosses the image. Takes an optional radius.\n    \ngm\n(\nimg.png\n).\nemboss\n([\nradius\n])\n\n\n\n\n??? note \"encoding\"\n    type\n    AdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\n    gm(\"img.png\").encoding(type)\n    ```\n\n\n??? note \"endian\"\n    type\n    MSB, LSB, or Native\n    \ngm\n(\nimg.png\n).\nendian\n(\ntype\n)\n\n\n\n\n??? note \"enhance\"\n    Enhances the image.\n    \ngm\n(\nimg.png\n).\nenhance\n()\n\n\n\n\n??? note \"equalize\"\n    Performs histogram equalization to the image.\n    \ngm\n(\nimg.png\n).\nequalize\n()\n\n\n\n\n??? note \"extent\"\n    composite image on background color canvas image.\n    \ngm\n(\nimg.png\n).\nextent\n([\nwidth\n,\n \nheight\n,\n \noptions\n])\n\n\n\n\nF\n\n\n??? note \"file\"\n    \ngm\n(\nimg.png\n).\nfile\n(\nfilename\n)\n\n\n\n\n??? note \"filter\"\n    Specifies the filter to use when resizing. see link for available types.\n    \ngm\n(\nimg.png\n).\nfilter\n(\ntype\n)\n\n\n\n\n??? note \"flatten\"\n    \ngm\n(\nimg.png\n).\nflatten\n()\n\n\n\n\n??? note \"flip\"\n    Creates a mirror image (vertically).\n    \ngm\n(\nimg.png\n).\nflip\n()\n\n\n\n\n??? note \"flop\"\n    Creates a mirror image (horizontally).\n    \ngm\n(\nimg.png\n).\nflop\n()\n\n\n\n\n??? note \"foreground\"\n    \ngm\n(\nimg.png\n).\nforeground\n(\ncolor\n)\n\n\n\n\n??? note \"frame\"\n    \ngm\n(\nimg.png\n).\nframe\n(\nwidth\n,\n \nheight\n,\n \nouterBevelWidth\n,\n \ninnerBevelWidth\n)\n\n\n\n\n??? note \"fuzz\"\n    \ngm\n(\nimg.png\n).\nfuzz\n(\ndistance\n \n[,\npercent\n])\n\n\n\n\nG\n\n\n??? note \"gamma\"\n    Adjusts the level of gamma correction.\n    \ngm\n(\nimg.png\n).\ngamma\n(\nr\n,\n \ng\n,\n \nb\n)\n\n\n\n\n??? note \"gaussian\"\n    \ngm\n(\nimg.png\n).\ngaussian\n(\nradius\n \n[,\nsigma\n])\n\n\n\n\n??? note \"geometry\"\n    \ngm\n(\nimg.png\n).\ngeometry\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\n\n\n??? note \"greenPrimary\"\n    \ngm\n(\nimg.png\n).\ngreenPrimary\n(\nx\n,\n \ny\n)\n\n\n\n\n??? note \"gravity\"\n    The direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\n    direction\n    NorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast\n    \ngm\n(\nimg.png\n).\ngravity\n(\ndirection\n)\n\n\n\n\nH\n\n\n??? note \"highlightColor\"\n    \ngm\n(\nimg.png\n).\nhighlightColor\n(\ncolor\n)\n\n\n\n\n??? note \"highlightStyle\"\n    \ngm\n(\nimg.png\n).\nhighlightStyle\n(\ncolor\n)\n\n\n\n\nI\n\n\n??? note \"iconGeometry\"\n    \ngm\n(\nimg.png\n).\niconGeometry\n(\ngeometry\n)\n\n\n\n\n??? note \"implode\"\n    Implodes the image pixels around the center. Takes an optional factor.\n    \ngm\n(\nimg.png\n).\nimplode\n([\nfactor\n])\n\n\n\n\n??? note \"intent\"\n    type\n    Absolute, Perceptual, Relative, or Saturation\n    \ngm\n(\nimg.png\n).\nintent\n(\ntype\n)\n\n\n\n\n??? note \"interlace\"\n    Specifies the type of interlacing scheme. Defaults to None.\n\n\ntype\nNone|Line|Plane|Partition\n```js\ngm(\nimg.png\n).interlace(type)\n```\n\n\n\n\n\nL\n\n\n??? note \"label\"\n    Assigns a label to an image.\n    \ngm\n(\nimg.png\n).\nlabel\n(\nname\n)\n\n\n\n\n??? note \"lat\"\n    \ngm\n(\nimg.png\n).\nlat\n(\nwidth\n,\n \nheight\n,\n \noffset\n \n[,\npercent\n])\n\n\n\n\n??? note \"level\"\n    \ngm\n(\nimg.png\n).\nlevel\n(\nblackPoint\n,\n \ngamma\n,\n \nwhitePoint\n \n[,\npercent\n])\n\n\n\n\n??? note \"limit\"\n    Sets resource limits.\n\n\ntype\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs\n```js\ngm(\nimg.png\n).limit(type, val)\n```\n\n\n\n\n\n??? note \"list\"\n    type\n    Color, Delegate, Format, Magic, Module, Resource, or Type\n    \ngm\n(\nimg.png\n).\nlist\n(\ntype\n)\n\n\n\n\n??? note \"log\"\n    Specify format for debug log. See the docs for detail.\n    \ngm\n(\nimg.png\n).\nlog\n(\nformat\n)\n\n\n\n\n??? note \"loop\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nloop\n(\niterations\n)\n\n\n\n\n??? note \"lower\"\n    Creates a pseudo 3D lowering effect of the images edges.\n    \ngm\n(\nimg.png\n).\nlower\n(\nwidth\n,\n \nheight\n)\n\n\n\n\nM\n\n\n??? note \"magnify\"\n    Magnifies the image factor times.\n    \ngm\n(\nimg.png\n).\nmagnify\n(\nfactor\n)\n\n\n\n\n??? note \"map\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmap\n(\nfilename\n)\n\n\n\n\n??? note \"mask\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmask\n(\nfilename\n)\n\n\n\n\n??? note \"matte\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmatte\n()\n\n\n\n\n??? note \"matteColor\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmatteColor\n(\ncolor\n)\n\n\n\n\n??? note \"maximumError\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmaximumError\n(\nlimit\n)\n\n\n\n\n??? note \"median\"\n    Applies a median filter to the image. The optional param radius adjusts the weight of the effect.\n    \ngm\n(\nimg.png\n).\nmedian\n([\nradius\n])\n\n\n\n\n??? note \"minify\"\n    Minifies the image factor times.\n    \ngm\n(\nimg.png\n).\nminify\n(\nfactor\n)\n\n\n\n\n??? note \"mode\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmode\n(\nvalue\n)\n\n\n\n\n??? note \"modulate\"\n    Varies the brightness, saturation, and hue of the image.\n    \ngm\n(\nimg.png\n).\nmodulate\n(\nb\n \n[,\n \ns\n \n[,\n \nh\n]])\n\n\n\n\n??? note \"monitor\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmonitor\n()\n\n\n\n\n??? note \"monochrome\"\n    Transforms the image to black and white.\n    \ngm\n(\nimg.png\n).\nmonochrome\n()\n\n\n\n\n??? note \"morph\"\n    Morphs two images together.\n\n\n??? note \"otherImg\"\n    the path to another img\n\n\n??? note \"outName\"\n    the path where the image will be saved\n\n\n??? note \"callback\"\n    A function to be executed when morphing is complete. callback will be passed the standard args that .write() receives.\n    \ngm\n(\nimg.png\n).\nmorph\n(\notherImg\n,\n \noutName\n,\n \ncallback\n)\n\n\n\n\n??? note \"mosaic\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmosaic\n()\n\n\n\n\n??? note \"motionBlur\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nmotionBlur\n(\nradius\n \n[,\n \nsigma\n,\n \nangle\n])\n\n\n\n\nN\n\n\n??? note \"name\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nname\n()\n\n\n\n\n??? note \"negative\"\n    Replaces every pixel with its complementary color.\n    \ngm\n(\nimg.png\n).\nnegative\n()\n\n\n\n\n??? note \"noise\"\n    Add or reduce noise in the image.\n    adius|type\n    To add noise pass one of the following:\n    uniform\n    gaussian\n    multiplicative\n    impulse\n    laplacian\n    poisson\n    Otherwise the argument will be interpreted as a radius which adjusts the weight of the effect.\n    \ngm\n(\nimg.png\n).\nnoise\n(\nradius\n|\ntype\n)\n\n\n\n\n??? note \"noop\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nnoop\n()\n\n\n\n\n??? note \"normalize\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nnormalize\n()\n\n\n\n\nO\n\n\n??? note \"opaque\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nopaque\n(\ncolor\n)\n\n\n\n\n??? note \"operator\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\noperator\n(\nchannel\n,\n \noperator\n,\n \nrvalue\n \n[,\npercent\n])\n\n\n\n\n??? note \"orderedDither\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\norderedDither\n(\nchannelType\n,\n \nNxN\n)\n\n\n\n\n??? note \"outputDirectory\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\noutputDirectory\n(\nchannelType\n,\n \nNxN\n)\n\n\n\n\nP\n\n\n??? note \"page\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\npage\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\n\n\n??? note \"pause\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\npause\n(\nseconds\n)\n\n\n\n\n??? note \"pen\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\npen\n(\ncolor\n)\n\n\n\n\n??? note \"ping\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nping\n()\n\n\n\n\n??? note \"pointSize\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\npointSize\n(\nvalue\n)\n\n\n\n\n??? note \"noProfile\nRemoves EXIF, ICM, etc profile data.\n\ngm\n(\nimg.png\n).\nnoProfile\n()\n\n\n\n\n??? note \"preview\ntype\nSee the docs for valid types.\n\ngm\n(\nimg.png\n).\npreview\n(\ntype\n)\n\n\n\n\n??? note \"paint\nSimulates an oil painting.\n\ngm\n(\nimg.png\n).\npaint\n(\nradius\n)\n\n\n\n\n??? note \"process\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nprocess\n(\ncommand\n)\n\n\n\n\n??? note \"profile\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nprofile\n(\nfilename\n)\n\n\n\n\n??? note \"progress\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nprogress\n()\n\n\n\n\n??? note \"randomThreshold\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nrandomThreshold\n(\nchannelType\n,\n \nLOWxHIGH\n)\n\n\n\n\nQ\n\n\n??? note \"quality\nAdjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best).\n\ngm\n(\nimg.png\n).\nquality\n(\nval\n)\n\n\n\n\nR\n\n\n??? note \"raise\nCreates a pseudo 3D raising effect of the images edges.\n\ngm\n(\nimg.png\n).\nraise\n(\nwidth\n,\n \nheight\n)\n\n\n\n\n??? note \"recolor\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nrecolor\n(\nmatrix\n)\n\n\n\n\n??? note \"redPrimary\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nredPrimary\n(\nx\n,\n \ny\n)\n\n\n\n\n??? note \"region\nSpecifies that all following methods only apply to the area specified by width, height, x, y.\n\ngm\n(\nimg.png\n).\nregion\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n).\nsepia\n()\n\n\n\nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y.\n\n\n??? note \"remote\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nremote\n()\n\n\n\n\n??? note \"render\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nrender\n()\n\n\n\n\n??? note \"repage\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nrepage\n(\nwidth\n,\n \nheight\n,\n \nxoff\n,\n \nyoff\n,\n \narg\n)\n\n\n\n\nS\n\n\n??? note \"sample\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nsample\n(\ngeometry\n)\n\n\n\n\n??? note \"samplingFactor\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nsamplingFactor\n(\nhorizontalFactor\n,\n \nverticalFactor\n)\n\n\n\n\n??? note \"rawSize\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nrawSize\n(\nwidth\n,\n \nheight\n,\n \noffset\n)\n\n\n\n\n??? note \"resample\nResamples the image to specified horizontal and vertical resolution.\n\ngm\n(\nimg.png\n).\nresample\n(\nhorizontal\n,\n \nvertical\n)\n\n\n\n\n??? note \"resize\nResize the image.\n\n\noptions\n%, @, !, \n or \n see the GraphicsMagick docs for details\ngm(\"img.png\").resize(width [, height [, options]])\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40)\n\n\nTo resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50)\n\n\nTo resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50)\n\n\nTo override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\")\n\n\n??? note \"roll\nRolls an image vertically or horizontally.\n\ngm\n(\nimg.png\n).\nroll\n(\nhorizontalInt\n,\n \nverticalInt\n)\n\n\n\n\n??? note \"rotate\nRotates the image by degrees and fills the background with color.\n\ngm\n(\nimg.png\n).\nrotate\n(\ncolor\n,\n \ndegrees\n)\n\n\n\n\nS\n\n\n??? note \"scene\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nscene\n(\nvalue\n)\n\n\n\n\n??? note \"scenes\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nscenes\n(\nstart\n,\n \nend\n)\n\n\n\n\n??? note \"scale\nScales the image.\n\ngm\n(\nimg.png\n).\nscale\n(\nwidth\n,\n \nheight\n)\n\n\n\n\n??? note \"screen\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nscreen\n()\n\n\n\n\n??? note \"segment\nSee the docs for detail.\n\ngm\n(\nimg.png\n).\nsegment\n(\nclusterThreshold\n,\n \nsmoothingThreshold\n)\n\n\n\n\n??? note \"selectFrame\nHelpful if we process a large .gif so we don't load in memory each frame.\n\ngm\n(\nimg.png\n).\nselectFrame\n(\n0\n)\n\n\n\n\n??? note \"sepia\nA convenience method to apply a sepia effect to the image.\n\n\ngm(\"img.png\").sepia()\n\n??? note \nset\nSee the docs for detail.\n\ngm(\nimg.png\n).set(attribute, value)\n\n??? note \nsetFormat\nOverriddes the output image format.\n\nHelpful if we are outputting an image with no extention but need to change formats.\n\ngm(\nimg.png\n).setFormat(format)\n\n\n\nshade\nSee the docs for detail.\n\n\ngm(\"img.png\").shade(azimuth, elevation)\n\nshadow\nSee the docs for detail.\n\ngm(\nimg.png\n).shadow(radius, sigma)\n\n\n\nsharedMemory\nSee the docs for detail.\n\n\ngm(\"img.png\").sharedMemory()\n\nshave\nSee the docs for detail.\n\ngm(\nimg.png\n).shave(width, height, percent)\n\n\n\nsharpen\nSharpens the image.\n\n\ngm(\"img.png\").sharpen(radius [, sigma])\n\nshear\nSee the docs for detail.\n\ngm(\nimg.png\n).shear(xDegrees, yDegrees)\n\n\n\nsilent\nSee the docs for detail.\n\n\ngm(\"img.png\").silent()\n\nsnaps\nSee the docs for detail.\n\ngm(\nimg.png\n).snaps(value)\n\n\n\nsolarize\nNegates all pixels above threshold percent.\n\n\ngm(\"img.png\").solarize(threshold)\n\nspread\nDesplaces pixels by a random amount.\n\ngm(\nimg.png\n).spread(amount)\n\n\n\nstegano\nSee the docs for detail.\n\n\ngm(\"img.png\").stegano(offset)\n\nstereo\nSee the docs for detail.\n\ngm(\nimg.png\n).stereo()\n\n\n\nstrip\nStrips the image of any profiles or comments.\n\n\nSimilar to noProfile() but removes both profile and comment data. only works with imageMagick.\n\n\ngm(\"img.png\").strip()\n\nswirl\nSwirls pixels arount the center of the image. degrees specifies the tightness of the swirl.\n\ngm(\nimg.png\n).swirl(degrees)\n\n\n\ntextFont\nSee the docs for detail.\n\n\nT\n\n\ngm(\"img.png\").textFont(font)\n\ntexture\nSee the docs for detail.\n\ngm(\nimg.png\n).texture(font)\n\n\n\nthreshold\nSee the docs for detail.\n\n\ngm(\"img.png\").threshold(value [, percent])\n\nthumb\nCreates a thumbnail based on minimum sizes.\n\nwidth\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\nimg.png\n).thumb(width, height, outName, quality, callback)\ntile\nSee the docs for detail.\n\ngm(\nimg.png\n).tile(filename)\n\n\n\ntitle\nSee the docs for detail.\n\n\ngm(\"img.png\").title(string)\n\ntransform\nSee the docs for detail.\n\ngm(\nimg.png\n).transform(color)\n\n\n\ntransparent\nSee the docs for detail.\n\n\ngm(\"img.png\").transparent(color)\n\ntreeDepth\nSee the docs for detail.\n\ngm(\nimg.png\n).treeDepth(color)\n\n\n\ntrim\nTrim an image by removing any edges that are exactly the same color as the corner pixels.\n\n\ngm(\"img.png\").trim()\n\ntype\nSpecifies the image type.\n\ntype\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\nimg.png\n).type(type)\nupdate\nSee the docs for detail.\n\n## U\n\ngm(\nimg.png\n).update(seconds)\n\n\n\nunits\nSee the docs for detail.\n\n\ngm(\"img.png\").units(type)\n\nunsharp\nSee the docs for detail.\n\ngm(\nimg.png\n).unsharp(radius [, sigma, amount, threshold])\n\n\n\nusePixmap\nSee the docs for detail.\n\n\ngm(\"img.png\").usePixmap()\n\nview\nSee the docs for detail.\n\n## V\n\ngm(\nimg.png\n).view()\n\n\n\nvirtualPixel\nSee the docs for detail.\n\n\ngm(\"img.png\").virtualPixel(method)\n\nvisual\nSee the docs for detail.\n\ngm(\nimg.png\n).visual(type)\n\n\n\nW\n\n\n??? note \"watermark\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nwatermark\n(\nbrightness\n,\n \nsaturation\n)\n\n\n\n\n??? note \"wave\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nwave\n(\namplitude\n,\n \nwavelength\n)\n\n\n\n\n??? note \"whitePoint\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nwhitePoint\n(\nx\n,\n \ny\n)\n\n\n\n\n??? note \"whiteThreshold\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nwhiteThreshold\n(\nred\n,\n \ngreen\n,\n \nblue\n,\n \nopacity\n)\n\n\n\n\n??? note \"window\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nwindow\n(\nid\n)\n\n\n\n\n??? note \"windowGroup\"\n    See the docs for detail.\n    \ngm\n(\nimg.png\n).\nwindowGroup\n()", 
            "title": "\u5904\u7406"
        }, 
        {
            "location": "/Manipulation/#_1", 
            "text": "", 
            "title": "\u64cd\u4f5c"
        }, 
        {
            "location": "/Manipulation/#a", 
            "text": "??? note \"adjoin\"\n     gm ( img.png ). adjoin ()   ??? note \"affine\"\n     gm ( img.png ). affine ( matrix )   ??? note \"antialias\"\n    By default all imgs are anti-aliased by GraphicsMagick. To disable it pass false.\n     gm ( img.png ). antialias ( false )   ??? note \"append\"\n    Append a set of images\n    * img\n      * the path to another img\n    * ltr (optional)\n      * Boolean - specifies append direction\n      * true for left-to-right\n      * false for top-to-bottom (default)\n     gm ( img.png ). append ( img   [,   img ,   ltr ])  // appends another.jpg to img.png from left-to-right  gm ( img.png ). append ( another.jpg ). append ( true )  // appends another.jpg to img.png from left-to-right  gm ( img.png ). append ( another.jpg ,   true )  // appends another.jpg to img.png from top-to-bottom  gm ( img.png ). append ( another.jpg )  // appends third.gif below another.jpg below img.png  gm ( img.png ). append ( another.jpg ). append ( third.gif )  // appends third.gif below another.jpg below img.png  gm ( img.png ). append ( another.jpg ,   third.gif )  // appends third.gif to the right of another.jpg to the right to img.png  gm ( img.png ). append ( another.jpg ,   third.gif ,   true )   ??? note \"authenticate\"\n     gm ( img.png ). authenticate ( password )   ??? note \"autoOrient\"\n    Auto-orients the image according to its EXIF data.\n    GraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.\n     gm ( img.jpg ). autoOrient ()   ??? note \"average\"\n     gm ( img.png ). average ()", 
            "title": "A"
        }, 
        {
            "location": "/Manipulation/#b", 
            "text": "??? note \"backdrop\"\n     gm ( img.png ). backdrop ()   ??? note \"bitdepth\"\n    Specifies the number of bits of color to preserve in the image. See the docs for more detail.\n     gm ( img.png ). bitdepth ( bits )   ??? note \"blackThreshold\"\n    pixels below  threshold  become black.\n     gm ( img.png ). blackThreshold ( red   [, green ]   [, blue ]   [, opacity ])   ??? note \"bluePrimary\"\n     gm ( img.png ). bluePrimary ( x ,   x )   ??? note \"blur\"\n    Accepts a radius and optional sigma (standard deviation).\n     gm ( img.png ). blur ( radius   [,   sigma ])   ??? note \"border\"\n     gm ( img.png ). border ( width ,   height )   ??? note \"borderColor\"\n     gm ( img.png ). borderColor ( color )   ??? note \"box\"\n     gm ( img.png ). box ( color )", 
            "title": "B"
        }, 
        {
            "location": "/Manipulation/#c", 
            "text": "??? note \"channel\"\n    type\n      Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray\n     gm ( img.png ). channel ( type )   ??? note \"charcoal\"\n    Simulates a charcoal drawing. Accepts a factor.\n     gm ( img.png ). charcoal ( factor )   ??? note \"chop\"\n    Removes pixels from the interior of an image.\n     gm ( img.png ). chop ( width ,   height ,   x ,   y )   ??? note \"clip\"\n     gm ( img.png ). clip ()  \n??? note \"coalesce\"\n     gm ( img.png ). coalesce ()   ??? note \"colorize\"\n    Colorize the image with optionally separate red, green, and blue values.\n     gm ( img.png ). colorize ( red   [,   green   [,   blue ]])  \n??? note \"colorMap\"\n    type\n      shared or private\n     gm ( img.png ). colorMap ( type )   ??? note \"colors\"\n    Sets the preferred number of colors for the image (color reduction).\n     gm ( img.png ). colors ( int )   ??? note \"colorspace\"\n    Specifies the type of colorspace. See the GraphicsMagick docs for val details.\n     gm ( img.png ). colorspace ( val )   ??? note \"compose\"\n     gm ( img.png ). compose ( operator )   ??? note \"compress\"\n    type\n    None, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA\n     gm ( img.png ). compress ( type )  \n??? note \"comment\"\n    Annotates an image. See the docs for more info.\n     gm ( img.png ). comment ( text | format )   ??? note \"contrast\"\n    Increases or reduces the image contrast. Accepts a multiplier.\n     gm ( img.png ). contrast ([ +- ] multiplier )   ??? note \"convolve\"\n     gm ( img.png ). convolve ( kernel )  \n??? note \"createDirectories\"\n     gm ( img.png ). createDirectories ()   ??? note \"crop\"\n    Crops the image to the given width and height at the given x and y position.\n     gm ( img.png ). crop ( width ,   height ,   x ,   y )   ??? note \"cycle\"\n    Displace the image colormap by amount. amount is the number of positions each colormap entry is shifted.\n     gm ( img.png ). cycle ( amount )", 
            "title": "C"
        }, 
        {
            "location": "/Manipulation/#d", 
            "text": "??? note \"deconstruct\"\n     gm ( img.png ). deconstruct ()   ??? note \"define\"\n     gm ( img.png ). define ()   ??? note \"delay\"\n     amount  is in hundreths of a second.\n     gm ( img.png ). delay ( amout )   ??? note \"density\"\n    This option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image.\n     gm ( img.png ). density ( width ,   height )   ??? note \"despeckle\"\n    Reduces the speckles within the image.\n     gm ( img.png ). despeckle ()   ??? note \"displace\"\n    Shift image pixels as defined by a displacement map.\n     gm ( img.png ). displace ( horizontal ,   vertical )   ??? note \"display\"\n     gm ( img.png ). display ( value )   ??? note \"dispose\"\n     gm ( img.png ). dispose ( method )   ??? note \"dissolve\"\n     gm ( img.png ). dissolve ( method )   ??? note \"dither\"\n    Applies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\n    Note: either .colors() or .monochrome() must be used for this to take effect.\n     gm ( img.png ). dither ([ bool ])", 
            "title": "D"
        }, 
        {
            "location": "/Manipulation/#e", 
            "text": "??? note \"edge\"\n    Emphasizes edges in an image. Takes an optional radius of the emphasis to apply.\n     gm ( img.png ). edge ([ radius ])   ??? note \"emboss\"\n    Embosses the image. Takes an optional radius.\n     gm ( img.png ). emboss ([ radius ])   ??? note \"encoding\"\n    type\n    AdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\n    gm(\"img.png\").encoding(type)\n    ```  ??? note \"endian\"\n    type\n    MSB, LSB, or Native\n     gm ( img.png ). endian ( type )   ??? note \"enhance\"\n    Enhances the image.\n     gm ( img.png ). enhance ()   ??? note \"equalize\"\n    Performs histogram equalization to the image.\n     gm ( img.png ). equalize ()   ??? note \"extent\"\n    composite image on background color canvas image.\n     gm ( img.png ). extent ([ width ,   height ,   options ])", 
            "title": "E"
        }, 
        {
            "location": "/Manipulation/#f", 
            "text": "??? note \"file\"\n     gm ( img.png ). file ( filename )   ??? note \"filter\"\n    Specifies the filter to use when resizing. see link for available types.\n     gm ( img.png ). filter ( type )   ??? note \"flatten\"\n     gm ( img.png ). flatten ()   ??? note \"flip\"\n    Creates a mirror image (vertically).\n     gm ( img.png ). flip ()   ??? note \"flop\"\n    Creates a mirror image (horizontally).\n     gm ( img.png ). flop ()   ??? note \"foreground\"\n     gm ( img.png ). foreground ( color )   ??? note \"frame\"\n     gm ( img.png ). frame ( width ,   height ,   outerBevelWidth ,   innerBevelWidth )   ??? note \"fuzz\"\n     gm ( img.png ). fuzz ( distance   [, percent ])", 
            "title": "F"
        }, 
        {
            "location": "/Manipulation/#g", 
            "text": "??? note \"gamma\"\n    Adjusts the level of gamma correction.\n     gm ( img.png ). gamma ( r ,   g ,   b )   ??? note \"gaussian\"\n     gm ( img.png ). gaussian ( radius   [, sigma ])   ??? note \"geometry\"\n     gm ( img.png ). geometry ( width ,   height   [, arg ])   ??? note \"greenPrimary\"\n     gm ( img.png ). greenPrimary ( x ,   y )   ??? note \"gravity\"\n    The direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\n    direction\n    NorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast\n     gm ( img.png ). gravity ( direction )", 
            "title": "G"
        }, 
        {
            "location": "/Manipulation/#h", 
            "text": "??? note \"highlightColor\"\n     gm ( img.png ). highlightColor ( color )   ??? note \"highlightStyle\"\n     gm ( img.png ). highlightStyle ( color )", 
            "title": "H"
        }, 
        {
            "location": "/Manipulation/#i", 
            "text": "??? note \"iconGeometry\"\n     gm ( img.png ). iconGeometry ( geometry )   ??? note \"implode\"\n    Implodes the image pixels around the center. Takes an optional factor.\n     gm ( img.png ). implode ([ factor ])   ??? note \"intent\"\n    type\n    Absolute, Perceptual, Relative, or Saturation\n     gm ( img.png ). intent ( type )   ??? note \"interlace\"\n    Specifies the type of interlacing scheme. Defaults to None.  type\nNone|Line|Plane|Partition\n```js\ngm( img.png ).interlace(type)\n```", 
            "title": "I"
        }, 
        {
            "location": "/Manipulation/#l", 
            "text": "??? note \"label\"\n    Assigns a label to an image.\n     gm ( img.png ). label ( name )   ??? note \"lat\"\n     gm ( img.png ). lat ( width ,   height ,   offset   [, percent ])   ??? note \"level\"\n     gm ( img.png ). level ( blackPoint ,   gamma ,   whitePoint   [, percent ])   ??? note \"limit\"\n    Sets resource limits.  type\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs\n```js\ngm( img.png ).limit(type, val)\n```  ??? note \"list\"\n    type\n    Color, Delegate, Format, Magic, Module, Resource, or Type\n     gm ( img.png ). list ( type )   ??? note \"log\"\n    Specify format for debug log. See the docs for detail.\n     gm ( img.png ). log ( format )   ??? note \"loop\"\n    See the docs for detail.\n     gm ( img.png ). loop ( iterations )   ??? note \"lower\"\n    Creates a pseudo 3D lowering effect of the images edges.\n     gm ( img.png ). lower ( width ,   height )", 
            "title": "L"
        }, 
        {
            "location": "/Manipulation/#m", 
            "text": "??? note \"magnify\"\n    Magnifies the image factor times.\n     gm ( img.png ). magnify ( factor )   ??? note \"map\"\n    See the docs for detail.\n     gm ( img.png ). map ( filename )   ??? note \"mask\"\n    See the docs for detail.\n     gm ( img.png ). mask ( filename )   ??? note \"matte\"\n    See the docs for detail.\n     gm ( img.png ). matte ()   ??? note \"matteColor\"\n    See the docs for detail.\n     gm ( img.png ). matteColor ( color )   ??? note \"maximumError\"\n    See the docs for detail.\n     gm ( img.png ). maximumError ( limit )   ??? note \"median\"\n    Applies a median filter to the image. The optional param radius adjusts the weight of the effect.\n     gm ( img.png ). median ([ radius ])   ??? note \"minify\"\n    Minifies the image factor times.\n     gm ( img.png ). minify ( factor )   ??? note \"mode\"\n    See the docs for detail.\n     gm ( img.png ). mode ( value )   ??? note \"modulate\"\n    Varies the brightness, saturation, and hue of the image.\n     gm ( img.png ). modulate ( b   [,   s   [,   h ]])   ??? note \"monitor\"\n    See the docs for detail.\n     gm ( img.png ). monitor ()   ??? note \"monochrome\"\n    Transforms the image to black and white.\n     gm ( img.png ). monochrome ()   ??? note \"morph\"\n    Morphs two images together.  ??? note \"otherImg\"\n    the path to another img  ??? note \"outName\"\n    the path where the image will be saved  ??? note \"callback\"\n    A function to be executed when morphing is complete. callback will be passed the standard args that .write() receives.\n     gm ( img.png ). morph ( otherImg ,   outName ,   callback )   ??? note \"mosaic\"\n    See the docs for detail.\n     gm ( img.png ). mosaic ()   ??? note \"motionBlur\"\n    See the docs for detail.\n     gm ( img.png ). motionBlur ( radius   [,   sigma ,   angle ])", 
            "title": "M"
        }, 
        {
            "location": "/Manipulation/#n", 
            "text": "??? note \"name\"\n    See the docs for detail.\n     gm ( img.png ). name ()   ??? note \"negative\"\n    Replaces every pixel with its complementary color.\n     gm ( img.png ). negative ()   ??? note \"noise\"\n    Add or reduce noise in the image.\n    adius|type\n    To add noise pass one of the following:\n    uniform\n    gaussian\n    multiplicative\n    impulse\n    laplacian\n    poisson\n    Otherwise the argument will be interpreted as a radius which adjusts the weight of the effect.\n     gm ( img.png ). noise ( radius | type )   ??? note \"noop\"\n    See the docs for detail.\n     gm ( img.png ). noop ()   ??? note \"normalize\"\n    See the docs for detail.\n     gm ( img.png ). normalize ()", 
            "title": "N"
        }, 
        {
            "location": "/Manipulation/#o", 
            "text": "??? note \"opaque\"\n    See the docs for detail.\n     gm ( img.png ). opaque ( color )   ??? note \"operator\"\n    See the docs for detail.\n     gm ( img.png ). operator ( channel ,   operator ,   rvalue   [, percent ])   ??? note \"orderedDither\"\n    See the docs for detail.\n     gm ( img.png ). orderedDither ( channelType ,   NxN )   ??? note \"outputDirectory\"\n    See the docs for detail.\n     gm ( img.png ). outputDirectory ( channelType ,   NxN )", 
            "title": "O"
        }, 
        {
            "location": "/Manipulation/#p", 
            "text": "??? note \"page\n    See the docs for detail.\n     gm ( img.png ). page ( width ,   height   [, arg ])   ??? note \"pause\n    See the docs for detail.\n     gm ( img.png ). pause ( seconds )   ??? note \"pen\nSee the docs for detail. gm ( img.png ). pen ( color )   ??? note \"ping\nSee the docs for detail. gm ( img.png ). ping ()   ??? note \"pointSize\nSee the docs for detail. gm ( img.png ). pointSize ( value )   ??? note \"noProfile\nRemoves EXIF, ICM, etc profile data. gm ( img.png ). noProfile ()   ??? note \"preview\ntype\nSee the docs for valid types. gm ( img.png ). preview ( type )   ??? note \"paint\nSimulates an oil painting. gm ( img.png ). paint ( radius )   ??? note \"process\nSee the docs for detail. gm ( img.png ). process ( command )   ??? note \"profile\nSee the docs for detail. gm ( img.png ). profile ( filename )   ??? note \"progress\nSee the docs for detail. gm ( img.png ). progress ()   ??? note \"randomThreshold\nSee the docs for detail. gm ( img.png ). randomThreshold ( channelType ,   LOWxHIGH )", 
            "title": "P"
        }, 
        {
            "location": "/Manipulation/#q", 
            "text": "??? note \"quality\nAdjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best). gm ( img.png ). quality ( val )", 
            "title": "Q"
        }, 
        {
            "location": "/Manipulation/#r", 
            "text": "??? note \"raise\nCreates a pseudo 3D raising effect of the images edges. gm ( img.png ). raise ( width ,   height )   ??? note \"recolor\nSee the docs for detail. gm ( img.png ). recolor ( matrix )   ??? note \"redPrimary\nSee the docs for detail. gm ( img.png ). redPrimary ( x ,   y )   ??? note \"region\nSpecifies that all following methods only apply to the area specified by width, height, x, y. gm ( img.png ). region ( width ,   height ,   x ,   y ). sepia ()  \nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y.  ??? note \"remote\nSee the docs for detail. gm ( img.png ). remote ()   ??? note \"render\nSee the docs for detail. gm ( img.png ). render ()   ??? note \"repage\nSee the docs for detail. gm ( img.png ). repage ( width ,   height ,   xoff ,   yoff ,   arg )", 
            "title": "R"
        }, 
        {
            "location": "/Manipulation/#s", 
            "text": "??? note \"sample\nSee the docs for detail. gm ( img.png ). sample ( geometry )   ??? note \"samplingFactor\nSee the docs for detail. gm ( img.png ). samplingFactor ( horizontalFactor ,   verticalFactor )   ??? note \"rawSize\nSee the docs for detail. gm ( img.png ). rawSize ( width ,   height ,   offset )   ??? note \"resample\nResamples the image to specified horizontal and vertical resolution. gm ( img.png ). resample ( horizontal ,   vertical )   ??? note \"resize\nResize the image.  options\n%, @, !,   or   see the GraphicsMagick docs for details\ngm(\"img.png\").resize(width [, height [, options]])\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40)  To resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50)  To resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50)  To override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\")  ??? note \"roll\nRolls an image vertically or horizontally. gm ( img.png ). roll ( horizontalInt ,   verticalInt )   ??? note \"rotate\nRotates the image by degrees and fills the background with color. gm ( img.png ). rotate ( color ,   degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#s_1", 
            "text": "??? note \"scene\nSee the docs for detail. gm ( img.png ). scene ( value )   ??? note \"scenes\nSee the docs for detail. gm ( img.png ). scenes ( start ,   end )   ??? note \"scale\nScales the image. gm ( img.png ). scale ( width ,   height )   ??? note \"screen\nSee the docs for detail. gm ( img.png ). screen ()   ??? note \"segment\nSee the docs for detail. gm ( img.png ). segment ( clusterThreshold ,   smoothingThreshold )   ??? note \"selectFrame\nHelpful if we process a large .gif so we don't load in memory each frame. gm ( img.png ). selectFrame ( 0 )   ??? note \"sepia\nA convenience method to apply a sepia effect to the image.  gm(\"img.png\").sepia() ??? note  set\nSee the docs for detail.\n\ngm( img.png ).set(attribute, value)\n\n??? note  setFormat\nOverriddes the output image format.\n\nHelpful if we are outputting an image with no extention but need to change formats.\n\ngm( img.png ).setFormat(format)  shade\nSee the docs for detail.  gm(\"img.png\").shade(azimuth, elevation) shadow\nSee the docs for detail.\n\ngm( img.png ).shadow(radius, sigma)  sharedMemory\nSee the docs for detail.  gm(\"img.png\").sharedMemory() shave\nSee the docs for detail.\n\ngm( img.png ).shave(width, height, percent)  sharpen\nSharpens the image.  gm(\"img.png\").sharpen(radius [, sigma]) shear\nSee the docs for detail.\n\ngm( img.png ).shear(xDegrees, yDegrees)  silent\nSee the docs for detail.  gm(\"img.png\").silent() snaps\nSee the docs for detail.\n\ngm( img.png ).snaps(value)  solarize\nNegates all pixels above threshold percent.  gm(\"img.png\").solarize(threshold) spread\nDesplaces pixels by a random amount.\n\ngm( img.png ).spread(amount)  stegano\nSee the docs for detail.  gm(\"img.png\").stegano(offset) stereo\nSee the docs for detail.\n\ngm( img.png ).stereo()  strip\nStrips the image of any profiles or comments.  Similar to noProfile() but removes both profile and comment data. only works with imageMagick.  gm(\"img.png\").strip() swirl\nSwirls pixels arount the center of the image. degrees specifies the tightness of the swirl.\n\ngm( img.png ).swirl(degrees)  textFont\nSee the docs for detail.", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#t", 
            "text": "gm(\"img.png\").textFont(font) texture\nSee the docs for detail.\n\ngm( img.png ).texture(font)  threshold\nSee the docs for detail.  gm(\"img.png\").threshold(value [, percent]) thumb\nCreates a thumbnail based on minimum sizes.\n\nwidth\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm( img.png ).thumb(width, height, outName, quality, callback)\ntile\nSee the docs for detail.\n\ngm( img.png ).tile(filename)  title\nSee the docs for detail.  gm(\"img.png\").title(string) transform\nSee the docs for detail.\n\ngm( img.png ).transform(color)  transparent\nSee the docs for detail.  gm(\"img.png\").transparent(color) treeDepth\nSee the docs for detail.\n\ngm( img.png ).treeDepth(color)  trim\nTrim an image by removing any edges that are exactly the same color as the corner pixels.  gm(\"img.png\").trim() type\nSpecifies the image type.\n\ntype\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm( img.png ).type(type)\nupdate\nSee the docs for detail.\n\n## U\n\ngm( img.png ).update(seconds)  units\nSee the docs for detail.  gm(\"img.png\").units(type) unsharp\nSee the docs for detail.\n\ngm( img.png ).unsharp(radius [, sigma, amount, threshold])  usePixmap\nSee the docs for detail.  gm(\"img.png\").usePixmap() view\nSee the docs for detail.\n\n## V\n\ngm( img.png ).view()  virtualPixel\nSee the docs for detail.  gm(\"img.png\").virtualPixel(method) visual\nSee the docs for detail.\n\ngm( img.png ).visual(type)", 
            "title": "T"
        }, 
        {
            "location": "/Manipulation/#w", 
            "text": "??? note \"watermark\"\n    See the docs for detail.\n     gm ( img.png ). watermark ( brightness ,   saturation )   ??? note \"wave\"\n    See the docs for detail.\n     gm ( img.png ). wave ( amplitude ,   wavelength )   ??? note \"whitePoint\"\n    See the docs for detail.\n     gm ( img.png ). whitePoint ( x ,   y )   ??? note \"whiteThreshold\"\n    See the docs for detail.\n     gm ( img.png ). whiteThreshold ( red ,   green ,   blue ,   opacity )   ??? note \"window\"\n    See the docs for detail.\n     gm ( img.png ). window ( id )   ??? note \"windowGroup\"\n    See the docs for detail.\n     gm ( img.png ). windowGroup ()", 
            "title": "W"
        }, 
        {
            "location": "/Getters/", 
            "text": "\u83b7\u53d6\u5668\n\n\nAll getters have the same signature:\n\n\ngm\n(\nimage.png\n).\nsize\n(\nfunction\n(\nerr\n,\n \nvalue\n){\n\n  \n// note : value may be undefined\n\n\n})\n\n\n\n\n\n\n\nsize - returns the size (WxH) of the image\n\n\nformat - returns the image format (gif, jpeg, png, etc)\n\n\ndepth - returns the image color depth\n\n\ncolor - returns the number of colors\n\n\nres - returns the image resolution\n\n\nfilesize - returns image filesize\n\n\nidentify - returns all image data available\n\n\norientation - returns the EXIF orientation of the image", 
            "title": "\u83b7\u5f97\u8005"
        }, 
        {
            "location": "/Getters/#_1", 
            "text": "All getters have the same signature:  gm ( image.png ). size ( function ( err ,   value ){ \n   // note : value may be undefined  })    size - returns the size (WxH) of the image  format - returns the image format (gif, jpeg, png, etc)  depth - returns the image color depth  color - returns the number of colors  res - returns the image resolution  filesize - returns image filesize  identify - returns all image data available  orientation - returns the EXIF orientation of the image", 
            "title": "\u83b7\u53d6\u5668"
        }, 
        {
            "location": "/Drawing/", 
            "text": "\u57fa\u672c\u7ed8\u56fe\n\n\nTake a look at drawing.js for examples.\n\n\n\n\ndraw\n\n\nAnnotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods.\n\ngm\n(\nimg.png\n).\ndraw\n(\nargs\n)\n\n\n\n\n\n\n\n\ndrawArc\n\n\nInscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation.\n\ngm\n(\nimg.png\n).\ndrawArc\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n,\n \nr0\n,\n \nr1\n)\n\n\n\n\n\n\n\n\ndrawBezier\n\n\nDraw a Bezier curve.\n\ngm\n(\nimg.png\n).\ndrawBezier\n([\nx0\n,\n \ny0\n],\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\n\n\n\ndrawCircle\n\n\nDraws a Circle.\n\ngm\n(\nimg.png\n).\ndrawCircle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\n\n\n\ndrawEllipse\n\n\nDraws an Ellipse.\n\ngm\n(\nimg.png\n).\ndrawEllipse\n(\nx0\n,\n \ny0\n,\n \nr0\n,\n \nry\n,\n \nr0\n,\n \nr1\n)\n\n\n\n\n\n\n\n\ndrawLine\n\n\nDraws a Line.\n\ngm\n(\nimg.png\n).\ndrawLine\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\n\n\n\ndrawPoint\n\n\nDraws a Point.\n\ngm\n(\nimg.png\n).\ndrawPoint\n(\nx\n,\n \ny\n)\n\n\n\n\n\n\n\n\ndrawPolygon\n\n\nDraws a Polygon.\n\ngm\n(\nimg.png\n).\ndrawPolygon\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\n\n\n\ndrawPolyline\n\n\nDraws a Polyline.\n\ngm\n(\nimg.png\n).\ndrawPolyline\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\n\n\n\ndrawRectangle\n\n\nDraws a Rectangle. wc and hc are optional and add roundness to the corners.\n\ngm\n(\nimg.png\n).\ndrawRectangle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n \n[,\n \nwc\n,\n \nhc\n])\n\n\n\n\n\n\n\n\ndrawText\n\n\nDraws text on an image at x/y coordinates.\n\ngm\n(\nimg.png\n).\ndrawText\n(\nx\n,\n \ny\n,\n \ntext\n \n[,\n \ngravity\n])\n\n\n\n\n\n\n\n\nfill\n\n\nSpecifies the color to use when filling a drawn shape.\n\ngm\n(\nimg.png\n).\nfill\n(\ncolor\n)\n\n\n\n\n\n\n\n\nfont\n\n\nSpecifies the font to use when you drawText.\n\ngm\n(\nimg.png\n).\nfont\n(\nname\n)\n\n\n\n\n\n\n\n\nfontSize\n\n\nSpecifies the font size to use when you drawText.\n\ngm\n(\nimg.png\n).\nfontSize\n(\nsize\n)\n\n\n\n\n\n\n\n\nstroke\n\n\nSpecifies the color to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstroke\n(\ncolor\n \n[,\n \nwidth\n])\n\n\n\n\n\n\n\n\nstrokeWidth\n\n\nSpecifies the stroke width to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstrokeWidth\n(\nwidth\n)\n\n\n\n\n\n\n\n\nsetDraw\n\n\nSets drawing properties. property can be either \"color\" or \"matte\".\n\ngm\n(\nimg.png\n).\nsetDraw\n(\nproperty\n,\n \nx\n,\n \ny\n,\n \nmethod\n)", 
            "title": "\u7ed8\u753b"
        }, 
        {
            "location": "/Drawing/#_1", 
            "text": "Take a look at drawing.js for examples.   draw  Annotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods. gm ( img.png ). draw ( args )     drawArc  Inscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation. gm ( img.png ). drawArc ( x0 ,   y0 ,   x1 ,   y1 ,   r0 ,   r1 )     drawBezier  Draw a Bezier curve. gm ( img.png ). drawBezier ([ x0 ,   y0 ],   ...   [ xn ,   yn ])     drawCircle  Draws a Circle. gm ( img.png ). drawCircle ( x0 ,   y0 ,   x1 ,   y1 )     drawEllipse  Draws an Ellipse. gm ( img.png ). drawEllipse ( x0 ,   y0 ,   r0 ,   ry ,   r0 ,   r1 )     drawLine  Draws a Line. gm ( img.png ). drawLine ( x0 ,   y0 ,   x1 ,   y1 )     drawPoint  Draws a Point. gm ( img.png ). drawPoint ( x ,   y )     drawPolygon  Draws a Polygon. gm ( img.png ). drawPolygon ([ x0 ,   y0 ]   ...   [ xn ,   yn ])     drawPolyline  Draws a Polyline. gm ( img.png ). drawPolyline ([ x0 ,   y0 ]   ...   [ xn ,   yn ])     drawRectangle  Draws a Rectangle. wc and hc are optional and add roundness to the corners. gm ( img.png ). drawRectangle ( x0 ,   y0 ,   x1 ,   y1   [,   wc ,   hc ])     drawText  Draws text on an image at x/y coordinates. gm ( img.png ). drawText ( x ,   y ,   text   [,   gravity ])     fill  Specifies the color to use when filling a drawn shape. gm ( img.png ). fill ( color )     font  Specifies the font to use when you drawText. gm ( img.png ). font ( name )     fontSize  Specifies the font size to use when you drawText. gm ( img.png ). fontSize ( size )     stroke  Specifies the color to use when stroking a drawn shape. gm ( img.png ). stroke ( color   [,   width ])     strokeWidth  Specifies the stroke width to use when stroking a drawn shape. gm ( img.png ). strokeWidth ( width )     setDraw  Sets drawing properties. property can be either \"color\" or \"matte\". gm ( img.png ). setDraw ( property ,   x ,   y ,   method )", 
            "title": "\u57fa\u672c\u7ed8\u56fe"
        }, 
        {
            "location": "/ImageComparisons/", 
            "text": "\u56fe\u50cf\u6bd4\u8f83\n\n\nBoth GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().\n\n\nCurrently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.\n\n\nYour callback will be passed four arguments:\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n  \nconsole\n.\nlog\n(\nThe images are equal: %s\n,\n \nisEqual\n);\n\n  \nconsole\n.\nlog\n(\nActual equality: %d\n,\n \nequality\n)\n\n  \nconsole\n.\nlog\n(\nRaw output was: %j\n,\n \nraw\n);\n\n\n});\n\n\n\n\n\nYou can also output a diff image of the two images by passing a configuration object in place of the tolerance:\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nhighlightColor\n:\n \nyellow\n,\n \n// optional. Defaults to red\n\n  \nfile\n:\n \n./diff.png\n \n// required\n\n\n};\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \noptions\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n\n});", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/ImageComparisons/#_1", 
            "text": "Both GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().  Currently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.  Your callback will be passed four arguments:  gm . compare ( path1 ,   path2 ,   function   ( err ,   isEqual ,   equality ,   raw )   { \n   if   ( err )   throw   err ; \n   console . log ( The images are equal: %s ,   isEqual ); \n   console . log ( Actual equality: %d ,   equality ) \n   console . log ( Raw output was: %j ,   raw );  });   You can also output a diff image of the two images by passing a configuration object in place of the tolerance:  var   options   =   { \n   highlightColor :   yellow ,   // optional. Defaults to red \n   file :   ./diff.png   // required  };  gm . compare ( path1 ,   path2 ,   options ,   function   ( err )   { \n   if   ( err )   throw   err ;  });", 
            "title": "\u56fe\u50cf\u6bd4\u8f83"
        }, 
        {
            "location": "/UsingImagemagick/", 
            "text": "\u4f7f\u7528 IMAGEMAGICK\n\n\nWe have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.\n\n\nvar\n \nimageMagick\n \n=\n \ngm\n.\nsubClass\n({\n \nimageMagick\n:\n \ntrue\n \n});\n\n\n\n\n\nimageMagick\n(\nimg.png\n).\nautoOrient\n().\nwrite\n(\n/path\n,\n \ncallback\n);\n\n\n\n\n\nIMAGEMAGICK OPTIONS\n\n\nUnlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:\n\n\nbrew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528"
        }, 
        {
            "location": "/UsingImagemagick/#imagemagick", 
            "text": "We have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.  var   imageMagick   =   gm . subClass ({   imageMagick :   true   });   imageMagick ( img.png ). autoOrient (). write ( /path ,   callback );   IMAGEMAGICK OPTIONS  Unlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:  brew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528 IMAGEMAGICK"
        }
    ]
}