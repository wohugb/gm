{
    "docs": [
        {
            "location": "/", 
            "text": "Get it!\n\n\n\u9996\u5148\u9700\u8981\u5b89\u88c5 \nGraphicsMagick\n \u6216\u8005 \nImageMagick\n. \u7136\u540e:\n\n\n npm install gm", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/#get-it", 
            "text": "\u9996\u5148\u9700\u8981\u5b89\u88c5  GraphicsMagick  \u6216\u8005  ImageMagick . \u7136\u540e:   npm install gm", 
            "title": "Get it!"
        }, 
        {
            "location": "/Manipulation/", 
            "text": "\u64cd\u4f5c\n\n\nA\n\n\nadjoin\ngm\n(\nimg.png\n).\nadjoin\n()\n\n\n\n\naffine\ngm\n(\nimg.png\n).\naffine\n(\nmatrix\n)\n\n\n\n\nantialias\n\u6240\u6709\u56fe\u7247\u9ed8\u8ba4\u662f anti-aliased by GraphicsMagick. To disable it pass false.\n\ngm\n(\nimg.png\n).\nantialias\n(\nfalse\n)\n\n\nappend - \u9644\u52a0\u4e00\u7ec4\u56fe\u50cf\n\u53c2\u6570\nimg\n\u53e6\u4e00\u5f20\u56fe\u7247\u5730\u5740\nltr (\u53ef\u9009)\nBoolean - \u6307\u5b9a\u9644\u52a0\u4f4d\u7f6e\ntrue \u662f left-to-right \u5de6\u5230\u53f3\nfalse \u662f top-to-bottom (\u9ed8\u8ba4\u4e0a\u5230\u4e0b)\n  \ngm\n(\nimg.png\n).\nappend\n(\nimg\n \n[,\n \nimg\n,\n \nltr\n])\n\n\n  \n// appends another.jpg to img.png from left-to-right\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\ntrue\n)\n\n\n  \n// appends another.jpg to img.png from left-to-right\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \ntrue\n)\n\n\n  \n// appends another.jpg to img.png from top-to-bottom\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n)\n\n\n  \n// appends third.gif below another.jpg below img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\nthird.gif\n)\n\n\n  \n// appends third.gif below another.jpg below img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n)\n\n\n  \n// appends third.gif to the right of another.jpg to the right to img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n,\n \ntrue\n)\n\n\n\n\nauthenticate\n  \ngm\n(\nimg.png\n).\nauthenticate\n(\npassword\n)\n\n\n\n\nautoOrient\nAuto-orients the image according to its EXIF data.\nGraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.\n  \ngm\n(\nimg.jpg\n).\nautoOrient\n()\n\n\n\n\naverage\ngm\n(\nimg.png\n).\naverage\n()\n\n\n\n\nB\n\n\nbackdrop\ngm\n(\nimg.png\n).\nbackdrop\n()\n\n\n\n\nbitdepth\nSpecifies the number of bits of color to preserve in the image. See the docs for more detail.\n\ngm\n(\nimg.png\n).\nbitdepth\n(\nbits\n)\n\n\nblackThreshold\npixels below \nthreshold\n become black.\n\ngm\n(\nimg.png\n).\nblackThreshold\n(\nred\n \n[,\ngreen\n]\n \n[,\nblue\n]\n \n[,\nopacity\n])\n\n\nbluePrimary\ngm\n(\nimg.png\n).\nbluePrimary\n(\nx\n,\n \nx\n)\n\n\n\n\nblur\nAccepts a radius and optional sigma (standard deviation).\n\ngm\n(\nimg.png\n).\nblur\n(\nradius\n \n[,\n \nsigma\n])\n\n\nborder\ngm\n(\nimg.png\n).\nborder\n(\nwidth\n,\n \nheight\n)\n\n\n\n\nborderColor\ngm\n(\nimg.png\n).\nborderColor\n(\ncolor\n)\n\n\n\n\nbox\ngm\n(\nimg.png\n).\nbox\n(\ncolor\n)\n\n\n\n\nC\n\n\nchannel\ntype\n  Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray\n\ngm\n(\nimg.png\n).\nchannel\n(\ntype\n)\n\n\ncharcoal\nSimulates a charcoal drawing. Accepts a factor.\n\ngm\n(\nimg.png\n).\ncharcoal\n(\nfactor\n)\n\n\nchop\nRemoves pixels from the interior of an image.\n\ngm\n(\nimg.png\n).\nchop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\nclip\ngm\n(\nimg.png\n).\nclip\n()\n\n\n\n\ncoalesce\ngm\n(\nimg.png\n).\ncoalesce\n()\n\n\n\n\ncolorize\nColorize the image with optionally separate red, green, and blue values.\n\ngm\n(\nimg.png\n).\ncolorize\n(\nred\n \n[,\n \ngreen\n \n[,\n \nblue\n]])\n\n\ncolorMap\ntype\n  shared or private\n\ngm\n(\nimg.png\n).\ncolorMap\n(\ntype\n)\n\n\ncolors\nSets the preferred number of colors for the image (color reduction).\n\ngm\n(\nimg.png\n).\ncolors\n(\nint\n)\n\n\ncolorspace\nSpecifies the type of colorspace. See the GraphicsMagick docs for val details.\n\ngm\n(\nimg.png\n).\ncolorspace\n(\nval\n)\n\n\ncompose\ngm\n(\nimg.png\n).\ncompose\n(\noperator\n)\n\n\n\n\ncompress\ntype\nNone, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA\n\ngm\n(\nimg.png\n).\ncompress\n(\ntype\n)\n\n\ncomment\nAnnotates an image. See the docs for more info.\n\ngm\n(\nimg.png\n).\ncomment\n(\ntext\n|\nformat\n)\n\n\ncontrast\nIncreases or reduces the image contrast. Accepts a multiplier.\n\ngm\n(\nimg.png\n).\ncontrast\n([\n+-\n]\nmultiplier\n)\n\n\nconvolve\ngm\n(\nimg.png\n).\nconvolve\n(\nkernel\n)\n\n\n\n\ncreateDirectories\ngm\n(\nimg.png\n).\ncreateDirectories\n()\n\n\n\n\ncrop\nCrops the image to the given width and height at the given x and y position.\n\ngm\n(\nimg.png\n).\ncrop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\ncycle\nDisplace the image colormap by amount. amount is the number of positions each colormap entry is shifted.\n\ngm\n(\nimg.png\n).\ncycle\n(\namount\n)\n\n\nD\n\n\ndeconstruct\ngm\n(\nimg.png\n).\ndeconstruct\n()\n\n\n\n\ndefine\ngm\n(\nimg.png\n).\ndefine\n()\n\n\n\n\ndelay\namount\n is in hundreths of a second.\n\ngm\n(\nimg.png\n).\ndelay\n(\namout\n)\n\n\ndensity\nThis option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image.\n\ngm\n(\nimg.png\n).\ndensity\n(\nwidth\n,\n \nheight\n)\n\n\ndespeckle\nReduces the speckles within the image.\n\ngm\n(\nimg.png\n).\ndespeckle\n()\n\n\ndisplace\nShift image pixels as defined by a displacement map.\n\ngm\n(\nimg.png\n).\ndisplace\n(\nhorizontal\n,\n \nvertical\n)\n\n\ndisplay\ngm\n(\nimg.png\n).\ndisplay\n(\nvalue\n)\n\n\n\n\ndispose\ngm\n(\nimg.png\n).\ndispose\n(\nmethod\n)\n\n\n\n\ndissolve\ngm\n(\nimg.png\n).\ndissolve\n(\nmethod\n)\n\n\n\n\ndither\nApplies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\nNote: either .colors() or .monochrome() must be used for this to take effect.\n\ngm\n(\nimg.png\n).\ndither\n([\nbool\n])\n\n\nE\n\n\nedge\nEmphasizes edges in an image. Takes an optional radius of the emphasis to apply.\n\ngm\n(\nimg.png\n).\nedge\n([\nradius\n])\n\n\nemboss\nEmbosses the image. Takes an optional radius.\n\ngm\n(\nimg.png\n).\nemboss\n([\nradius\n])\n\n\nencoding\ntype\nAdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\ngm(\"img.png\").encoding(type)\n```\nendian\ntype\nMSB, LSB, or Native\n\ngm\n(\nimg.png\n).\nendian\n(\ntype\n)\n\n\nenhance\nEnhances the image.\n\ngm\n(\nimg.png\n).\nenhance\n()\n\n\nequalize\nPerforms histogram equalization to the image.\n\ngm\n(\nimg.png\n).\nequalize\n()\n\n\nextent\ncomposite image on background color canvas image.\n\ngm\n(\nimg.png\n).\nextent\n([\nwidth\n,\n \nheight\n,\n \noptions\n])\n\n\nF\n\n\nfile\ngm\n(\nimg.png\n).\nfile\n(\nfilename\n)\n\n\n\n\nfilter\nSpecifies the filter to use when resizing. see link for available types.\n\ngm\n(\nimg.png\n).\nfilter\n(\ntype\n)\n\n\nflatten\ngm\n(\nimg.png\n).\nflatten\n()\n\n\n\n\nflip\nCreates a mirror image (vertically).\n\ngm\n(\nimg.png\n).\nflip\n()\n\n\nflop\nCreates a mirror image (horizontally).\n\ngm\n(\nimg.png\n).\nflop\n()\n\n\nforeground\ngm\n(\nimg.png\n).\nforeground\n(\ncolor\n)\n\n\n\n\nframe\ngm\n(\nimg.png\n).\nframe\n(\nwidth\n,\n \nheight\n,\n \nouterBevelWidth\n,\n \ninnerBevelWidth\n)\n\n\n\n\nfuzz\ngm\n(\nimg.png\n).\nfuzz\n(\ndistance\n \n[,\npercent\n])\n\n\n\n\nG\n\n\ngamma\nAdjusts the level of gamma correction.\n\ngm\n(\nimg.png\n).\ngamma\n(\nr\n,\n \ng\n,\n \nb\n)\n\n\ngaussian\ngm\n(\nimg.png\n).\ngaussian\n(\nradius\n \n[,\nsigma\n])\n\n\n\n\ngeometry\ngm\n(\nimg.png\n).\ngeometry\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\n\n\ngreenPrimary\ngm\n(\nimg.png\n).\ngreenPrimary\n(\nx\n,\n \ny\n)\n\n\n\n\ngravity\nThe direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\ndirection\nNorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast\n\ngm\n(\nimg.png\n).\ngravity\n(\ndirection\n)\n\n\nH\n\n\nhighlightColor\ngm\n(\nimg.png\n).\nhighlightColor\n(\ncolor\n)\n\n\n\n\nhighlightStyle\ngm\n(\nimg.png\n).\nhighlightStyle\n(\ncolor\n)\n\n\n\n\nI\n\n\niconGeometry\ngm\n(\nimg.png\n).\niconGeometry\n(\ngeometry\n)\n\n\n\n\nimplode\nImplodes the image pixels around the center. Takes an optional factor.\n\ngm\n(\nimg.png\n).\nimplode\n([\nfactor\n])\n\n\nintent\ntype\nAbsolute, Perceptual, Relative, or Saturation\n\ngm\n(\nimg.png\n).\nintent\n(\ntype\n)\n\n\ninterlace\nSpecifies the type of interlacing scheme. Defaults to None.\ntype\nNone|Line|Plane|Partition\n\ngm\n(\nimg.png\n).\ninterlace\n(\ntype\n)\n\n\nL\n\n\nlabel\nAssigns a label to an image.\n\ngm\n(\nimg.png\n).\nlabel\n(\nname\n)\n\n\nlat\ngm\n(\nimg.png\n).\nlat\n(\nwidth\n,\n \nheight\n,\n \noffset\n \n[,\npercent\n])\n\n\n\n\nlevel\ngm\n(\nimg.png\n).\nlevel\n(\nblackPoint\n,\n \ngamma\n,\n \nwhitePoint\n \n[,\npercent\n])\n\n\n\n\nlimit\nSets resource limits.\ntype\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs\n\ngm\n(\nimg.png\n).\nlimit\n(\ntype\n,\n \nval\n)\n\n\nlist\ntype\nColor, Delegate, Format, Magic, Module, Resource, or Type\n\n  \ngm\n(\nimg.png\n).\nlist\n(\ntype\n)\n\n\nlog\nSpecify format for debug log. \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nlog\n(\nformat\n)\n\n\nloop\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nloop\n(\niterations\n)\n\n\nlower\nCreates a pseudo 3D lowering effect of the images edges.\n\ngm\n(\nimg.png\n).\nlower\n(\nwidth\n,\n \nheight\n)\n\n\nM\n\n\nmagnify\nMagnifies the image factor times.\n\ngm\n(\nimg.png\n).\nmagnify\n(\nfactor\n)\n\n\nmap\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmap\n(\nfilename\n)\n\n\nmask\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmask\n(\nfilename\n)\n\n\nmatte\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmatte\n()\n\n\nmatteColor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmatteColor\n(\ncolor\n)\n\n\nmaximumError\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmaximumError\n(\nlimit\n)\n\n\nmedian\nApplies a median filter to the image. The optional param radius adjusts the weight of the effect.\n\ngm\n(\nimg.png\n).\nmedian\n([\nradius\n])\n\n\nminify\nMinifies the image factor times.\n\ngm\n(\nimg.png\n).\nminify\n(\nfactor\n)\n\n\nmode\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmode\n(\nvalue\n)\n\n\nmodulate\nVaries the brightness, saturation, and hue of the image.\n\ngm\n(\nimg.png\n).\nmodulate\n(\nb\n \n[,\n \ns\n \n[,\n \nh\n]])\n\n\nmonitor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmonitor\n()\n\n\nmonochrome\nTransforms the image to black and white.\n\ngm\n(\nimg.png\n).\nmonochrome\n()\n\n\nmorph\nMorphs two images together.\notherImg\nthe path to another img\noutName\nthe path where the image will be saved\ncallback\nA function to be executed when morphing is complete. callback will be passed the standard args that .write() receives.\n\ngm\n(\nimg.png\n).\nmorph\n(\notherImg\n,\n \noutName\n,\n \ncallback\n)\n\n\nmosaic\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmosaic\n()\n\n\nmotionBlur\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmotionBlur\n(\nradius\n \n[,\n \nsigma\n,\n \nangle\n])\n\n\nN\n\n\nname\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nname\n()\n\n\nnegative\nReplaces every pixel with its complementary color.\n\ngm\n(\nimg.png\n).\nnegative\n()\n\n\nnoise\nAdd or reduce noise in the image.\nadius|type\nTo add noise pass one of the following:\nuniform\ngaussian\nmultiplicative\nimpulse\nlaplacian\npoisson\nOtherwise the argument will be interpreted as a radius which adjusts the weight of the effect.\n\ngm\n(\nimg.png\n).\nnoise\n(\nradius\n|\ntype\n)\n\n\nnoop\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nnoop\n()\n\n\nnormalize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nnormalize\n()\n\n\nO\n\n\nopaque\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nopaque\n(\ncolor\n)\n\n\noperator\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\noperator\n(\nchannel\n,\n \noperator\n,\n \nrvalue\n \n[,\npercent\n])\n\n\norderedDither\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\norderedDither\n(\nchannelType\n,\n \nNxN\n)\n\n\noutputDirectory\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\noutputDirectory\n(\nchannelType\n,\n \nNxN\n)\n\n\nP\n\n\npage\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npage\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\npause\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npause\n(\nseconds\n)\n\n\npen\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npen\n(\ncolor\n)\n\n\nping\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nping\n()\n\n\npointSize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npointSize\n(\nvalue\n)\n\n\nnoProfile\nRemoves EXIF, ICM, etc profile data.\n\ngm\n(\nimg.png\n).\nnoProfile\n()\n\n\npreview\ntype\nSee the docs for valid types.\n\ngm\n(\nimg.png\n).\npreview\n(\ntype\n)\n\n\npaint\nSimulates an oil painting.\n\ngm\n(\nimg.png\n).\npaint\n(\nradius\n)\n\n\nprocess\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprocess\n(\ncommand\n)\n\n\nprofile\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprofile\n(\nfilename\n)\n\n\nprogress\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprogress\n()\n\n\nrandomThreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrandomThreshold\n(\nchannelType\n,\n \nLOWxHIGH\n)\n\n\nQ\n\n\nquality\nAdjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best).\n\ngm\n(\nimg.png\n).\nquality\n(\nval\n)\n\n\nR\n\n\nraise\nCreates a pseudo 3D raising effect of the images edges.\n\ngm\n(\nimg.png\n).\nraise\n(\nwidth\n,\n \nheight\n)\n\n\nrecolor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrecolor\n(\nmatrix\n)\n\n\nredPrimary\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nredPrimary\n(\nx\n,\n \ny\n)\n\n\nregion\nSpecifies that all following methods only apply to the area specified by width, height, x, y.\n\ngm\n(\nimg.png\n).\nregion\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n).\nsepia\n()\n\n\n\nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y.\nremote\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nremote\n()\n\n\nrender\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrender\n()\n\n\nrepage\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrepage\n(\nwidth\n,\n \nheight\n,\n \nxoff\n,\n \nyoff\n,\n \narg\n)\n\n\nS\n\n\nsample\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nsample\n(\ngeometry\n)\n\n\nsamplingFactor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nsamplingFactor\n(\nhorizontalFactor\n,\n \nverticalFactor\n)\n\n\nrawSize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrawSize\n(\nwidth\n,\n \nheight\n,\n \noffset\n)\n\n\nresample\nResamples the image to specified horizontal and vertical resolution.\n\ngm\n(\nimg.png\n).\nresample\n(\nhorizontal\n,\n \nvertical\n)\n\n\nresize\nResize the image.\noptions\n%, @, !, \n or \n see the GraphicsMagick docs for details\ngm(\"img.png\").resize(width [, height [, options]])\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40)\nTo resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50)\nTo resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50)\nTo override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\")\nroll\nRolls an image vertically or horizontally.\n\ngm\n(\nimg.png\n).\nroll\n(\nhorizontalInt\n,\n \nverticalInt\n)\n\n\nrotate\nRotates the image by degrees and fills the background with color.\n\ngm\n(\nimg.png\n).\nrotate\n(\ncolor\n,\n \ndegrees\n)\n\n\nS\n\n\nscene\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nscene\n(\nvalue\n)\n\n\nscenes\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nscenes\n(\nstart\n,\n \nend\n)\n\n\nscale\nScales the image.\n\ngm\n(\nimg.png\n).\nscale\n(\nwidth\n,\n \nheight\n)\n\n\nscreen\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nscreen\n()\n\n\n\n\nsegment\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsegment\n(\nclusterThreshold\n,\n \nsmoothingThreshold\n)\n\n\n\n\nselectFrame\nHelpful if we process a large .gif so we don't load in memory each frame.\ngm\n(\nimg.png\n).\nselectFrame\n(\n0\n)\n\n\n\n\nsepia\nA convenience method to apply a sepia effect to the image.\ngm\n(\nimg.png\n).\nsepia\n()\n\n\n\n\nset\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nset\n(\nattribute\n,\n \nvalue\n)\n\n\n\n\nsetFormat\nOverriddes the output image format.\nHelpful if we are outputting an image with no extention but need to change formats.\ngm\n(\nimg.png\n).\nsetFormat\n(\nformat\n)\n\n\n\n\nshade\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshade\n(\nazimuth\n,\n \nelevation\n)\n\n\n\n\nshadow\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshadow\n(\nradius\n,\n \nsigma\n)\n\n\n\n\nsharedMemory\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsharedMemory\n()\n\n\n\n\nshave\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshave\n(\nwidth\n,\n \nheight\n,\n \npercent\n)\n\n\n\n\nsharpen\nSharpens the image.\ngm\n(\nimg.png\n).\nsharpen\n(\nradius\n \n[,\n \nsigma\n])\n\n\n\n\nshear\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshear\n(\nxDegrees\n,\n \nyDegrees\n)\n\n\n\n\nsilent\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsilent\n()\n\n\n\n\nsnaps\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsnaps\n(\nvalue\n)\n\n\n\n\nsolarize\nNegates all pixels above threshold percent.\ngm\n(\nimg.png\n).\nsolarize\n(\nthreshold\n)\n\n\n\n\nspread\nDesplaces pixels by a random amount.\ngm\n(\nimg.png\n).\nspread\n(\namount\n)\n\n\n\n\nstegano\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nstegano\n(\noffset\n)\n\n\n\n\nstereo\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nstereo\n()\n\n\n\n\nstrip\nStrips the image of any profiles or comments.\nSimilar to noProfile() but removes both profile and comment data. only works with imageMagick.\ngm\n(\nimg.png\n).\nstrip\n()\n\n\n\n\nswirl\nSwirls pixels arount the center of the image. degrees specifies the tightness of the swirl.\ngm\n(\nimg.png\n).\nswirl\n(\ndegrees\n)\n\n\n\n\nT\n\n\ntextFont\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntextFont\n(\nfont\n)\n\n\n\n\ntexture\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntexture\n(\nfont\n)\n\n\n\n\nthreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nthreshold\n(\nvalue\n \n[,\n \npercent\n])\n\n\n\n\nthumb\nCreates a thumbnail based on minimum sizes.\nwidth\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\"img.png\").thumb(width, height, outName, quality, callback)\ntile\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntile\n(\nfilename\n)\n\n\n\n\ntitle\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntitle\n(\nstring\n)\n\n\n\n\ntransform\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntransform\n(\ncolor\n)\n\n\n\n\ntransparent\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntransparent\n(\ncolor\n)\n\n\n\n\ntreeDepth\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntreeDepth\n(\ncolor\n)\n\n\n\n\ntrim\nTrim an image by removing any edges that are exactly the same color as the corner pixels.\ngm\n(\nimg.png\n).\ntrim\n()\n\n\n\n\ntype\nSpecifies the image type.\ntype\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\"img.png\").type(type)\nU\n\n\nupdate\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nupdate\n(\nseconds\n)\n\n\n\n\nunits\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nunits\n(\ntype\n)\n\n\n\n\nunsharp\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nunsharp\n(\nradius\n \n[,\n \nsigma\n,\n \namount\n,\n \nthreshold\n])\n\n\n\n\nusePixmap\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nusePixmap\n()\n\n\n\n\nV\n\n\nview\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nview\n()\n\n\n\n\nvirtualPixel\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nvirtualPixel\n(\nmethod\n)\n\n\n\n\nvisual\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nvisual\n(\ntype\n)\n\n\n\n\nW\n\n\nwatermark\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwatermark\n(\nbrightness\n,\n \nsaturation\n)\n\n\nwave\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwave\n(\namplitude\n,\n \nwavelength\n)\n\n\nwhitePoint\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwhitePoint\n(\nx\n,\n \ny\n)\n\n\nwhiteThreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwhiteThreshold\n(\nred\n,\n \ngreen\n,\n \nblue\n,\n \nopacity\n)\n\n\nwindow\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwindow\n(\nid\n)\n\n\nwindowGroup\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwindowGroup\n()", 
            "title": "\u5904\u7406"
        }, 
        {
            "location": "/Manipulation/#_1", 
            "text": "", 
            "title": "\u64cd\u4f5c"
        }, 
        {
            "location": "/Manipulation/#a", 
            "text": "adjoin gm ( img.png ). adjoin ()   affine gm ( img.png ). affine ( matrix )   antialias \u6240\u6709\u56fe\u7247\u9ed8\u8ba4\u662f anti-aliased by GraphicsMagick. To disable it pass false. gm ( img.png ). antialias ( false )  append - \u9644\u52a0\u4e00\u7ec4\u56fe\u50cf \u53c2\u6570 img \u53e6\u4e00\u5f20\u56fe\u7247\u5730\u5740 ltr (\u53ef\u9009) Boolean - \u6307\u5b9a\u9644\u52a0\u4f4d\u7f6e true \u662f left-to-right \u5de6\u5230\u53f3 false \u662f top-to-bottom (\u9ed8\u8ba4\u4e0a\u5230\u4e0b)    gm ( img.png ). append ( img   [,   img ,   ltr ]) \n\n   // appends another.jpg to img.png from left-to-right \n   gm ( img.png ). append ( another.jpg ). append ( true ) \n\n   // appends another.jpg to img.png from left-to-right \n   gm ( img.png ). append ( another.jpg ,   true ) \n\n   // appends another.jpg to img.png from top-to-bottom \n   gm ( img.png ). append ( another.jpg ) \n\n   // appends third.gif below another.jpg below img.png \n   gm ( img.png ). append ( another.jpg ). append ( third.gif ) \n\n   // appends third.gif below another.jpg below img.png \n   gm ( img.png ). append ( another.jpg ,   third.gif ) \n\n   // appends third.gif to the right of another.jpg to the right to img.png \n   gm ( img.png ). append ( another.jpg ,   third.gif ,   true )   authenticate    gm ( img.png ). authenticate ( password )   autoOrient Auto-orients the image according to its EXIF data.\nGraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.    gm ( img.jpg ). autoOrient ()   average gm ( img.png ). average ()", 
            "title": "A"
        }, 
        {
            "location": "/Manipulation/#b", 
            "text": "backdrop gm ( img.png ). backdrop ()   bitdepth Specifies the number of bits of color to preserve in the image. See the docs for more detail. gm ( img.png ). bitdepth ( bits )  blackThreshold pixels below  threshold  become black. gm ( img.png ). blackThreshold ( red   [, green ]   [, blue ]   [, opacity ])  bluePrimary gm ( img.png ). bluePrimary ( x ,   x )   blur Accepts a radius and optional sigma (standard deviation). gm ( img.png ). blur ( radius   [,   sigma ])  border gm ( img.png ). border ( width ,   height )   borderColor gm ( img.png ). borderColor ( color )   box gm ( img.png ). box ( color )", 
            "title": "B"
        }, 
        {
            "location": "/Manipulation/#c", 
            "text": "channel type\n  Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray gm ( img.png ). channel ( type )  charcoal Simulates a charcoal drawing. Accepts a factor. gm ( img.png ). charcoal ( factor )  chop Removes pixels from the interior of an image. gm ( img.png ). chop ( width ,   height ,   x ,   y )  clip gm ( img.png ). clip ()   coalesce gm ( img.png ). coalesce ()   colorize Colorize the image with optionally separate red, green, and blue values. gm ( img.png ). colorize ( red   [,   green   [,   blue ]])  colorMap type\n  shared or private gm ( img.png ). colorMap ( type )  colors Sets the preferred number of colors for the image (color reduction). gm ( img.png ). colors ( int )  colorspace Specifies the type of colorspace. See the GraphicsMagick docs for val details. gm ( img.png ). colorspace ( val )  compose gm ( img.png ). compose ( operator )   compress type\nNone, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA gm ( img.png ). compress ( type )  comment Annotates an image. See the docs for more info. gm ( img.png ). comment ( text | format )  contrast Increases or reduces the image contrast. Accepts a multiplier. gm ( img.png ). contrast ([ +- ] multiplier )  convolve gm ( img.png ). convolve ( kernel )   createDirectories gm ( img.png ). createDirectories ()   crop Crops the image to the given width and height at the given x and y position. gm ( img.png ). crop ( width ,   height ,   x ,   y )  cycle Displace the image colormap by amount. amount is the number of positions each colormap entry is shifted. gm ( img.png ). cycle ( amount )", 
            "title": "C"
        }, 
        {
            "location": "/Manipulation/#d", 
            "text": "deconstruct gm ( img.png ). deconstruct ()   define gm ( img.png ). define ()   delay amount  is in hundreths of a second. gm ( img.png ). delay ( amout )  density This option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image. gm ( img.png ). density ( width ,   height )  despeckle Reduces the speckles within the image. gm ( img.png ). despeckle ()  displace Shift image pixels as defined by a displacement map. gm ( img.png ). displace ( horizontal ,   vertical )  display gm ( img.png ). display ( value )   dispose gm ( img.png ). dispose ( method )   dissolve gm ( img.png ). dissolve ( method )   dither Applies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\nNote: either .colors() or .monochrome() must be used for this to take effect. gm ( img.png ). dither ([ bool ])", 
            "title": "D"
        }, 
        {
            "location": "/Manipulation/#e", 
            "text": "edge Emphasizes edges in an image. Takes an optional radius of the emphasis to apply. gm ( img.png ). edge ([ radius ])  emboss Embosses the image. Takes an optional radius. gm ( img.png ). emboss ([ radius ])  encoding type\nAdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\ngm(\"img.png\").encoding(type)\n``` endian type\nMSB, LSB, or Native gm ( img.png ). endian ( type )  enhance Enhances the image. gm ( img.png ). enhance ()  equalize Performs histogram equalization to the image. gm ( img.png ). equalize ()  extent composite image on background color canvas image. gm ( img.png ). extent ([ width ,   height ,   options ])", 
            "title": "E"
        }, 
        {
            "location": "/Manipulation/#f", 
            "text": "file gm ( img.png ). file ( filename )   filter Specifies the filter to use when resizing. see link for available types. gm ( img.png ). filter ( type )  flatten gm ( img.png ). flatten ()   flip Creates a mirror image (vertically). gm ( img.png ). flip ()  flop Creates a mirror image (horizontally). gm ( img.png ). flop ()  foreground gm ( img.png ). foreground ( color )   frame gm ( img.png ). frame ( width ,   height ,   outerBevelWidth ,   innerBevelWidth )   fuzz gm ( img.png ). fuzz ( distance   [, percent ])", 
            "title": "F"
        }, 
        {
            "location": "/Manipulation/#g", 
            "text": "gamma Adjusts the level of gamma correction. gm ( img.png ). gamma ( r ,   g ,   b )  gaussian gm ( img.png ). gaussian ( radius   [, sigma ])   geometry gm ( img.png ). geometry ( width ,   height   [, arg ])   greenPrimary gm ( img.png ). greenPrimary ( x ,   y )   gravity The direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\ndirection\nNorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast gm ( img.png ). gravity ( direction )", 
            "title": "G"
        }, 
        {
            "location": "/Manipulation/#h", 
            "text": "highlightColor gm ( img.png ). highlightColor ( color )   highlightStyle gm ( img.png ). highlightStyle ( color )", 
            "title": "H"
        }, 
        {
            "location": "/Manipulation/#i", 
            "text": "iconGeometry gm ( img.png ). iconGeometry ( geometry )   implode Implodes the image pixels around the center. Takes an optional factor. gm ( img.png ). implode ([ factor ])  intent type\nAbsolute, Perceptual, Relative, or Saturation gm ( img.png ). intent ( type )  interlace Specifies the type of interlacing scheme. Defaults to None. type\nNone|Line|Plane|Partition gm ( img.png ). interlace ( type )", 
            "title": "I"
        }, 
        {
            "location": "/Manipulation/#l", 
            "text": "label Assigns a label to an image. gm ( img.png ). label ( name )  lat gm ( img.png ). lat ( width ,   height ,   offset   [, percent ])   level gm ( img.png ). level ( blackPoint ,   gamma ,   whitePoint   [, percent ])   limit Sets resource limits. type\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs gm ( img.png ). limit ( type ,   val )  list type\nColor, Delegate, Format, Magic, Module, Resource, or Type    gm ( img.png ). list ( type )  log Specify format for debug log. \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). log ( format )  loop \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). loop ( iterations )  lower Creates a pseudo 3D lowering effect of the images edges. gm ( img.png ). lower ( width ,   height )", 
            "title": "L"
        }, 
        {
            "location": "/Manipulation/#m", 
            "text": "magnify Magnifies the image factor times. gm ( img.png ). magnify ( factor )  map \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). map ( filename )  mask \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mask ( filename )  matte \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). matte ()  matteColor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). matteColor ( color )  maximumError \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). maximumError ( limit )  median Applies a median filter to the image. The optional param radius adjusts the weight of the effect. gm ( img.png ). median ([ radius ])  minify Minifies the image factor times. gm ( img.png ). minify ( factor )  mode \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mode ( value )  modulate Varies the brightness, saturation, and hue of the image. gm ( img.png ). modulate ( b   [,   s   [,   h ]])  monitor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). monitor ()  monochrome Transforms the image to black and white. gm ( img.png ). monochrome ()  morph Morphs two images together. otherImg the path to another img outName the path where the image will be saved callback A function to be executed when morphing is complete. callback will be passed the standard args that .write() receives. gm ( img.png ). morph ( otherImg ,   outName ,   callback )  mosaic \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mosaic ()  motionBlur \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). motionBlur ( radius   [,   sigma ,   angle ])", 
            "title": "M"
        }, 
        {
            "location": "/Manipulation/#n", 
            "text": "name \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). name ()  negative Replaces every pixel with its complementary color. gm ( img.png ). negative ()  noise Add or reduce noise in the image.\nadius|type\nTo add noise pass one of the following:\nuniform\ngaussian\nmultiplicative\nimpulse\nlaplacian\npoisson\nOtherwise the argument will be interpreted as a radius which adjusts the weight of the effect. gm ( img.png ). noise ( radius | type )  noop \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). noop ()  normalize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). normalize ()", 
            "title": "N"
        }, 
        {
            "location": "/Manipulation/#o", 
            "text": "opaque \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). opaque ( color )  operator \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). operator ( channel ,   operator ,   rvalue   [, percent ])  orderedDither \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). orderedDither ( channelType ,   NxN )  outputDirectory \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). outputDirectory ( channelType ,   NxN )", 
            "title": "O"
        }, 
        {
            "location": "/Manipulation/#p", 
            "text": "page \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). page ( width ,   height   [, arg ])  pause \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pause ( seconds )  pen \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pen ( color )  ping \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). ping ()  pointSize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pointSize ( value )  noProfile Removes EXIF, ICM, etc profile data. gm ( img.png ). noProfile ()  preview type\nSee the docs for valid types. gm ( img.png ). preview ( type )  paint Simulates an oil painting. gm ( img.png ). paint ( radius )  process \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). process ( command )  profile \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). profile ( filename )  progress \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). progress ()  randomThreshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). randomThreshold ( channelType ,   LOWxHIGH )", 
            "title": "P"
        }, 
        {
            "location": "/Manipulation/#q", 
            "text": "quality Adjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best). gm ( img.png ). quality ( val )", 
            "title": "Q"
        }, 
        {
            "location": "/Manipulation/#r", 
            "text": "raise Creates a pseudo 3D raising effect of the images edges. gm ( img.png ). raise ( width ,   height )  recolor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). recolor ( matrix )  redPrimary \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). redPrimary ( x ,   y )  region Specifies that all following methods only apply to the area specified by width, height, x, y. gm ( img.png ). region ( width ,   height ,   x ,   y ). sepia ()  \nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y. remote \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). remote ()  render \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). render ()  repage \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). repage ( width ,   height ,   xoff ,   yoff ,   arg )", 
            "title": "R"
        }, 
        {
            "location": "/Manipulation/#s", 
            "text": "sample \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). sample ( geometry )  samplingFactor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). samplingFactor ( horizontalFactor ,   verticalFactor )  rawSize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). rawSize ( width ,   height ,   offset )  resample Resamples the image to specified horizontal and vertical resolution. gm ( img.png ). resample ( horizontal ,   vertical )  resize Resize the image. options\n%, @, !,   or   see the GraphicsMagick docs for details\ngm(\"img.png\").resize(width [, height [, options]])\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40) To resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50) To resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50) To override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\") roll Rolls an image vertically or horizontally. gm ( img.png ). roll ( horizontalInt ,   verticalInt )  rotate Rotates the image by degrees and fills the background with color. gm ( img.png ). rotate ( color ,   degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#s_1", 
            "text": "scene \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). scene ( value )  scenes \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). scenes ( start ,   end )  scale Scales the image. gm ( img.png ). scale ( width ,   height )  screen \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). screen ()   segment \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). segment ( clusterThreshold ,   smoothingThreshold )   selectFrame Helpful if we process a large .gif so we don't load in memory each frame. gm ( img.png ). selectFrame ( 0 )   sepia A convenience method to apply a sepia effect to the image. gm ( img.png ). sepia ()   set \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). set ( attribute ,   value )   setFormat Overriddes the output image format. Helpful if we are outputting an image with no extention but need to change formats. gm ( img.png ). setFormat ( format )   shade \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shade ( azimuth ,   elevation )   shadow \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shadow ( radius ,   sigma )   sharedMemory \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). sharedMemory ()   shave \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shave ( width ,   height ,   percent )   sharpen Sharpens the image. gm ( img.png ). sharpen ( radius   [,   sigma ])   shear \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shear ( xDegrees ,   yDegrees )   silent \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). silent ()   snaps \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). snaps ( value )   solarize Negates all pixels above threshold percent. gm ( img.png ). solarize ( threshold )   spread Desplaces pixels by a random amount. gm ( img.png ). spread ( amount )   stegano \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). stegano ( offset )   stereo \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). stereo ()   strip Strips the image of any profiles or comments. Similar to noProfile() but removes both profile and comment data. only works with imageMagick. gm ( img.png ). strip ()   swirl Swirls pixels arount the center of the image. degrees specifies the tightness of the swirl. gm ( img.png ). swirl ( degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#t", 
            "text": "textFont \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). textFont ( font )   texture \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). texture ( font )   threshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). threshold ( value   [,   percent ])   thumb Creates a thumbnail based on minimum sizes. width\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\"img.png\").thumb(width, height, outName, quality, callback) tile \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). tile ( filename )   title \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). title ( string )   transform \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). transform ( color )   transparent \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). transparent ( color )   treeDepth \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). treeDepth ( color )   trim Trim an image by removing any edges that are exactly the same color as the corner pixels. gm ( img.png ). trim ()   type Specifies the image type. type\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\"img.png\").type(type)", 
            "title": "T"
        }, 
        {
            "location": "/Manipulation/#u", 
            "text": "update \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). update ( seconds )   units \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). units ( type )   unsharp \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). unsharp ( radius   [,   sigma ,   amount ,   threshold ])   usePixmap \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). usePixmap ()", 
            "title": "U"
        }, 
        {
            "location": "/Manipulation/#v", 
            "text": "view \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). view ()   virtualPixel \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). virtualPixel ( method )   visual \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). visual ( type )", 
            "title": "V"
        }, 
        {
            "location": "/Manipulation/#w", 
            "text": "watermark \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). watermark ( brightness ,   saturation )  wave \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). wave ( amplitude ,   wavelength )  whitePoint \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). whitePoint ( x ,   y )  whiteThreshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). whiteThreshold ( red ,   green ,   blue ,   opacity )  window \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). window ( id )  windowGroup \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). windowGroup ()", 
            "title": "W"
        }, 
        {
            "location": "/Getters/", 
            "text": "\u83b7\u53d6\u5668\n\n\nAll getters have the same signature:\n\n\ngm\n(\nimage.png\n).\nsize\n(\nfunction\n(\nerr\n,\n \nvalue\n){\n\n  \n// note : value may be undefined\n\n\n})\n\n\n\n\n\n\n\nsize - returns the size (WxH) of the image\n\n\nformat - returns the image format (gif, jpeg, png, etc)\n\n\ndepth - returns the image color depth\n\n\ncolor - returns the number of colors\n\n\nres - returns the image resolution\n\n\nfilesize - returns image filesize\n\n\nidentify - returns all image data available\n\n\norientation - returns the EXIF orientation of the image", 
            "title": "\u83b7\u5f97\u8005"
        }, 
        {
            "location": "/Getters/#_1", 
            "text": "All getters have the same signature:  gm ( image.png ). size ( function ( err ,   value ){ \n   // note : value may be undefined  })    size - returns the size (WxH) of the image  format - returns the image format (gif, jpeg, png, etc)  depth - returns the image color depth  color - returns the number of colors  res - returns the image resolution  filesize - returns image filesize  identify - returns all image data available  orientation - returns the EXIF orientation of the image", 
            "title": "\u83b7\u53d6\u5668"
        }, 
        {
            "location": "/Drawing/", 
            "text": "\u57fa\u672c\u7ed8\u56fe\n\n\nTake a look at drawing.js for examples.\n\n\n\n\ndraw\n\n\nAnnotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods.\n\ngm\n(\nimg.png\n).\ndraw\n(\nargs\n)\n\n\n\n\n\n\n\n\ndrawArc\n\n\nInscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation.\n\ngm\n(\nimg.png\n).\ndrawArc\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n,\n \nr0\n,\n \nr1\n)\n\n\n\n\n\n\n\n\ndrawBezier\n\n\nDraw a Bezier curve.\n\ngm\n(\nimg.png\n).\ndrawBezier\n([\nx0\n,\n \ny0\n],\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\n\n\n\ndrawCircle\n\n\nDraws a Circle.\n\ngm\n(\nimg.png\n).\ndrawCircle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\n\n\n\ndrawEllipse\n\n\nDraws an Ellipse.\n\ngm\n(\nimg.png\n).\ndrawEllipse\n(\nx0\n,\n \ny0\n,\n \nr0\n,\n \nry\n,\n \nr0\n,\n \nr1\n)\n\n\n\n\n\n\n\n\ndrawLine\n\n\nDraws a Line.\n\ngm\n(\nimg.png\n).\ndrawLine\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\n\n\n\ndrawPoint\n\n\nDraws a Point.\n\ngm\n(\nimg.png\n).\ndrawPoint\n(\nx\n,\n \ny\n)\n\n\n\n\n\n\n\n\ndrawPolygon\n\n\nDraws a Polygon.\n\ngm\n(\nimg.png\n).\ndrawPolygon\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\n\n\n\ndrawPolyline\n\n\nDraws a Polyline.\n\ngm\n(\nimg.png\n).\ndrawPolyline\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\n\n\n\ndrawRectangle\n\n\nDraws a Rectangle. wc and hc are optional and add roundness to the corners.\n\ngm\n(\nimg.png\n).\ndrawRectangle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n \n[,\n \nwc\n,\n \nhc\n])\n\n\n\n\n\n\n\n\ndrawText\n\n\nDraws text on an image at x/y coordinates.\n\ngm\n(\nimg.png\n).\ndrawText\n(\nx\n,\n \ny\n,\n \ntext\n \n[,\n \ngravity\n])\n\n\n\n\n\n\n\n\nfill\n\n\nSpecifies the color to use when filling a drawn shape.\n\ngm\n(\nimg.png\n).\nfill\n(\ncolor\n)\n\n\n\n\n\n\n\n\nfont\n\n\nSpecifies the font to use when you drawText.\n\ngm\n(\nimg.png\n).\nfont\n(\nname\n)\n\n\n\n\n\n\n\n\nfontSize\n\n\nSpecifies the font size to use when you drawText.\n\ngm\n(\nimg.png\n).\nfontSize\n(\nsize\n)\n\n\n\n\n\n\n\n\nstroke\n\n\nSpecifies the color to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstroke\n(\ncolor\n \n[,\n \nwidth\n])\n\n\n\n\n\n\n\n\nstrokeWidth\n\n\nSpecifies the stroke width to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstrokeWidth\n(\nwidth\n)\n\n\n\n\n\n\n\n\nsetDraw\n\n\nSets drawing properties. property can be either \"color\" or \"matte\".\n\ngm\n(\nimg.png\n).\nsetDraw\n(\nproperty\n,\n \nx\n,\n \ny\n,\n \nmethod\n)", 
            "title": "\u7ed8\u753b"
        }, 
        {
            "location": "/Drawing/#_1", 
            "text": "Take a look at drawing.js for examples.   draw  Annotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods. gm ( img.png ). draw ( args )     drawArc  Inscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation. gm ( img.png ). drawArc ( x0 ,   y0 ,   x1 ,   y1 ,   r0 ,   r1 )     drawBezier  Draw a Bezier curve. gm ( img.png ). drawBezier ([ x0 ,   y0 ],   ...   [ xn ,   yn ])     drawCircle  Draws a Circle. gm ( img.png ). drawCircle ( x0 ,   y0 ,   x1 ,   y1 )     drawEllipse  Draws an Ellipse. gm ( img.png ). drawEllipse ( x0 ,   y0 ,   r0 ,   ry ,   r0 ,   r1 )     drawLine  Draws a Line. gm ( img.png ). drawLine ( x0 ,   y0 ,   x1 ,   y1 )     drawPoint  Draws a Point. gm ( img.png ). drawPoint ( x ,   y )     drawPolygon  Draws a Polygon. gm ( img.png ). drawPolygon ([ x0 ,   y0 ]   ...   [ xn ,   yn ])     drawPolyline  Draws a Polyline. gm ( img.png ). drawPolyline ([ x0 ,   y0 ]   ...   [ xn ,   yn ])     drawRectangle  Draws a Rectangle. wc and hc are optional and add roundness to the corners. gm ( img.png ). drawRectangle ( x0 ,   y0 ,   x1 ,   y1   [,   wc ,   hc ])     drawText  Draws text on an image at x/y coordinates. gm ( img.png ). drawText ( x ,   y ,   text   [,   gravity ])     fill  Specifies the color to use when filling a drawn shape. gm ( img.png ). fill ( color )     font  Specifies the font to use when you drawText. gm ( img.png ). font ( name )     fontSize  Specifies the font size to use when you drawText. gm ( img.png ). fontSize ( size )     stroke  Specifies the color to use when stroking a drawn shape. gm ( img.png ). stroke ( color   [,   width ])     strokeWidth  Specifies the stroke width to use when stroking a drawn shape. gm ( img.png ). strokeWidth ( width )     setDraw  Sets drawing properties. property can be either \"color\" or \"matte\". gm ( img.png ). setDraw ( property ,   x ,   y ,   method )", 
            "title": "\u57fa\u672c\u7ed8\u56fe"
        }, 
        {
            "location": "/ImageComparisons/", 
            "text": "\u56fe\u50cf\u6bd4\u8f83\n\n\nBoth GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().\n\n\nCurrently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.\n\n\nYour callback will be passed four arguments:\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n  \nconsole\n.\nlog\n(\nThe images are equal: %s\n,\n \nisEqual\n);\n\n  \nconsole\n.\nlog\n(\nActual equality: %d\n,\n \nequality\n)\n\n  \nconsole\n.\nlog\n(\nRaw output was: %j\n,\n \nraw\n);\n\n\n});\n\n\n\n\n\nYou can also output a diff image of the two images by passing a configuration object in place of the tolerance:\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nhighlightColor\n:\n \nyellow\n,\n \n// optional. Defaults to red\n\n  \nfile\n:\n \n./diff.png\n \n// required\n\n\n};\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \noptions\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n\n});", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/ImageComparisons/#_1", 
            "text": "Both GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().  Currently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.  Your callback will be passed four arguments:  gm . compare ( path1 ,   path2 ,   function   ( err ,   isEqual ,   equality ,   raw )   { \n   if   ( err )   throw   err ; \n   console . log ( The images are equal: %s ,   isEqual ); \n   console . log ( Actual equality: %d ,   equality ) \n   console . log ( Raw output was: %j ,   raw );  });   You can also output a diff image of the two images by passing a configuration object in place of the tolerance:  var   options   =   { \n   highlightColor :   yellow ,   // optional. Defaults to red \n   file :   ./diff.png   // required  };  gm . compare ( path1 ,   path2 ,   options ,   function   ( err )   { \n   if   ( err )   throw   err ;  });", 
            "title": "\u56fe\u50cf\u6bd4\u8f83"
        }, 
        {
            "location": "/UsingImagemagick/", 
            "text": "\u4f7f\u7528 IMAGEMAGICK\n\n\nWe have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.\n\n\nvar\n \nimageMagick\n \n=\n \ngm\n.\nsubClass\n({\n \nimageMagick\n:\n \ntrue\n \n});\n\n\n\n\n\nimageMagick\n(\nimg.png\n).\nautoOrient\n().\nwrite\n(\n/path\n,\n \ncallback\n);\n\n\n\n\n\nIMAGEMAGICK OPTIONS\n\n\nUnlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:\n\n\nbrew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528"
        }, 
        {
            "location": "/UsingImagemagick/#imagemagick", 
            "text": "We have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.  var   imageMagick   =   gm . subClass ({   imageMagick :   true   });   imageMagick ( img.png ). autoOrient (). write ( /path ,   callback );   IMAGEMAGICK OPTIONS  Unlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:  brew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528 IMAGEMAGICK"
        }
    ]
}