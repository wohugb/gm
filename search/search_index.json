{
    "docs": [
        {
            "location": "/", 
            "text": "gm\n \n  \n\n\nGraphicsMagick \u548c ImageMagick \u4e3a node\n\n\n\u5165\u95e8\u6307\u5357\n\n\n\u9996\u5148\u9700\u8981\u4e0b\u8f7d\u5b89\u88c5 \nGraphicsMagick\n \u6216\u8005 \nImageMagick\n. \u5728 Mac OS X \u91cc, \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4f7f\u7528 \nHomebrew\n \u6765\u5b89\u88c5:\n\n\nbrew install imagemagick\nbrew install graphicsmagick\n\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u8981ImageMagick\u652f\u6301WebP, \u4f60\u5fc5\u987b\u6dfb\u52a0 WebP \u9009\u9879:\n\n\nbrew install imagemagick --with-webp\n\n\n\n\n\n\u6216\u8005\u4f7f\u7528 npm:\n\n\nnpm install gm\n\n\n\n\n\n\u6216\u8005\u514b\u9686 repo:\n\n\ngit clone git://github.com/aheckmann/gm.git\n\n\n\n\n\n\u6784\u9020\u51fd\u6570\n\n\n\u6709\u5f88\u591a\u65b9\u6cd5\u4f7f\u7528 \ngm\n \u56fe\u50cf\u6784\u9020\u51fd\u6570.\n\n\n\n\ngm(path)\n When you pass a string as the first argument it is interpreted as the path to an image you intend to manipulate.\n\n\ngm(stream || buffer, [filename])\n You may also pass a ReadableStream or Buffer as the first argument, with an optional file name for format inference.\n\n\ngm(width, height, [color])\n When you pass two integer arguments, gm will create a new image on the fly with the provided dimensions and an optional background color. And you can still chain just like you do with pre-existing images too. See \nhere\n for an example.\n\n\n\n\nThe links below refer to an older version of gm but everything should still work, if anyone feels like updating them please make a PR\n\n\n\u65b9\u6cd5\n\n\n\u83b7\u53d6\u5668 - getters\nsize\n - returns the size (WxH) of the image\norientation\n - returns the EXIF orientation of the image\nformat\n - returns the image format (gif, jpeg, png, etc)\ndepth\n - returns the image color depth\ncolor\n - returns the number of colors\nres\n   - returns the image resolution\nfilesize\n - returns image filesize\nidentify\n - returns all image data available. Takes an optional format string.\n\u64cd\u4f5c - manipulation\nadjoin\naffine\nantialias\nappend\nauthenticate\nautoOrient\naverage\nbackdrop\nbitdepth\nblackThreshold\nbluePrimary\nblur\nborder\nborderColor\nbox\nchannel\ncharcoal\nchop\nclip\ncoalesce\ncolors\ncolorize\ncolorMap\ncolorspace\ncomment\ncompose\ncompress\ncontrast\nconvolve\ncreateDirectories\ncrop\ncycle\ndeconstruct\ndelay\ndefine\ndensity\ndespeckle\ndither\ndisplace\ndisplay\ndispose\ndissolve\nedge\nemboss\nencoding\nenhance\nendian\nequalize\nextent\nfile\nfilter\nflatten\nflip\nflop\nforeground\nframe\nfuzz\ngamma\ngaussian\ngeometry\ngravity\ngreenPrimary\nhighlightColor\nhighlightStyle\niconGeometry\nimplode\nintent\ninterlace\nlabel\nlat\nlevel\nlist\nlimit\nlog\nloop\nlower\nmagnify\nmap\nmatte\nmatteColor\nmask\nmaximumError\nmedian\nminify\nmode\nmodulate\nmonitor\nmonochrome\nmorph\nmosaic\nmotionBlur\nname\nnegative\nnoise\nnoop\nnormalize\nnoProfile\nopaque\noperator\norderedDither\noutputDirectory\npaint\npage\npause\npen\nping\npointSize\npreview\nprocess\nprofile\nprogress\nquality\nraise\nrawSize\nrandomThreshold\nrecolor\nredPrimary\nregion\nremote\nrender\nrepage\nresample\nresize\nroll\nrotate\nsample\nsamplingFactor\nscale\nscene\nscenes\nscreen\nsegment\nsepia\nset\nsetFormat\nshade\nshadow\nsharedMemory\nsharpen\nshave\nshear\nsilent\nsolarize\nsnaps\nstegano\nstereo\nstrip\n \nimagemagick only\nspread\nswirl\ntextFont\ntexture\nthreshold\nthumb\ntile\ntransform\ntransparent\ntreeDepth\ntrim\ntype\nupdate\nunits\nunsharp\nusePixmap\nview\nvirtualPixel\nvisual\nwatermark\nwave\nwhitePoint\nwhiteThreshold\nwindow\nwindowGroup\n\u7ed8\u753b\ndraw\ndrawArc\ndrawBezier\ndrawCircle\ndrawEllipse\ndrawLine\ndrawPoint\ndrawPolygon\ndrawPolyline\ndrawRectangle\ndrawText\nfill\nfont\nfontSize\nstroke\nstrokeWidth\nsetDraw\n\u56fe\u50cf\u8f93\u51fa\nwrite\n - writes the processed image data to the specified filename\nstream\n - provides a \nReadableStream\n with the processed image data\ntoBuffer\n - returns the image as a \nBuffer\n instead of a stream\n\u5e73\u53f0\u7684\u5dee\u5f02\n\n\nPlease document and refer to any \nplatform or ImageMagick/GraphicsMagick issues/differences here\n.\n\n\n\u4e3e\u4f8b\n\n\nCheck out the \nexamples\n directory to play around.\n  Also take a look at the \nextending gm\n\n  page to see how to customize gm to your own needs.\n\n\n\u9519\u8bef\u62a5\u544a\n\n\nWhen reporting bugs please include the version of graphicsmagick/imagemagick you're using (gm -version/convert -version) as well as the version of this module and copies of any images you're having problems with.\n\n\n\u8d21\u732e\n\n\ncontributors\n\n\n\u7075\u611f\n\n\nmagickal-node\n\n\n\u63d2\u4ef6\n\n\nwiki\n\n\n\u8bc1\u4e66\n\n\n(The MIT License)\n\n\nCopyright (c) 2010 \nAaron Heckmann\n\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/#gm", 
            "text": "GraphicsMagick \u548c ImageMagick \u4e3a node", 
            "title": "gm"
        }, 
        {
            "location": "/#_1", 
            "text": "\u9996\u5148\u9700\u8981\u4e0b\u8f7d\u5b89\u88c5  GraphicsMagick  \u6216\u8005  ImageMagick . \u5728 Mac OS X \u91cc, \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4f7f\u7528  Homebrew  \u6765\u5b89\u88c5:  brew install imagemagick\nbrew install graphicsmagick  \u5982\u679c\u4f60\u60f3\u8981ImageMagick\u652f\u6301WebP, \u4f60\u5fc5\u987b\u6dfb\u52a0 WebP \u9009\u9879:  brew install imagemagick --with-webp  \u6216\u8005\u4f7f\u7528 npm:  npm install gm  \u6216\u8005\u514b\u9686 repo:  git clone git://github.com/aheckmann/gm.git", 
            "title": "\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/#_2", 
            "text": "\u6709\u5f88\u591a\u65b9\u6cd5\u4f7f\u7528  gm  \u56fe\u50cf\u6784\u9020\u51fd\u6570.   gm(path)  When you pass a string as the first argument it is interpreted as the path to an image you intend to manipulate.  gm(stream || buffer, [filename])  You may also pass a ReadableStream or Buffer as the first argument, with an optional file name for format inference.  gm(width, height, [color])  When you pass two integer arguments, gm will create a new image on the fly with the provided dimensions and an optional background color. And you can still chain just like you do with pre-existing images too. See  here  for an example.   The links below refer to an older version of gm but everything should still work, if anyone feels like updating them please make a PR", 
            "title": "\u6784\u9020\u51fd\u6570"
        }, 
        {
            "location": "/#_3", 
            "text": "\u83b7\u53d6\u5668 - getters size  - returns the size (WxH) of the image orientation  - returns the EXIF orientation of the image format  - returns the image format (gif, jpeg, png, etc) depth  - returns the image color depth color  - returns the number of colors res    - returns the image resolution filesize  - returns image filesize identify  - returns all image data available. Takes an optional format string. \u64cd\u4f5c - manipulation adjoin affine antialias append authenticate autoOrient average backdrop bitdepth blackThreshold bluePrimary blur border borderColor box channel charcoal chop clip coalesce colors colorize colorMap colorspace comment compose compress contrast convolve createDirectories crop cycle deconstruct delay define density despeckle dither displace display dispose dissolve edge emboss encoding enhance endian equalize extent file filter flatten flip flop foreground frame fuzz gamma gaussian geometry gravity greenPrimary highlightColor highlightStyle iconGeometry implode intent interlace label lat level list limit log loop lower magnify map matte matteColor mask maximumError median minify mode modulate monitor monochrome morph mosaic motionBlur name negative noise noop normalize noProfile opaque operator orderedDither outputDirectory paint page pause pen ping pointSize preview process profile progress quality raise rawSize randomThreshold recolor redPrimary region remote render repage resample resize roll rotate sample samplingFactor scale scene scenes screen segment sepia set setFormat shade shadow sharedMemory sharpen shave shear silent solarize snaps stegano stereo strip   imagemagick only spread swirl textFont texture threshold thumb tile transform transparent treeDepth trim type update units unsharp usePixmap view virtualPixel visual watermark wave whitePoint whiteThreshold window windowGroup \u7ed8\u753b draw drawArc drawBezier drawCircle drawEllipse drawLine drawPoint drawPolygon drawPolyline drawRectangle drawText fill font fontSize stroke strokeWidth setDraw \u56fe\u50cf\u8f93\u51fa write  - writes the processed image data to the specified filename stream  - provides a  ReadableStream  with the processed image data toBuffer  - returns the image as a  Buffer  instead of a stream", 
            "title": "\u65b9\u6cd5"
        }, 
        {
            "location": "/#_4", 
            "text": "Please document and refer to any  platform or ImageMagick/GraphicsMagick issues/differences here .", 
            "title": "\u5e73\u53f0\u7684\u5dee\u5f02"
        }, 
        {
            "location": "/#_5", 
            "text": "Check out the  examples  directory to play around.\n  Also take a look at the  extending gm \n  page to see how to customize gm to your own needs.", 
            "title": "\u4e3e\u4f8b"
        }, 
        {
            "location": "/#_6", 
            "text": "When reporting bugs please include the version of graphicsmagick/imagemagick you're using (gm -version/convert -version) as well as the version of this module and copies of any images you're having problems with.", 
            "title": "\u9519\u8bef\u62a5\u544a"
        }, 
        {
            "location": "/#_7", 
            "text": "contributors", 
            "title": "\u8d21\u732e"
        }, 
        {
            "location": "/#_8", 
            "text": "magickal-node", 
            "title": "\u7075\u611f"
        }, 
        {
            "location": "/#_9", 
            "text": "wiki", 
            "title": "\u63d2\u4ef6"
        }, 
        {
            "location": "/#_10", 
            "text": "(The MIT License)  Copyright (c) 2010  Aaron Heckmann  Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:  The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "\u8bc1\u4e66"
        }, 
        {
            "location": "/BasicUsage/", 
            "text": "\u57fa\u7840\u7528\u6cd5\n\n\n// \u5f15\u5165\u7ec4\u4ef6\n\n\nvar\n \nfs\n \n=\n \nrequire\n(\nfs\n)\n\n  \n,\n \ngm\n \n=\n \nrequire\n(\ngm\n);\n\n\n\n\n\n\u8c03\u6574\u548c\u5220\u9664EXIF\u914d\u7f6e\u6587\u4ef6\u6570\u636e\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n240\n,\n \n240\n)\n\n\n.\nnoProfile\n()\n\n\n.\nwrite\n(\n/path/to/resize.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u5ffd\u7565\u7eb5\u6a2a\u6bd4\n// some files would not be resized appropriately\n\n\n// http://stackoverflow.com/questions/5870466/imagemagick-incorrect-dimensions\n\n\n// you have two options:\n\n\n// use the \n!\n flag to ignore aspect ratio\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n240\n,\n \n240\n,\n \n!\n)\n\n\n.\nwrite\n(\n/path/to/resize.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n// use the .resizeExact with only width and/or height arguments\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresizeExact\n(\n240\n,\n \n240\n)\n\n\n.\nwrite\n(\n/path/to/resize.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u83b7\u53d6\u56fe\u50cf\u7684\u5927\u5c0f\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nsize\n(\nfunction\n \n(\nerr\n,\n \nsize\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n\n    \nconsole\n.\nlog\n(\nsize\n.\nwidth\n \n \nsize\n.\nheight\n \n?\n \nwider\n \n:\n \ntaller than you\n);\n\n\n});\n\n\n\n\n\u8f93\u51fa\u6240\u6709\u53ef\u7528\u7684\u56fe\u50cf\u5c5e\u6027\ngm\n(\n/path/to/img.png\n)\n\n\n.\nidentify\n(\nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndata\n)\n\n\n});\n\n\n\n\n\u62c9\u51fa\u52a8\u753bGIF\u7684\u7b2c\u4e00\u5e27\uff0c\u5e76\u4fdd\u5b58\u4e3aPNG\ngm\n(\n/path/to/animated.gif[0]\n)\n\n\n.\nwrite\n(\n/path/to/firstframe.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nconsole\n.\nlog\n(\naaw, shucks\n);\n\n\n});\n\n\n\n\n\u81ea\u52a8\u5b9a\u4f4d\u56fe\u50cf\ngm\n(\n/path/to/img.jpg\n)\n\n\n.\nautoOrient\n()\n\n\n.\nwrite\n(\n/path/to/oriented.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \n...\n\n\n})\n\n\n\n\n\u75af\u72c2\u7684\u5c0f\u9547\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nflip\n()\n\n\n.\nmagnify\n()\n\n\n.\nrotate\n(\ngreen\n,\n \n45\n)\n\n\n.\nblur\n(\n7\n,\n \n3\n)\n\n\n.\ncrop\n(\n300\n,\n \n300\n,\n \n150\n,\n \n130\n)\n\n\n.\nedge\n(\n3\n)\n\n\n.\nwrite\n(\n/path/to/crazy.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ncrazytown has arrived\n);\n\n\n})\n\n\n\n\n\u6ce8\u91ca\u4e00\u4e2a\u56fe\u50cf\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nstroke\n(\n#ffffff\n)\n\n\n.\ndrawCircle\n(\n10\n,\n \n10\n,\n \n20\n,\n \n10\n)\n\n\n.\nfont\n(\nHelvetica.ttf\n,\n \n12\n)\n\n\n.\ndrawText\n(\n30\n,\n \n20\n,\n \nGMagick!\n)\n\n\n.\nwrite\n(\n/path/to/drawing.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u521b\u9020\u4e00\u4e2a\u5f62\u8c61\ngm\n(\n200\n,\n \n400\n,\n \n#ddff99f3\n)\n\n\n.\ndrawText\n(\n10\n,\n \n50\n,\n \nfrom scratch\n)\n\n\n.\nwrite\n(\n/path/to/brandNewImg.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \n// ...\n\n\n});", 
            "title": "\u57fa\u7840\u7528\u6cd5"
        }, 
        {
            "location": "/BasicUsage/#_1", 
            "text": "// \u5f15\u5165\u7ec4\u4ef6  var   fs   =   require ( fs ) \n   ,   gm   =   require ( gm );   \u8c03\u6574\u548c\u5220\u9664EXIF\u914d\u7f6e\u6587\u4ef6\u6570\u636e gm ( /path/to/my/img.jpg )  . resize ( 240 ,   240 )  . noProfile ()  . write ( /path/to/resize.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u5ffd\u7565\u7eb5\u6a2a\u6bd4 // some files would not be resized appropriately  // http://stackoverflow.com/questions/5870466/imagemagick-incorrect-dimensions  // you have two options:  // use the  !  flag to ignore aspect ratio  gm ( /path/to/my/img.jpg )  . resize ( 240 ,   240 ,   ! )  . write ( /path/to/resize.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });  // use the .resizeExact with only width and/or height arguments  gm ( /path/to/my/img.jpg )  . resizeExact ( 240 ,   240 )  . write ( /path/to/resize.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u83b7\u53d6\u56fe\u50cf\u7684\u5927\u5c0f gm ( /path/to/my/img.jpg )  . size ( function   ( err ,   size )   { \n   if   ( ! err ) \n     console . log ( size . width     size . height   ?   wider   :   taller than you );  });   \u8f93\u51fa\u6240\u6709\u53ef\u7528\u7684\u56fe\u50cf\u5c5e\u6027 gm ( /path/to/img.png )  . identify ( function   ( err ,   data )   { \n   if   ( ! err )   console . log ( data )  });   \u62c9\u51fa\u52a8\u753bGIF\u7684\u7b2c\u4e00\u5e27\uff0c\u5e76\u4fdd\u5b58\u4e3aPNG gm ( /path/to/animated.gif[0] )  . write ( /path/to/firstframe.png ,   function   ( err )   { \n   if   ( err )   console . log ( aaw, shucks );  });   \u81ea\u52a8\u5b9a\u4f4d\u56fe\u50cf gm ( /path/to/img.jpg )  . autoOrient ()  . write ( /path/to/oriented.jpg ,   function   ( err )   { \n   if   ( err )   ...  })   \u75af\u72c2\u7684\u5c0f\u9547 gm ( /path/to/my/img.jpg )  . flip ()  . magnify ()  . rotate ( green ,   45 )  . blur ( 7 ,   3 )  . crop ( 300 ,   300 ,   150 ,   130 )  . edge ( 3 )  . write ( /path/to/crazy.jpg ,   function   ( err )   { \n   if   ( ! err )   console . log ( crazytown has arrived );  })   \u6ce8\u91ca\u4e00\u4e2a\u56fe\u50cf gm ( /path/to/my/img.jpg )  . stroke ( #ffffff )  . drawCircle ( 10 ,   10 ,   20 ,   10 )  . font ( Helvetica.ttf ,   12 )  . drawText ( 30 ,   20 ,   GMagick! )  . write ( /path/to/drawing.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u521b\u9020\u4e00\u4e2a\u5f62\u8c61 gm ( 200 ,   400 ,   #ddff99f3 )  . drawText ( 10 ,   50 ,   from scratch )  . write ( /path/to/brandNewImg.jpg ,   function   ( err )   { \n   // ...  });", 
            "title": "\u57fa\u7840\u7528\u6cd5"
        }, 
        {
            "location": "/Streams/", 
            "text": "\u6d41\n\n\n\u8f93\u5165\u6d41\nvar\n \nreadStream\n \n=\n \nfs\n.\ncreateReadStream\n(\n/path/to/my/img.jpg\n);\n\n\ngm\n(\nreadStream\n,\n \nimg.jpg\n)\n\n\n.\nwrite\n(\n/path/to/reformat.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u8f93\u5165\u8fdc\u7a0b\u6d41\n// \n\n\n\nvar\n \nrequest\n \n=\n \nrequire\n(\nrequest\n);\n\n\nvar\n \nurl\n \n=\n \nwww.abc.com/pic.jpg\n\n\n\ngm\n(\nrequest\n(\nurl\n))\n\n\n.\nwrite\n(\n/path/to/reformat.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u8f93\u51fa\u53ef\u8bfb\u6d41\n// can also stream output to a ReadableStream\n\n\n// (can be piped to a local file or remote server)\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n200\n,\n \n200\n)\n\n\n.\nstream\n(\nfunction\n \n(\nerr\n,\n \nstdout\n,\n \nstderr\n)\n \n{\n\n  \nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/resized.jpg\n);\n\n  \nstdout\n.\npipe\n(\nwriteStream\n);\n\n\n});\n\n\n\n// without a callback, .stream() returns a stream\n\n\n// this is just a convenience wrapper for above.\n\n\nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/resized.jpg\n);\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n200\n,\n \n200\n)\n\n\n.\nstream\n()\n\n\n.\npipe\n(\nwriteStream\n);\n\n\n\n\n\u901a\u8fc7\u683c\u5f0f\u6216\u6587\u4ef6\u540dgm\u5c06\u63d0\u4f9b\u76f8\u5e94\u683c\u5f0f\u7684\u6570\u636e\n// pass a format or filename to stream() and\n\n\n// gm will provide image data in that format\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nstream\n(\npng\n,\n \nfunction\n \n(\nerr\n,\n \nstdout\n,\n \nstderr\n)\n \n{\n\n  \nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/reformatted.png\n);\n\n  \nstdout\n.\npipe\n(\nwriteStream\n);\n\n\n});\n\n\n\n// or without the callback\n\n\nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/reformatted.png\n);\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nstream\n(\npng\n)\n\n\n.\npipe\n(\nwriteStream\n);\n\n\n\n\ncombine the two for true streaming image processing\n// combine the two for true streaming image processing\n\n\nvar\n \nreadStream\n \n=\n \nfs\n.\ncreateReadStream\n(\n/path/to/my/img.jpg\n);\n\n\ngm\n(\nreadStream\n)\n\n\n.\nresize\n(\n200\n,\n \n200\n)\n\n\n.\nstream\n(\nfunction\n \n(\nerr\n,\n \nstdout\n,\n \nstderr\n)\n \n{\n\n  \nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/resized.jpg\n);\n\n  \nstdout\n.\npipe\n(\nwriteStream\n);\n\n\n});\n\n\n\n\nGOTCHA\n// GOTCHA:\n\n\n// when working with input streams and any \nidentify\n\n\n// operation (size, format, etc), you must pass \n{bufferStream: true}\n if\n\n\n// you also need to convert (write() or stream()) the image afterwards\n\n\n// NOTE: this buffers the readStream in memory!\n\n\nvar\n \nreadStream\n \n=\n \nfs\n.\ncreateReadStream\n(\n/path/to/my/img.jpg\n);\n\n\ngm\n(\nreadStream\n)\n\n\n.\nsize\n({\nbufferStream\n:\n \ntrue\n},\n \nfunction\n(\nerr\n,\n \nsize\n)\n \n{\n\n  \nthis\n.\nresize\n(\nsize\n.\nwidth\n \n/\n \n2\n,\n \nsize\n.\nheight\n \n/\n \n2\n)\n\n  \nthis\n.\nwrite\n(\n/path/to/resized.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n    \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n  \n});\n\n\n});", 
            "title": "\u6d41"
        }, 
        {
            "location": "/Streams/#_1", 
            "text": "\u8f93\u5165\u6d41 var   readStream   =   fs . createReadStream ( /path/to/my/img.jpg );  gm ( readStream ,   img.jpg )  . write ( /path/to/reformat.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u8f93\u5165\u8fdc\u7a0b\u6d41 //   var   request   =   require ( request );  var   url   =   www.abc.com/pic.jpg  gm ( request ( url ))  . write ( /path/to/reformat.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u8f93\u51fa\u53ef\u8bfb\u6d41 // can also stream output to a ReadableStream  // (can be piped to a local file or remote server)  gm ( /path/to/my/img.jpg )  . resize ( 200 ,   200 )  . stream ( function   ( err ,   stdout ,   stderr )   { \n   var   writeStream   =   fs . createWriteStream ( /path/to/my/resized.jpg ); \n   stdout . pipe ( writeStream );  });  // without a callback, .stream() returns a stream  // this is just a convenience wrapper for above.  var   writeStream   =   fs . createWriteStream ( /path/to/my/resized.jpg );  gm ( /path/to/my/img.jpg )  . resize ( 200 ,   200 )  . stream ()  . pipe ( writeStream );   \u901a\u8fc7\u683c\u5f0f\u6216\u6587\u4ef6\u540dgm\u5c06\u63d0\u4f9b\u76f8\u5e94\u683c\u5f0f\u7684\u6570\u636e // pass a format or filename to stream() and  // gm will provide image data in that format  gm ( /path/to/my/img.jpg )  . stream ( png ,   function   ( err ,   stdout ,   stderr )   { \n   var   writeStream   =   fs . createWriteStream ( /path/to/my/reformatted.png ); \n   stdout . pipe ( writeStream );  });  // or without the callback  var   writeStream   =   fs . createWriteStream ( /path/to/my/reformatted.png );  gm ( /path/to/my/img.jpg )  . stream ( png )  . pipe ( writeStream );   combine the two for true streaming image processing // combine the two for true streaming image processing  var   readStream   =   fs . createReadStream ( /path/to/my/img.jpg );  gm ( readStream )  . resize ( 200 ,   200 )  . stream ( function   ( err ,   stdout ,   stderr )   { \n   var   writeStream   =   fs . createWriteStream ( /path/to/my/resized.jpg ); \n   stdout . pipe ( writeStream );  });   GOTCHA // GOTCHA:  // when working with input streams and any  identify  // operation (size, format, etc), you must pass  {bufferStream: true}  if  // you also need to convert (write() or stream()) the image afterwards  // NOTE: this buffers the readStream in memory!  var   readStream   =   fs . createReadStream ( /path/to/my/img.jpg );  gm ( readStream )  . size ({ bufferStream :   true },   function ( err ,   size )   { \n   this . resize ( size . width   /   2 ,   size . height   /   2 ) \n   this . write ( /path/to/resized.jpg ,   function   ( err )   { \n     if   ( ! err )   console . log ( done ); \n   });  });", 
            "title": "\u6d41"
        }, 
        {
            "location": "/Buffers/", 
            "text": "\u7f13\u51b2\u5668\n\n\n// A buffer can be passed instead of a filepath as well\n\n\nvar\n \nbuf\n \n=\n \nrequire\n(\nfs\n).\nreadFileSync\n(\n/path/to/image.jpg\n);\n\n\n\ngm\n(\nbuf\n,\n \nimage.jpg\n)\n\n\n.\nnoise\n(\nlaplacian\n)\n\n\n.\nwrite\n(\n/path/to/out.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nreturn\n \nhandle\n(\nerr\n);\n\n  \nconsole\n.\nlog\n(\nCreated an image from a Buffer!\n);\n\n\n});\n\n\n\n/*\n\n\nA buffer can also be returned instead of a stream\n\n\nThe first argument to toBuffer is optional, it specifies the image format\n\n\n*/\n\n\ngm\n(\nimg.jpg\n)\n\n\n.\nresize\n(\n100\n,\n \n100\n)\n\n\n.\ntoBuffer\n(\nPNG\n,\nfunction\n \n(\nerr\n,\n \nbuffer\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nreturn\n \nhandle\n(\nerr\n);\n\n  \nconsole\n.\nlog\n(\ndone!\n);\n\n\n})", 
            "title": "\u7f13\u51b2\u533a"
        }, 
        {
            "location": "/Buffers/#_1", 
            "text": "// A buffer can be passed instead of a filepath as well  var   buf   =   require ( fs ). readFileSync ( /path/to/image.jpg );  gm ( buf ,   image.jpg )  . noise ( laplacian )  . write ( /path/to/out.jpg ,   function   ( err )   { \n   if   ( err )   return   handle ( err ); \n   console . log ( Created an image from a Buffer! );  });  /*  A buffer can also be returned instead of a stream  The first argument to toBuffer is optional, it specifies the image format  */  gm ( img.jpg )  . resize ( 100 ,   100 )  . toBuffer ( PNG , function   ( err ,   buffer )   { \n   if   ( err )   return   handle ( err ); \n   console . log ( done! );  })", 
            "title": "\u7f13\u51b2\u5668"
        }, 
        {
            "location": "/Montage/", 
            "text": "\u8499\u592a\u5947\n\n\nGraphicsMagick supports montage for combining images side by side. This is exposed through \ngm.montage()\n. Its only argument is an image path with the changes to the base image.\n\n\n\u5f53\u524d, \ngm.montage()\n \u53ea\u63a5\u53d7\u6587\u4ef6\u8def\u5f84.\n\n\ngm.montage(other)\n\n\n\n\n\ngm\n(\n/path/to/image.jpg\n)\n\n\n.\nmontage\n(\n/path/to/second_image.jpg\n)\n\n\n.\ngeometry\n(\n+100+150\n)\n\n\n.\nwrite\n(\n/path/to/montage.png\n,\n \nfunction\n(\nerr\n)\n \n{\n\n    \nif\n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\nWritten montage image.\n);\n\n\n});", 
            "title": "\u8499\u592a\u5947"
        }, 
        {
            "location": "/Montage/#_1", 
            "text": "GraphicsMagick supports montage for combining images side by side. This is exposed through  gm.montage() . Its only argument is an image path with the changes to the base image.  \u5f53\u524d,  gm.montage()  \u53ea\u63a5\u53d7\u6587\u4ef6\u8def\u5f84.  gm.montage(other)  gm ( /path/to/image.jpg )  . montage ( /path/to/second_image.jpg )  . geometry ( +100+150 )  . write ( /path/to/montage.png ,   function ( err )   { \n     if ( ! err )   console . log ( Written montage image. );  });", 
            "title": "\u8499\u592a\u5947"
        }, 
        {
            "location": "/custom/arguments/", 
            "text": "\u81ea\u5b9a\u4e49\u53c2\u6570\n\n\nIf \ngm\n does not supply you with a method you need or does not work as you'd like, you can simply use \ngm().in()\n or \ngm().out()\n to set your own arguments.\n\n\n\n\ngm().command()\n - Custom command such as \nidentify\n or \nconvert\n\n\ngm().in()\n - Custom input arguments\n\n\ngm().out()\n - Custom output arguments\n\n\n\n\nThe command will be formatted in the following order:\n\n\n\n\ncommand\n - ie \nconvert\n\n\nin\n - the input arguments\n\n\nsource\n - stdin or an image file\n\n\nout\n - the output arguments\n\n\noutput\n - stdout or the image file to write to\n\n\n\n\nFor example, suppose you want the following command:\n\n\ngm \nconvert\n \nlabel:Offline\n \nPNG:-\n\n\n\n\n\nHowever, using \ngm().label()\n may not work as intended for you:\n\n\ngm\n()\n\n\n.\nlabel\n(\nOffline\n)\n\n\n.\nstream\n();\n\n\n\n\n\nwould yield:\n\n\ngm \nconvert\n \n-label\n \n\\\nOffline\\\n \nPNG:-\n\n\n\n\n\nInstead, you can use \ngm().out()\n:\n\n\ngm\n()\n\n\n.\nout\n(\nlabel:Offline\n)\n\n\n.\nstream\n();\n\n\n\n\n\nwhich correctly yields:\n\n\ngm \nconvert\n \nlabel:Offline\n \nPNG:-", 
            "title": "\u53c2\u6570"
        }, 
        {
            "location": "/custom/arguments/#_1", 
            "text": "If  gm  does not supply you with a method you need or does not work as you'd like, you can simply use  gm().in()  or  gm().out()  to set your own arguments.   gm().command()  - Custom command such as  identify  or  convert  gm().in()  - Custom input arguments  gm().out()  - Custom output arguments   The command will be formatted in the following order:   command  - ie  convert  in  - the input arguments  source  - stdin or an image file  out  - the output arguments  output  - stdout or the image file to write to   For example, suppose you want the following command:  gm  convert   label:Offline   PNG:-   However, using  gm().label()  may not work as intended for you:  gm ()  . label ( Offline )  . stream ();   would yield:  gm  convert   -label   \\ Offline\\   PNG:-   Instead, you can use  gm().out() :  gm ()  . out ( label:Offline )  . stream ();   which correctly yields:  gm  convert   label:Offline   PNG:-", 
            "title": "\u81ea\u5b9a\u4e49\u53c2\u6570"
        }, 
        {
            "location": "/custom/IdentifyFormatString/", 
            "text": "\u81ea\u5b9a\u4e49\u6807\u8bc6\u683c\u5f0f\u5b57\u7b26\u4e32\n\n\nWhen identifying an image, you may want to use a custom formatting string instead of using \n-verbose\n, which is quite slow.\nYou can use your own \nformatting string\n when using \ngm().identify(format, callback)\n.\nFor example,\n\n\ngm\n(\nimg.png\n).\nformat\n(\nfunction\n \n(\nerr\n,\n \nformat\n)\n \n{\n\n\n\n})\n\n\n\n// is equivalent to\n\n\n\ngm\n(\nimg.png\n).\nidentify\n(\n%m\n,\n \nfunction\n \n(\nerr\n,\n \nformat\n)\n \n{\n\n\n\n})\n\n\n\n\n\nsince \n%m\n is the format option for getting the image file format.", 
            "title": "\u6807\u8bc6\u683c\u5f0f\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/custom/IdentifyFormatString/#_1", 
            "text": "When identifying an image, you may want to use a custom formatting string instead of using  -verbose , which is quite slow.\nYou can use your own  formatting string  when using  gm().identify(format, callback) .\nFor example,  gm ( img.png ). format ( function   ( err ,   format )   {  })  // is equivalent to  gm ( img.png ). identify ( %m ,   function   ( err ,   format )   {  })   since  %m  is the format option for getting the image file format.", 
            "title": "\u81ea\u5b9a\u4e49\u6807\u8bc6\u683c\u5f0f\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/Manipulation/", 
            "text": "\u64cd\u4f5c\n\n\nA\n\n\nadjoin\ngm\n(\nimg.png\n).\nadjoin\n()\n\n\n\n\naffine\ngm\n(\nimg.png\n).\naffine\n(\nmatrix\n)\n\n\n\n\nantialias\n\u6240\u6709\u56fe\u7247\u9ed8\u8ba4\u662f anti-aliased by GraphicsMagick. To disable it pass false.\n\ngm\n(\nimg.png\n).\nantialias\n(\nfalse\n)\n\n\nappend - \u9644\u52a0\u4e00\u7ec4\u56fe\u50cf\n\u53c2\u6570\nimg\n\u53e6\u4e00\u5f20\u56fe\u7247\u5730\u5740\nltr (\u53ef\u9009)\nBoolean - \u6307\u5b9a\u9644\u52a0\u4f4d\u7f6e\ntrue \u662f left-to-right \u5de6\u5230\u53f3\nfalse \u662f top-to-bottom (\u9ed8\u8ba4\u4e0a\u5230\u4e0b)\n  \ngm\n(\nimg.png\n).\nappend\n(\nimg\n \n[,\n \nimg\n,\n \nltr\n])\n\n\n  \n// appends another.jpg to img.png from left-to-right\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\ntrue\n)\n\n\n  \n// appends another.jpg to img.png from left-to-right\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \ntrue\n)\n\n\n  \n// appends another.jpg to img.png from top-to-bottom\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n)\n\n\n  \n// appends third.gif below another.jpg below img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\nthird.gif\n)\n\n\n  \n// appends third.gif below another.jpg below img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n)\n\n\n  \n// appends third.gif to the right of another.jpg to the right to img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n,\n \ntrue\n)\n\n\n\n\nauthenticate\n  \ngm\n(\nimg.png\n).\nauthenticate\n(\npassword\n)\n\n\n\n\nautoOrient\nAuto-orients the image according to its EXIF data.\nGraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.\n  \ngm\n(\nimg.jpg\n).\nautoOrient\n()\n\n\n\n\naverage\ngm\n(\nimg.png\n).\naverage\n()\n\n\n\n\nB\n\n\nbackdrop\ngm\n(\nimg.png\n).\nbackdrop\n()\n\n\n\n\nbitdepth\nSpecifies the number of bits of color to preserve in the image. See the docs for more detail.\n\ngm\n(\nimg.png\n).\nbitdepth\n(\nbits\n)\n\n\nblackThreshold\npixels below \nthreshold\n become black.\n\ngm\n(\nimg.png\n).\nblackThreshold\n(\nred\n \n[,\ngreen\n]\n \n[,\nblue\n]\n \n[,\nopacity\n])\n\n\nbluePrimary\ngm\n(\nimg.png\n).\nbluePrimary\n(\nx\n,\n \nx\n)\n\n\n\n\nblur\nAccepts a radius and optional sigma (standard deviation).\n\ngm\n(\nimg.png\n).\nblur\n(\nradius\n \n[,\n \nsigma\n])\n\n\nborder\ngm\n(\nimg.png\n).\nborder\n(\nwidth\n,\n \nheight\n)\n\n\n\n\nborderColor\ngm\n(\nimg.png\n).\nborderColor\n(\ncolor\n)\n\n\n\n\nbox\ngm\n(\nimg.png\n).\nbox\n(\ncolor\n)\n\n\n\n\nC\n\n\nchannel\ntype\n  Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray\n\ngm\n(\nimg.png\n).\nchannel\n(\ntype\n)\n\n\ncharcoal\nSimulates a charcoal drawing. Accepts a factor.\n\ngm\n(\nimg.png\n).\ncharcoal\n(\nfactor\n)\n\n\nchop\nRemoves pixels from the interior of an image.\n\ngm\n(\nimg.png\n).\nchop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\nclip\ngm\n(\nimg.png\n).\nclip\n()\n\n\n\n\ncoalesce\ngm\n(\nimg.png\n).\ncoalesce\n()\n\n\n\n\ncolorize\nColorize the image with optionally separate red, green, and blue values.\n\ngm\n(\nimg.png\n).\ncolorize\n(\nred\n \n[,\n \ngreen\n \n[,\n \nblue\n]])\n\n\ncolorMap\ntype\n  shared or private\n\ngm\n(\nimg.png\n).\ncolorMap\n(\ntype\n)\n\n\ncolors\nSets the preferred number of colors for the image (color reduction).\n\ngm\n(\nimg.png\n).\ncolors\n(\nint\n)\n\n\ncolorspace\nSpecifies the type of colorspace. See the GraphicsMagick docs for val details.\n\ngm\n(\nimg.png\n).\ncolorspace\n(\nval\n)\n\n\ncompose\ngm\n(\nimg.png\n).\ncompose\n(\noperator\n)\n\n\n\n\ncompress\ntype\nNone, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA\n\ngm\n(\nimg.png\n).\ncompress\n(\ntype\n)\n\n\ncomment\nAnnotates an image. See the docs for more info.\n\ngm\n(\nimg.png\n).\ncomment\n(\ntext\n|\nformat\n)\n\n\ncontrast\nIncreases or reduces the image contrast. Accepts a multiplier.\n\ngm\n(\nimg.png\n).\ncontrast\n([\n+-\n]\nmultiplier\n)\n\n\nconvolve\ngm\n(\nimg.png\n).\nconvolve\n(\nkernel\n)\n\n\n\n\ncreateDirectories\ngm\n(\nimg.png\n).\ncreateDirectories\n()\n\n\n\n\ncrop\nCrops the image to the given width and height at the given x and y position.\n\ngm\n(\nimg.png\n).\ncrop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\ncycle\nDisplace the image colormap by amount. amount is the number of positions each colormap entry is shifted.\n\ngm\n(\nimg.png\n).\ncycle\n(\namount\n)\n\n\nD\n\n\ndeconstruct\ngm\n(\nimg.png\n).\ndeconstruct\n()\n\n\n\n\ndefine\ngm\n(\nimg.png\n).\ndefine\n()\n\n\n\n\ndelay\namount\n is in hundreths of a second.\n\ngm\n(\nimg.png\n).\ndelay\n(\namout\n)\n\n\ndensity\nThis option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image.\n\ngm\n(\nimg.png\n).\ndensity\n(\nwidth\n,\n \nheight\n)\n\n\ndespeckle\nReduces the speckles within the image.\n\ngm\n(\nimg.png\n).\ndespeckle\n()\n\n\ndisplace\nShift image pixels as defined by a displacement map.\n\ngm\n(\nimg.png\n).\ndisplace\n(\nhorizontal\n,\n \nvertical\n)\n\n\ndisplay\ngm\n(\nimg.png\n).\ndisplay\n(\nvalue\n)\n\n\n\n\ndispose\ngm\n(\nimg.png\n).\ndispose\n(\nmethod\n)\n\n\n\n\ndissolve\ngm\n(\nimg.png\n).\ndissolve\n(\nmethod\n)\n\n\n\n\ndither\nApplies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\nNote: either .colors() or .monochrome() must be used for this to take effect.\n\ngm\n(\nimg.png\n).\ndither\n([\nbool\n])\n\n\nE\n\n\nedge\nEmphasizes edges in an image. Takes an optional radius of the emphasis to apply.\n\ngm\n(\nimg.png\n).\nedge\n([\nradius\n])\n\n\nemboss\nEmbosses the image. Takes an optional radius.\n\ngm\n(\nimg.png\n).\nemboss\n([\nradius\n])\n\n\nencoding\ntype\nAdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\ngm(\"img.png\").encoding(type)\n```\nendian\ntype\nMSB, LSB, or Native\n\ngm\n(\nimg.png\n).\nendian\n(\ntype\n)\n\n\nenhance\nEnhances the image.\n\ngm\n(\nimg.png\n).\nenhance\n()\n\n\nequalize\nPerforms histogram equalization to the image.\n\ngm\n(\nimg.png\n).\nequalize\n()\n\n\nextent\ncomposite image on background color canvas image.\n\ngm\n(\nimg.png\n).\nextent\n([\nwidth\n,\n \nheight\n,\n \noptions\n])\n\n\nF\n\n\nfile\ngm\n(\nimg.png\n).\nfile\n(\nfilename\n)\n\n\n\n\nfilter\nSpecifies the filter to use when resizing. see link for available types.\n\ngm\n(\nimg.png\n).\nfilter\n(\ntype\n)\n\n\nflatten\ngm\n(\nimg.png\n).\nflatten\n()\n\n\n\n\nflip\nCreates a mirror image (vertically).\n\ngm\n(\nimg.png\n).\nflip\n()\n\n\nflop\nCreates a mirror image (horizontally).\n\ngm\n(\nimg.png\n).\nflop\n()\n\n\nforeground\ngm\n(\nimg.png\n).\nforeground\n(\ncolor\n)\n\n\n\n\nframe\ngm\n(\nimg.png\n).\nframe\n(\nwidth\n,\n \nheight\n,\n \nouterBevelWidth\n,\n \ninnerBevelWidth\n)\n\n\n\n\nfuzz\ngm\n(\nimg.png\n).\nfuzz\n(\ndistance\n \n[,\npercent\n])\n\n\n\n\nG\n\n\ngamma\nAdjusts the level of gamma correction.\n\ngm\n(\nimg.png\n).\ngamma\n(\nr\n,\n \ng\n,\n \nb\n)\n\n\ngaussian\ngm\n(\nimg.png\n).\ngaussian\n(\nradius\n \n[,\nsigma\n])\n\n\n\n\ngeometry\ngm\n(\nimg.png\n).\ngeometry\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\n\n\ngreenPrimary\ngm\n(\nimg.png\n).\ngreenPrimary\n(\nx\n,\n \ny\n)\n\n\n\n\ngravity\nThe direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\ndirection\nNorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast\n\ngm\n(\nimg.png\n).\ngravity\n(\ndirection\n)\n\n\nH\n\n\nhighlightColor\ngm\n(\nimg.png\n).\nhighlightColor\n(\ncolor\n)\n\n\n\n\nhighlightStyle\ngm\n(\nimg.png\n).\nhighlightStyle\n(\ncolor\n)\n\n\n\n\nI\n\n\niconGeometry\ngm\n(\nimg.png\n).\niconGeometry\n(\ngeometry\n)\n\n\n\n\nimplode\nImplodes the image pixels around the center. Takes an optional factor.\n\ngm\n(\nimg.png\n).\nimplode\n([\nfactor\n])\n\n\nintent\ntype\nAbsolute, Perceptual, Relative, or Saturation\n\ngm\n(\nimg.png\n).\nintent\n(\ntype\n)\n\n\ninterlace\nSpecifies the type of interlacing scheme. Defaults to None.\ntype\nNone|Line|Plane|Partition\n\ngm\n(\nimg.png\n).\ninterlace\n(\ntype\n)\n\n\nL\n\n\nlabel\nAssigns a label to an image.\n\ngm\n(\nimg.png\n).\nlabel\n(\nname\n)\n\n\nlat\ngm\n(\nimg.png\n).\nlat\n(\nwidth\n,\n \nheight\n,\n \noffset\n \n[,\npercent\n])\n\n\n\n\nlevel\ngm\n(\nimg.png\n).\nlevel\n(\nblackPoint\n,\n \ngamma\n,\n \nwhitePoint\n \n[,\npercent\n])\n\n\n\n\nlimit\nSets resource limits.\ntype\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs\n\ngm\n(\nimg.png\n).\nlimit\n(\ntype\n,\n \nval\n)\n\n\nlist\ntype\nColor, Delegate, Format, Magic, Module, Resource, or Type\n\n  \ngm\n(\nimg.png\n).\nlist\n(\ntype\n)\n\n\nlog\nSpecify format for debug log. \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nlog\n(\nformat\n)\n\n\nloop\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nloop\n(\niterations\n)\n\n\nlower\nCreates a pseudo 3D lowering effect of the images edges.\n\ngm\n(\nimg.png\n).\nlower\n(\nwidth\n,\n \nheight\n)\n\n\nM\n\n\nmagnify\nMagnifies the image factor times.\n\ngm\n(\nimg.png\n).\nmagnify\n(\nfactor\n)\n\n\nmap\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmap\n(\nfilename\n)\n\n\nmask\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmask\n(\nfilename\n)\n\n\nmatte\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmatte\n()\n\n\nmatteColor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmatteColor\n(\ncolor\n)\n\n\nmaximumError\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmaximumError\n(\nlimit\n)\n\n\nmedian\nApplies a median filter to the image. The optional param radius adjusts the weight of the effect.\n\ngm\n(\nimg.png\n).\nmedian\n([\nradius\n])\n\n\nminify\nMinifies the image factor times.\n\ngm\n(\nimg.png\n).\nminify\n(\nfactor\n)\n\n\nmode\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmode\n(\nvalue\n)\n\n\nmodulate\nVaries the brightness, saturation, and hue of the image.\n\ngm\n(\nimg.png\n).\nmodulate\n(\nb\n \n[,\n \ns\n \n[,\n \nh\n]])\n\n\nmonitor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmonitor\n()\n\n\nmonochrome\nTransforms the image to black and white.\n\ngm\n(\nimg.png\n).\nmonochrome\n()\n\n\nmorph\nMorphs two images together.\notherImg\nthe path to another img\noutName\nthe path where the image will be saved\ncallback\nA function to be executed when morphing is complete. callback will be passed the standard args that .write() receives.\n\ngm\n(\nimg.png\n).\nmorph\n(\notherImg\n,\n \noutName\n,\n \ncallback\n)\n\n\nmosaic\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmosaic\n()\n\n\nmotionBlur\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmotionBlur\n(\nradius\n \n[,\n \nsigma\n,\n \nangle\n])\n\n\nN\n\n\nname\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nname\n()\n\n\nnegative\nReplaces every pixel with its complementary color.\n\ngm\n(\nimg.png\n).\nnegative\n()\n\n\nnoise\nAdd or reduce noise in the image.\nadius|type\nTo add noise pass one of the following:\nuniform\ngaussian\nmultiplicative\nimpulse\nlaplacian\npoisson\nOtherwise the argument will be interpreted as a radius which adjusts the weight of the effect.\n\ngm\n(\nimg.png\n).\nnoise\n(\nradius\n|\ntype\n)\n\n\nnoop\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nnoop\n()\n\n\nnormalize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nnormalize\n()\n\n\nO\n\n\nopaque\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nopaque\n(\ncolor\n)\n\n\noperator\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\noperator\n(\nchannel\n,\n \noperator\n,\n \nrvalue\n \n[,\npercent\n])\n\n\norderedDither\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\norderedDither\n(\nchannelType\n,\n \nNxN\n)\n\n\noutputDirectory\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\noutputDirectory\n(\nchannelType\n,\n \nNxN\n)\n\n\nP\n\n\npage\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npage\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\npause\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npause\n(\nseconds\n)\n\n\npen\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npen\n(\ncolor\n)\n\n\nping\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nping\n()\n\n\npointSize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npointSize\n(\nvalue\n)\n\n\nnoProfile\nRemoves EXIF, ICM, etc profile data.\n\ngm\n(\nimg.png\n).\nnoProfile\n()\n\n\npreview\ntype\nSee the docs for valid types.\n\ngm\n(\nimg.png\n).\npreview\n(\ntype\n)\n\n\npaint\nSimulates an oil painting.\n\ngm\n(\nimg.png\n).\npaint\n(\nradius\n)\n\n\nprocess\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprocess\n(\ncommand\n)\n\n\nprofile\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprofile\n(\nfilename\n)\n\n\nprogress\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprogress\n()\n\n\nrandomThreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrandomThreshold\n(\nchannelType\n,\n \nLOWxHIGH\n)\n\n\nQ\n\n\nquality\nAdjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best).\n\ngm\n(\nimg.png\n).\nquality\n(\nval\n)\n\n\nR\n\n\nraise\nCreates a pseudo 3D raising effect of the images edges.\n\ngm\n(\nimg.png\n).\nraise\n(\nwidth\n,\n \nheight\n)\n\n\nrecolor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrecolor\n(\nmatrix\n)\n\n\nredPrimary\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nredPrimary\n(\nx\n,\n \ny\n)\n\n\nregion\nSpecifies that all following methods only apply to the area specified by width, height, x, y.\n\ngm\n(\nimg.png\n).\nregion\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n).\nsepia\n()\n\n\n\nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y.\nremote\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nremote\n()\n\n\nrender\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrender\n()\n\n\nrepage\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrepage\n(\nwidth\n,\n \nheight\n,\n \nxoff\n,\n \nyoff\n,\n \narg\n)\n\n\nS\n\n\nsample\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nsample\n(\ngeometry\n)\n\n\nsamplingFactor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nsamplingFactor\n(\nhorizontalFactor\n,\n \nverticalFactor\n)\n\n\nrawSize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrawSize\n(\nwidth\n,\n \nheight\n,\n \noffset\n)\n\n\nresample\nResamples the image to specified horizontal and vertical resolution.\n    \ngm\n(\nimg.png\n).\nresample\n(\nhorizontal\n,\n \nvertical\n)\n\n\n\n\nresize\n\u8c03\u6574\u56fe\u50cf\u7684\u5927\u5c0f.\n\u9009\u9879\n%, @, !, \n or \n see the GraphicsMagick docs for details\n    \ngm\n(\nimg.png\n).\nresize\n(\nwidth\n \n[,\n \nheight\n \n[,\n \noptions\n]])\n\n\n\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40)\nTo resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50)\nTo resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50)\nTo override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\")\nroll\nRolls an image vertically or horizontally.\n\ngm\n(\nimg.png\n).\nroll\n(\nhorizontalInt\n,\n \nverticalInt\n)\n\n\nrotate\nRotates the image by degrees and fills the background with color.\n\ngm\n(\nimg.png\n).\nrotate\n(\ncolor\n,\n \ndegrees\n)\n\n\nS\n\n\nscene\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nscene\n(\nvalue\n)\n\n\nscenes\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nscenes\n(\nstart\n,\n \nend\n)\n\n\nscale\nScales the image.\n\ngm\n(\nimg.png\n).\nscale\n(\nwidth\n,\n \nheight\n)\n\n\nscreen\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nscreen\n()\n\n\n\n\nsegment\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsegment\n(\nclusterThreshold\n,\n \nsmoothingThreshold\n)\n\n\n\n\nselectFrame\nHelpful if we process a large .gif so we don't load in memory each frame.\ngm\n(\nimg.png\n).\nselectFrame\n(\n0\n)\n\n\n\n\nsepia\nA convenience method to apply a sepia effect to the image.\ngm\n(\nimg.png\n).\nsepia\n()\n\n\n\n\nset\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nset\n(\nattribute\n,\n \nvalue\n)\n\n\n\n\nsetFormat\nOverriddes the output image format.\nHelpful if we are outputting an image with no extention but need to change formats.\ngm\n(\nimg.png\n).\nsetFormat\n(\nformat\n)\n\n\n\n\nshade\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshade\n(\nazimuth\n,\n \nelevation\n)\n\n\n\n\nshadow\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshadow\n(\nradius\n,\n \nsigma\n)\n\n\n\n\nsharedMemory\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsharedMemory\n()\n\n\n\n\nshave\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshave\n(\nwidth\n,\n \nheight\n,\n \npercent\n)\n\n\n\n\nsharpen\nSharpens the image.\ngm\n(\nimg.png\n).\nsharpen\n(\nradius\n \n[,\n \nsigma\n])\n\n\n\n\nshear\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshear\n(\nxDegrees\n,\n \nyDegrees\n)\n\n\n\n\nsilent\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsilent\n()\n\n\n\n\nsnaps\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsnaps\n(\nvalue\n)\n\n\n\n\nsolarize\nNegates all pixels above threshold percent.\ngm\n(\nimg.png\n).\nsolarize\n(\nthreshold\n)\n\n\n\n\nspread\nDesplaces pixels by a random amount.\ngm\n(\nimg.png\n).\nspread\n(\namount\n)\n\n\n\n\nstegano\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nstegano\n(\noffset\n)\n\n\n\n\nstereo\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nstereo\n()\n\n\n\n\nstrip\nStrips the image of any profiles or comments.\nSimilar to noProfile() but removes both profile and comment data. only works with imageMagick.\ngm\n(\nimg.png\n).\nstrip\n()\n\n\n\n\nswirl\nSwirls pixels arount the center of the image. degrees specifies the tightness of the swirl.\ngm\n(\nimg.png\n).\nswirl\n(\ndegrees\n)\n\n\n\n\nT\n\n\ntextFont\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntextFont\n(\nfont\n)\n\n\n\n\ntexture\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntexture\n(\nfont\n)\n\n\n\n\nthreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nthreshold\n(\nvalue\n \n[,\n \npercent\n])\n\n\n\n\nthumb\nCreates a thumbnail based on minimum sizes.\nwidth\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\"img.png\").thumb(width, height, outName, quality, callback)\ntile\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntile\n(\nfilename\n)\n\n\n\n\ntitle\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntitle\n(\nstring\n)\n\n\n\n\ntransform\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntransform\n(\ncolor\n)\n\n\n\n\ntransparent\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntransparent\n(\ncolor\n)\n\n\n\n\ntreeDepth\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntreeDepth\n(\ncolor\n)\n\n\n\n\ntrim\nTrim an image by removing any edges that are exactly the same color as the corner pixels.\ngm\n(\nimg.png\n).\ntrim\n()\n\n\n\n\ntype\nSpecifies the image type.\ntype\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\"img.png\").type(type)\nU\n\n\nupdate\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nupdate\n(\nseconds\n)\n\n\n\n\nunits\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nunits\n(\ntype\n)\n\n\n\n\nunsharp\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nunsharp\n(\nradius\n \n[,\n \nsigma\n,\n \namount\n,\n \nthreshold\n])\n\n\n\n\nusePixmap\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nusePixmap\n()\n\n\n\n\nV\n\n\nview\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nview\n()\n\n\n\n\nvirtualPixel\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nvirtualPixel\n(\nmethod\n)\n\n\n\n\nvisual\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nvisual\n(\ntype\n)\n\n\n\n\nW\n\n\nwatermark\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwatermark\n(\nbrightness\n,\n \nsaturation\n)\n\n\nwave\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwave\n(\namplitude\n,\n \nwavelength\n)\n\n\nwhitePoint\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwhitePoint\n(\nx\n,\n \ny\n)\n\n\nwhiteThreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwhiteThreshold\n(\nred\n,\n \ngreen\n,\n \nblue\n,\n \nopacity\n)\n\n\nwindow\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwindow\n(\nid\n)\n\n\nwindowGroup\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwindowGroup\n()", 
            "title": "\u65b9\u6cd5"
        }, 
        {
            "location": "/Manipulation/#_1", 
            "text": "", 
            "title": "\u64cd\u4f5c"
        }, 
        {
            "location": "/Manipulation/#a", 
            "text": "adjoin gm ( img.png ). adjoin ()   affine gm ( img.png ). affine ( matrix )   antialias \u6240\u6709\u56fe\u7247\u9ed8\u8ba4\u662f anti-aliased by GraphicsMagick. To disable it pass false. gm ( img.png ). antialias ( false )  append - \u9644\u52a0\u4e00\u7ec4\u56fe\u50cf \u53c2\u6570 img \u53e6\u4e00\u5f20\u56fe\u7247\u5730\u5740 ltr (\u53ef\u9009) Boolean - \u6307\u5b9a\u9644\u52a0\u4f4d\u7f6e true \u662f left-to-right \u5de6\u5230\u53f3 false \u662f top-to-bottom (\u9ed8\u8ba4\u4e0a\u5230\u4e0b)    gm ( img.png ). append ( img   [,   img ,   ltr ]) \n\n   // appends another.jpg to img.png from left-to-right \n   gm ( img.png ). append ( another.jpg ). append ( true ) \n\n   // appends another.jpg to img.png from left-to-right \n   gm ( img.png ). append ( another.jpg ,   true ) \n\n   // appends another.jpg to img.png from top-to-bottom \n   gm ( img.png ). append ( another.jpg ) \n\n   // appends third.gif below another.jpg below img.png \n   gm ( img.png ). append ( another.jpg ). append ( third.gif ) \n\n   // appends third.gif below another.jpg below img.png \n   gm ( img.png ). append ( another.jpg ,   third.gif ) \n\n   // appends third.gif to the right of another.jpg to the right to img.png \n   gm ( img.png ). append ( another.jpg ,   third.gif ,   true )   authenticate    gm ( img.png ). authenticate ( password )   autoOrient Auto-orients the image according to its EXIF data.\nGraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.    gm ( img.jpg ). autoOrient ()   average gm ( img.png ). average ()", 
            "title": "A"
        }, 
        {
            "location": "/Manipulation/#b", 
            "text": "backdrop gm ( img.png ). backdrop ()   bitdepth Specifies the number of bits of color to preserve in the image. See the docs for more detail. gm ( img.png ). bitdepth ( bits )  blackThreshold pixels below  threshold  become black. gm ( img.png ). blackThreshold ( red   [, green ]   [, blue ]   [, opacity ])  bluePrimary gm ( img.png ). bluePrimary ( x ,   x )   blur Accepts a radius and optional sigma (standard deviation). gm ( img.png ). blur ( radius   [,   sigma ])  border gm ( img.png ). border ( width ,   height )   borderColor gm ( img.png ). borderColor ( color )   box gm ( img.png ). box ( color )", 
            "title": "B"
        }, 
        {
            "location": "/Manipulation/#c", 
            "text": "channel type\n  Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray gm ( img.png ). channel ( type )  charcoal Simulates a charcoal drawing. Accepts a factor. gm ( img.png ). charcoal ( factor )  chop Removes pixels from the interior of an image. gm ( img.png ). chop ( width ,   height ,   x ,   y )  clip gm ( img.png ). clip ()   coalesce gm ( img.png ). coalesce ()   colorize Colorize the image with optionally separate red, green, and blue values. gm ( img.png ). colorize ( red   [,   green   [,   blue ]])  colorMap type\n  shared or private gm ( img.png ). colorMap ( type )  colors Sets the preferred number of colors for the image (color reduction). gm ( img.png ). colors ( int )  colorspace Specifies the type of colorspace. See the GraphicsMagick docs for val details. gm ( img.png ). colorspace ( val )  compose gm ( img.png ). compose ( operator )   compress type\nNone, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA gm ( img.png ). compress ( type )  comment Annotates an image. See the docs for more info. gm ( img.png ). comment ( text | format )  contrast Increases or reduces the image contrast. Accepts a multiplier. gm ( img.png ). contrast ([ +- ] multiplier )  convolve gm ( img.png ). convolve ( kernel )   createDirectories gm ( img.png ). createDirectories ()   crop Crops the image to the given width and height at the given x and y position. gm ( img.png ). crop ( width ,   height ,   x ,   y )  cycle Displace the image colormap by amount. amount is the number of positions each colormap entry is shifted. gm ( img.png ). cycle ( amount )", 
            "title": "C"
        }, 
        {
            "location": "/Manipulation/#d", 
            "text": "deconstruct gm ( img.png ). deconstruct ()   define gm ( img.png ). define ()   delay amount  is in hundreths of a second. gm ( img.png ). delay ( amout )  density This option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image. gm ( img.png ). density ( width ,   height )  despeckle Reduces the speckles within the image. gm ( img.png ). despeckle ()  displace Shift image pixels as defined by a displacement map. gm ( img.png ). displace ( horizontal ,   vertical )  display gm ( img.png ). display ( value )   dispose gm ( img.png ). dispose ( method )   dissolve gm ( img.png ). dissolve ( method )   dither Applies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\nNote: either .colors() or .monochrome() must be used for this to take effect. gm ( img.png ). dither ([ bool ])", 
            "title": "D"
        }, 
        {
            "location": "/Manipulation/#e", 
            "text": "edge Emphasizes edges in an image. Takes an optional radius of the emphasis to apply. gm ( img.png ). edge ([ radius ])  emboss Embosses the image. Takes an optional radius. gm ( img.png ). emboss ([ radius ])  encoding type\nAdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\ngm(\"img.png\").encoding(type)\n``` endian type\nMSB, LSB, or Native gm ( img.png ). endian ( type )  enhance Enhances the image. gm ( img.png ). enhance ()  equalize Performs histogram equalization to the image. gm ( img.png ). equalize ()  extent composite image on background color canvas image. gm ( img.png ). extent ([ width ,   height ,   options ])", 
            "title": "E"
        }, 
        {
            "location": "/Manipulation/#f", 
            "text": "file gm ( img.png ). file ( filename )   filter Specifies the filter to use when resizing. see link for available types. gm ( img.png ). filter ( type )  flatten gm ( img.png ). flatten ()   flip Creates a mirror image (vertically). gm ( img.png ). flip ()  flop Creates a mirror image (horizontally). gm ( img.png ). flop ()  foreground gm ( img.png ). foreground ( color )   frame gm ( img.png ). frame ( width ,   height ,   outerBevelWidth ,   innerBevelWidth )   fuzz gm ( img.png ). fuzz ( distance   [, percent ])", 
            "title": "F"
        }, 
        {
            "location": "/Manipulation/#g", 
            "text": "gamma Adjusts the level of gamma correction. gm ( img.png ). gamma ( r ,   g ,   b )  gaussian gm ( img.png ). gaussian ( radius   [, sigma ])   geometry gm ( img.png ). geometry ( width ,   height   [, arg ])   greenPrimary gm ( img.png ). greenPrimary ( x ,   y )   gravity The direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\ndirection\nNorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast gm ( img.png ). gravity ( direction )", 
            "title": "G"
        }, 
        {
            "location": "/Manipulation/#h", 
            "text": "highlightColor gm ( img.png ). highlightColor ( color )   highlightStyle gm ( img.png ). highlightStyle ( color )", 
            "title": "H"
        }, 
        {
            "location": "/Manipulation/#i", 
            "text": "iconGeometry gm ( img.png ). iconGeometry ( geometry )   implode Implodes the image pixels around the center. Takes an optional factor. gm ( img.png ). implode ([ factor ])  intent type\nAbsolute, Perceptual, Relative, or Saturation gm ( img.png ). intent ( type )  interlace Specifies the type of interlacing scheme. Defaults to None. type\nNone|Line|Plane|Partition gm ( img.png ). interlace ( type )", 
            "title": "I"
        }, 
        {
            "location": "/Manipulation/#l", 
            "text": "label Assigns a label to an image. gm ( img.png ). label ( name )  lat gm ( img.png ). lat ( width ,   height ,   offset   [, percent ])   level gm ( img.png ). level ( blackPoint ,   gamma ,   whitePoint   [, percent ])   limit Sets resource limits. type\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs gm ( img.png ). limit ( type ,   val )  list type\nColor, Delegate, Format, Magic, Module, Resource, or Type    gm ( img.png ). list ( type )  log Specify format for debug log. \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). log ( format )  loop \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). loop ( iterations )  lower Creates a pseudo 3D lowering effect of the images edges. gm ( img.png ). lower ( width ,   height )", 
            "title": "L"
        }, 
        {
            "location": "/Manipulation/#m", 
            "text": "magnify Magnifies the image factor times. gm ( img.png ). magnify ( factor )  map \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). map ( filename )  mask \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mask ( filename )  matte \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). matte ()  matteColor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). matteColor ( color )  maximumError \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). maximumError ( limit )  median Applies a median filter to the image. The optional param radius adjusts the weight of the effect. gm ( img.png ). median ([ radius ])  minify Minifies the image factor times. gm ( img.png ). minify ( factor )  mode \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mode ( value )  modulate Varies the brightness, saturation, and hue of the image. gm ( img.png ). modulate ( b   [,   s   [,   h ]])  monitor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). monitor ()  monochrome Transforms the image to black and white. gm ( img.png ). monochrome ()  morph Morphs two images together. otherImg the path to another img outName the path where the image will be saved callback A function to be executed when morphing is complete. callback will be passed the standard args that .write() receives. gm ( img.png ). morph ( otherImg ,   outName ,   callback )  mosaic \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mosaic ()  motionBlur \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). motionBlur ( radius   [,   sigma ,   angle ])", 
            "title": "M"
        }, 
        {
            "location": "/Manipulation/#n", 
            "text": "name \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). name ()  negative Replaces every pixel with its complementary color. gm ( img.png ). negative ()  noise Add or reduce noise in the image.\nadius|type\nTo add noise pass one of the following:\nuniform\ngaussian\nmultiplicative\nimpulse\nlaplacian\npoisson\nOtherwise the argument will be interpreted as a radius which adjusts the weight of the effect. gm ( img.png ). noise ( radius | type )  noop \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). noop ()  normalize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). normalize ()", 
            "title": "N"
        }, 
        {
            "location": "/Manipulation/#o", 
            "text": "opaque \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). opaque ( color )  operator \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). operator ( channel ,   operator ,   rvalue   [, percent ])  orderedDither \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). orderedDither ( channelType ,   NxN )  outputDirectory \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). outputDirectory ( channelType ,   NxN )", 
            "title": "O"
        }, 
        {
            "location": "/Manipulation/#p", 
            "text": "page \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). page ( width ,   height   [, arg ])  pause \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pause ( seconds )  pen \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pen ( color )  ping \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). ping ()  pointSize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pointSize ( value )  noProfile Removes EXIF, ICM, etc profile data. gm ( img.png ). noProfile ()  preview type\nSee the docs for valid types. gm ( img.png ). preview ( type )  paint Simulates an oil painting. gm ( img.png ). paint ( radius )  process \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). process ( command )  profile \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). profile ( filename )  progress \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). progress ()  randomThreshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). randomThreshold ( channelType ,   LOWxHIGH )", 
            "title": "P"
        }, 
        {
            "location": "/Manipulation/#q", 
            "text": "quality Adjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best). gm ( img.png ). quality ( val )", 
            "title": "Q"
        }, 
        {
            "location": "/Manipulation/#r", 
            "text": "raise Creates a pseudo 3D raising effect of the images edges. gm ( img.png ). raise ( width ,   height )  recolor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). recolor ( matrix )  redPrimary \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). redPrimary ( x ,   y )  region Specifies that all following methods only apply to the area specified by width, height, x, y. gm ( img.png ). region ( width ,   height ,   x ,   y ). sepia ()  \nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y. remote \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). remote ()  render \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). render ()  repage \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). repage ( width ,   height ,   xoff ,   yoff ,   arg )", 
            "title": "R"
        }, 
        {
            "location": "/Manipulation/#s", 
            "text": "sample \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). sample ( geometry )  samplingFactor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). samplingFactor ( horizontalFactor ,   verticalFactor )  rawSize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). rawSize ( width ,   height ,   offset )  resample Resamples the image to specified horizontal and vertical resolution.      gm ( img.png ). resample ( horizontal ,   vertical )   resize \u8c03\u6574\u56fe\u50cf\u7684\u5927\u5c0f. \u9009\u9879 %, @, !,   or   see the GraphicsMagick docs for details      gm ( img.png ). resize ( width   [,   height   [,   options ]])  \nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40) To resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50) To resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50) To override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\") roll Rolls an image vertically or horizontally. gm ( img.png ). roll ( horizontalInt ,   verticalInt )  rotate Rotates the image by degrees and fills the background with color. gm ( img.png ). rotate ( color ,   degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#s_1", 
            "text": "scene \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). scene ( value )  scenes \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). scenes ( start ,   end )  scale Scales the image. gm ( img.png ). scale ( width ,   height )  screen \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). screen ()   segment \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). segment ( clusterThreshold ,   smoothingThreshold )   selectFrame Helpful if we process a large .gif so we don't load in memory each frame. gm ( img.png ). selectFrame ( 0 )   sepia A convenience method to apply a sepia effect to the image. gm ( img.png ). sepia ()   set \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). set ( attribute ,   value )   setFormat Overriddes the output image format. Helpful if we are outputting an image with no extention but need to change formats. gm ( img.png ). setFormat ( format )   shade \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shade ( azimuth ,   elevation )   shadow \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shadow ( radius ,   sigma )   sharedMemory \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). sharedMemory ()   shave \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shave ( width ,   height ,   percent )   sharpen Sharpens the image. gm ( img.png ). sharpen ( radius   [,   sigma ])   shear \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shear ( xDegrees ,   yDegrees )   silent \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). silent ()   snaps \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). snaps ( value )   solarize Negates all pixels above threshold percent. gm ( img.png ). solarize ( threshold )   spread Desplaces pixels by a random amount. gm ( img.png ). spread ( amount )   stegano \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). stegano ( offset )   stereo \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). stereo ()   strip Strips the image of any profiles or comments. Similar to noProfile() but removes both profile and comment data. only works with imageMagick. gm ( img.png ). strip ()   swirl Swirls pixels arount the center of the image. degrees specifies the tightness of the swirl. gm ( img.png ). swirl ( degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#t", 
            "text": "textFont \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). textFont ( font )   texture \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). texture ( font )   threshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). threshold ( value   [,   percent ])   thumb Creates a thumbnail based on minimum sizes. width\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\"img.png\").thumb(width, height, outName, quality, callback) tile \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). tile ( filename )   title \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). title ( string )   transform \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). transform ( color )   transparent \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). transparent ( color )   treeDepth \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). treeDepth ( color )   trim Trim an image by removing any edges that are exactly the same color as the corner pixels. gm ( img.png ). trim ()   type Specifies the image type. type\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\"img.png\").type(type)", 
            "title": "T"
        }, 
        {
            "location": "/Manipulation/#u", 
            "text": "update \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). update ( seconds )   units \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). units ( type )   unsharp \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). unsharp ( radius   [,   sigma ,   amount ,   threshold ])   usePixmap \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). usePixmap ()", 
            "title": "U"
        }, 
        {
            "location": "/Manipulation/#v", 
            "text": "view \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). view ()   virtualPixel \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). virtualPixel ( method )   visual \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). visual ( type )", 
            "title": "V"
        }, 
        {
            "location": "/Manipulation/#w", 
            "text": "watermark \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). watermark ( brightness ,   saturation )  wave \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). wave ( amplitude ,   wavelength )  whitePoint \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). whitePoint ( x ,   y )  whiteThreshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). whiteThreshold ( red ,   green ,   blue ,   opacity )  window \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). window ( id )  windowGroup \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). windowGroup ()", 
            "title": "W"
        }, 
        {
            "location": "/Getters/", 
            "text": "\u83b7\u53d6\u5668\n\n\n\u6240\u6709\u7684\u83b7\u53d6\u5668\u90fd\u6709\u76f8\u540c\u7684\u7b7e\u540d:\n\n\ngm\n(\nimage.png\n).\nsize\n(\nfunction\n(\nerr\n,\n \nvalue\n){\n\n  \n// \u6ce8\u610f : \u503c\u53ef\u80fd\u4e3a undefined\n\n\n})\n\n\n\n\n\n\n\nsize - \u56fe\u50cf\u5bbd\u9ad8 (WxH)\n\n\nformat - \u683c\u5f0f (gif, jpeg, png, etc)\n\n\ndepth - \u989c\u8272\u6df1\u5ea6\n\n\ncolor - \u989c\u8272\u6570\n\n\nres - \u5206\u8fa8\u7387\n\n\nfilesize - \u6587\u4ef6\u5927\u5c0f\n\n\nidentify - \u6570\u636e\u53ef\u7528\u6027\n\n\norientation - EXIF\u65b9\u5411", 
            "title": "\u83b7\u53d6\u5668"
        }, 
        {
            "location": "/Getters/#_1", 
            "text": "\u6240\u6709\u7684\u83b7\u53d6\u5668\u90fd\u6709\u76f8\u540c\u7684\u7b7e\u540d:  gm ( image.png ). size ( function ( err ,   value ){ \n   // \u6ce8\u610f : \u503c\u53ef\u80fd\u4e3a undefined  })    size - \u56fe\u50cf\u5bbd\u9ad8 (WxH)  format - \u683c\u5f0f (gif, jpeg, png, etc)  depth - \u989c\u8272\u6df1\u5ea6  color - \u989c\u8272\u6570  res - \u5206\u8fa8\u7387  filesize - \u6587\u4ef6\u5927\u5c0f  identify - \u6570\u636e\u53ef\u7528\u6027  orientation - EXIF\u65b9\u5411", 
            "title": "\u83b7\u53d6\u5668"
        }, 
        {
            "location": "/drawing/", 
            "text": "\u57fa\u672c\u7ed8\u56fe\n\n\n\u67e5\u770b \ndrawing.js\n \u6587\u4ef6\u91cc\u7684\u793a\u4f8b.\n\n\n\u753b - draw\nAnnotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods.\n\ngm\n(\nimg.png\n).\ndraw\n(\nargs\n)\n\n\n\u5f27\u89d2 - drawArc\nInscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation.\n\ngm\n(\nimg.png\n).\ndrawArc\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n,\n \nr0\n,\n \nr1\n)\n\n\n\u8d1d\u585e\u5c14\u66f2\u7ebf - drawBezier\ngm\n(\nimg.png\n).\ndrawBezier\n([\nx0\n,\n \ny0\n],\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\u5706 - drawCircle\ngm\n(\nimg.png\n).\ndrawCircle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\u692d\u5706\u5f62 - drawEllipse\ngm\n(\nimg.png\n).\ndrawEllipse\n(\nx0\n,\n \ny0\n,\n \nr0\n,\n \nry\n,\n \nr0\n,\n \nr1\n)\n\n\n\n\n\u7ebf - drawLine\ngm\n(\nimg.png\n).\ndrawLine\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\u70b9 - drawPoint\ngm\n(\nimg.png\n).\ndrawPoint\n(\nx\n,\n \ny\n)\n\n\n\n\n\u591a\u8fb9\u5f62 - drawPolygon\ngm\n(\nimg.png\n).\ndrawPolygon\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\u591a\u6bb5\u7ebf - drawPolyline\ngm\n(\nimg.png\n).\ndrawPolyline\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\u77e9\u5f62 - drawRectangle\nwc and hc are optional and add roundness to the corners.\n\ngm\n(\nimg.png\n).\ndrawRectangle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n \n[,\n \nwc\n,\n \nhc\n])\n\n\n\u6587\u672c - drawText\nDraws text on an image at x/y coordinates.\n\ngm\n(\nimg.png\n).\ndrawText\n(\nx\n,\n \ny\n,\n \ntext\n \n[,\n \ngravity\n])\n\n\n\u586b\u5145\u989c\u8272 - fill\nSpecifies the color to use when filling a drawn shape.\n\ngm\n(\nimg.png\n).\nfill\n(\ncolor\n)\n\n\n\u5b57\u4f53 - font\ngm\n(\nimg.png\n).\nfont\n(\nname\n)\n\n\n\n\n\u5b57\u4f53\u5927\u5c0f - fontSize\ngm\n(\nimg.png\n).\nfontSize\n(\nsize\n)\n\n\n\n\n\u5212 - stroke\nSpecifies the color to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstroke\n(\ncolor\n \n[,\n \nwidth\n])\n\n\n\u8bbe\u7f6e\u8fb9\u7684\u5bbd\u5ea6 - strokeWidth\nSpecifies the stroke width to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstrokeWidth\n(\nwidth\n)\n\n\n\u8bbe\u7f6e\u5c5e\u6027 - setDraw\nSets drawing properties. property can be either \"color\" or \"matte\".\n\ngm\n(\nimg.png\n).\nsetDraw\n(\nproperty\n,\n \nx\n,\n \ny\n,\n \nmethod\n)", 
            "title": "\u547d\u4ee4"
        }, 
        {
            "location": "/drawing/#_1", 
            "text": "\u67e5\u770b  drawing.js  \u6587\u4ef6\u91cc\u7684\u793a\u4f8b.  \u753b - draw Annotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods. gm ( img.png ). draw ( args )  \u5f27\u89d2 - drawArc Inscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation. gm ( img.png ). drawArc ( x0 ,   y0 ,   x1 ,   y1 ,   r0 ,   r1 )  \u8d1d\u585e\u5c14\u66f2\u7ebf - drawBezier gm ( img.png ). drawBezier ([ x0 ,   y0 ],   ...   [ xn ,   yn ])   \u5706 - drawCircle gm ( img.png ). drawCircle ( x0 ,   y0 ,   x1 ,   y1 )   \u692d\u5706\u5f62 - drawEllipse gm ( img.png ). drawEllipse ( x0 ,   y0 ,   r0 ,   ry ,   r0 ,   r1 )   \u7ebf - drawLine gm ( img.png ). drawLine ( x0 ,   y0 ,   x1 ,   y1 )   \u70b9 - drawPoint gm ( img.png ). drawPoint ( x ,   y )   \u591a\u8fb9\u5f62 - drawPolygon gm ( img.png ). drawPolygon ([ x0 ,   y0 ]   ...   [ xn ,   yn ])   \u591a\u6bb5\u7ebf - drawPolyline gm ( img.png ). drawPolyline ([ x0 ,   y0 ]   ...   [ xn ,   yn ])   \u77e9\u5f62 - drawRectangle wc and hc are optional and add roundness to the corners. gm ( img.png ). drawRectangle ( x0 ,   y0 ,   x1 ,   y1   [,   wc ,   hc ])  \u6587\u672c - drawText Draws text on an image at x/y coordinates. gm ( img.png ). drawText ( x ,   y ,   text   [,   gravity ])  \u586b\u5145\u989c\u8272 - fill Specifies the color to use when filling a drawn shape. gm ( img.png ). fill ( color )  \u5b57\u4f53 - font gm ( img.png ). font ( name )   \u5b57\u4f53\u5927\u5c0f - fontSize gm ( img.png ). fontSize ( size )   \u5212 - stroke Specifies the color to use when stroking a drawn shape. gm ( img.png ). stroke ( color   [,   width ])  \u8bbe\u7f6e\u8fb9\u7684\u5bbd\u5ea6 - strokeWidth Specifies the stroke width to use when stroking a drawn shape. gm ( img.png ). strokeWidth ( width )  \u8bbe\u7f6e\u5c5e\u6027 - setDraw Sets drawing properties. property can be either \"color\" or \"matte\". gm ( img.png ). setDraw ( property ,   x ,   y ,   method )", 
            "title": "\u57fa\u672c\u7ed8\u56fe"
        }, 
        {
            "location": "/drawing/example/", 
            "text": "// gm - Copyright Aaron Heckmann \naaron.heckmann+github@gmail.com\n (MIT Licensed)\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\n../\n)\n\n  \n,\n \ndir\n \n=\n \n__dirname\n \n+\n \n/imgs\n\n\n\ngm\n(\ndir\n \n+\n \n/original.png\n)\n\n  \n.\nblur\n(\n8\n,\n \n4\n)\n\n  \n.\nstroke\n(\nred\n,\n \n7\n)\n\n  \n.\nfill\n(\n#ffffffbb\n)\n\n  \n.\ndrawLine\n(\n20\n,\n \n10\n,\n \n50\n,\n \n40\n)\n\n  \n.\nfill\n(\n#2c2\n)\n\n  \n.\nstroke\n(\nblue\n,\n \n1\n)\n\n  \n.\ndrawRectangle\n(\n40\n,\n \n10\n,\n \n50\n,\n \n20\n)\n\n  \n.\ndrawRectangle\n(\n60\n,\n \n10\n,\n \n70\n,\n \n20\n,\n \n3\n)\n\n  \n.\ndrawArc\n(\n80\n,\n \n10\n,\n \n90\n,\n \n20\n,\n \n0\n,\n \n180\n)\n\n  \n.\ndrawEllipse\n(\n105\n,\n \n15\n,\n \n3\n,\n \n5\n)\n\n  \n.\ndrawCircle\n(\n125\n,\n \n15\n,\n \n120\n,\n \n15\n)\n\n  \n.\ndrawPolyline\n([\n140\n,\n \n10\n],\n \n[\n143\n,\n \n13\n],\n \n[\n145\n,\n \n13\n],\n \n[\n147\n,\n \n15\n],\n \n[\n145\n,\n \n17\n],\n \n[\n143\n,\n \n19\n])\n\n  \n.\ndrawPolygon\n([\n160\n,\n \n10\n],\n \n[\n163\n,\n \n13\n],\n \n[\n165\n,\n \n13\n],\n \n[\n167\n,\n \n15\n],\n \n[\n165\n,\n \n17\n],\n \n[\n163\n,\n \n19\n])\n\n  \n.\ndrawBezier\n([\n180\n,\n \n10\n],\n \n[\n183\n,\n \n13\n],\n \n[\n185\n,\n \n13\n],\n \n[\n187\n,\n \n15\n],\n \n[\n185\n,\n \n17\n],\n \n[\n183\n,\n \n19\n])\n\n  \n.\nfontSize\n(\n68\n)\n\n  \n.\nstroke\n(\n#efe\n,\n \n2\n)\n\n  \n.\nfill\n(\n#888\n)\n\n  \n.\ndrawText\n(\n-\n20\n,\n \n98\n,\n \ngraphics magick\n)\n\n  \n.\nwrite\n(\ndir\n \n+\n \n/drawing.png\n,\n \nfunction\n(\nerr\n){\n\n    \nif\n \n(\nerr\n)\n \nreturn\n \nconsole\n.\ndir\n(\narguments\n)\n\n    \nconsole\n.\nlog\n(\nthis\n.\noutname\n \n+\n \n created  :: \n \n+\n \narguments\n[\n3\n])\n\n  \n}\n\n\n)", 
            "title": "\u4e3e\u4f8b"
        }, 
        {
            "location": "/composite/", 
            "text": "\u5408\u5e76\n\n\nGraphicsMagick supports compositing one image on top of another. This is exposed through \ngm.composite()\n. Its first argument is an image path with the changes to the base image, and an optional mask image.\n\n\nCurrently, \ngm.composite()\n only accepts file paths.\n\n\ngm.composite(other [, mask])\n\n\n\n\n\ngm\n(\n/path/to/image.jpg\n)\n\n\n.\ncomposite\n(\n/path/to/second_image.jpg\n)\n\n\n.\ngeometry\n(\n+100+150\n)\n\n\n.\nwrite\n(\n/path/to/composite.png\n,\n \nfunction\n(\nerr\n)\n \n{\n\n    \nif\n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\nWritten composite image.\n);\n\n\n});", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/composite/#_1", 
            "text": "GraphicsMagick supports compositing one image on top of another. This is exposed through  gm.composite() . Its first argument is an image path with the changes to the base image, and an optional mask image.  Currently,  gm.composite()  only accepts file paths.  gm.composite(other [, mask])  gm ( /path/to/image.jpg )  . composite ( /path/to/second_image.jpg )  . geometry ( +100+150 )  . write ( /path/to/composite.png ,   function ( err )   { \n     if ( ! err )   console . log ( Written composite image. );  });", 
            "title": "\u5408\u5e76"
        }, 
        {
            "location": "/composite/example/", 
            "text": "gm\u7684\u5b9e\u73b0\n\n\n// composite\n\n\n\n/**\n\n\n * Composite images together using the `composite` command in graphicsmagick.\n\n\n *\n\n\n * gm(\n/path/to/image.jpg\n)\n\n\n * .composite(\n/path/to/second_image.jpg\n)\n\n\n * .geometry(\n+100+150\n)\n\n\n * .write(\n/path/to/composite.png\n, function(err) {\n\n\n *   if(!err) console.log(\nWritten composite image.\n);\n\n\n * });\n\n\n *\n\n\n * @param {String} other  Path to the image that contains the changes.\n\n\n * @param {String} [mask] Path to the image with opacity informtion. Grayscale.\n\n\n */\n\n\n\nmodule\n.\nexports\n \n=\n \nexports\n \n=\n \nfunction\n(\nproto\n)\n \n{\n\n    \nproto\n.\ncomposite\n \n=\n \nfunction\n(\nother\n,\n \nmask\n)\n \n{\n\n        \nthis\n.\nin\n(\nother\n);\n\n\n        \n// If the mask is defined, add it to the output.\n\n        \nif\n(\ntypeof\n \nmask\n \n!==\n \nundefined\n)\n\n            \nthis\n.\nout\n(\nmask\n);\n\n\n        \nthis\n.\nsubCommand\n(\ncomposite\n);\n\n\n        \nreturn\n \nthis\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\u56fe\u7247\u62fc\u63a5(mosaic) stackoverflow \u7b54\u6848\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\ngm\n);\n\n\n\ngm\n()\n\n  \n.\nin\n(\n-page\n,\n \n+0+0\n)\n\n  \n.\nin\n(\nbg.jpg\n)\n\n  \n.\nin\n(\n-page\n,\n \n+10+20\n)\n \n// location of smallIcon.jpg is x,y -\n 10, 20\n\n  \n.\nin\n(\nsmallIcon.jpg\n)\n\n  \n.\nmosaic\n()\n\n  \n.\nwrite\n(\ntesOutput.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n    \nif\n \n(\nerr\n)\n \nconsole\n.\nlog\n(\nerr\n);\n\n  \n});\n\n\n\n\n\n\u56fe\u7247\u5408\u6210(compose)\n\n\ngm\n()\n\n\n.\ncommand\n(\ncomposite\n)\n\n\n.\nin\n(\n-gravity\n,\n \ncenter\n)\n\n\n.\nin\n(\nchange_image_url\n)\n\n\n.\nin\n(\nbase_image_url\n)\n\n\n.\nwrite\n(\n \noutput_file\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n\n    \nconsole\n.\nlog\n(\n hooray! \n);\n\n  \nelse\n\n    \nconsole\n.\nlog\n(\nerr\n);\n\n\n});", 
            "title": "\u4ee3\u7801"
        }, 
        {
            "location": "/composite/example/#gm", 
            "text": "// composite  /**   * Composite images together using the `composite` command in graphicsmagick.   *   * gm( /path/to/image.jpg )   * .composite( /path/to/second_image.jpg )   * .geometry( +100+150 )   * .write( /path/to/composite.png , function(err) {   *   if(!err) console.log( Written composite image. );   * });   *   * @param {String} other  Path to the image that contains the changes.   * @param {String} [mask] Path to the image with opacity informtion. Grayscale.   */  module . exports   =   exports   =   function ( proto )   { \n     proto . composite   =   function ( other ,   mask )   { \n         this . in ( other ); \n\n         // If the mask is defined, add it to the output. \n         if ( typeof   mask   !==   undefined ) \n             this . out ( mask ); \n\n         this . subCommand ( composite ); \n\n         return   this ; \n     }  }", 
            "title": "gm\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/composite/example/#mosaic-stackoverflow", 
            "text": "var   gm   =   require ( gm );  gm () \n   . in ( -page ,   +0+0 ) \n   . in ( bg.jpg ) \n   . in ( -page ,   +10+20 )   // location of smallIcon.jpg is x,y -  10, 20 \n   . in ( smallIcon.jpg ) \n   . mosaic () \n   . write ( tesOutput.jpg ,   function   ( err )   { \n     if   ( err )   console . log ( err ); \n   });", 
            "title": "\u56fe\u7247\u62fc\u63a5(mosaic) stackoverflow \u7b54\u6848"
        }, 
        {
            "location": "/composite/example/#compose", 
            "text": "gm ()  . command ( composite )  . in ( -gravity ,   center )  . in ( change_image_url )  . in ( base_image_url )  . write (   output_file ,   function   ( err )   { \n   if   ( ! err ) \n     console . log (  hooray!  ); \n   else \n     console . log ( err );  });", 
            "title": "\u56fe\u7247\u5408\u6210(compose)"
        }, 
        {
            "location": "/ImageComparisons/", 
            "text": "\u6bd4\u8f83\n\n\nGraphicsmagicks \ncompare\n command is exposed through \ngm.compare()\n. This allows us to determine if two images can be considered \"equal\".\n\n\nCurrently \ngm.compare\n only accepts file paths.\n\n\ngm.compare(path1, path2 [, options], callback)\n\n\n\n\n\ngm\n.\ncompare\n(\n/path/to/image1.jpg\n,\n \n/path/to/another.png\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n,\n \npath1\n,\n \npath2\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nreturn\n \nhandle\n(\nerr\n);\n\n\n  \n// if the images were considered equal, `isEqual` will be true, otherwise, false.\n\n  \nconsole\n.\nlog\n(\nThe images were equal: %s\n,\n \nisEqual\n);\n\n\n  \n// to see the total equality returned by graphicsmagick we can inspect the `equality` argument.\n\n  \nconsole\n.\nlog\n(\nActual equality: %d\n,\n \nequality\n);\n\n\n  \n// inspect the raw output\n\n  \nconsole\n.\nlog\n(\nraw\n);\n\n\n  \n// print file paths\n\n  \nconsole\n.\nlog\n(\npath1\n,\n \npath2\n);\n\n\n})\n\n\n\n\n\nYou may wish to pass a custom tolerance threshold to increase or decrease the default level of \n0.4\n.\n\n\ngm\n.\ncompare\n(\n/path/to/image1.jpg\n,\n \n/path/to/another.png\n,\n \n1.2\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n)\n \n{\n\n  \n...\n\n\n})\n\n\n\n\n\nTo output a diff image, pass a configuration object to define the diff options and tolerance.\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nfile\n:\n \n/path/to/diff.png\n,\n\n  \nhighlightColor\n:\n \nyellow\n,\n\n  \ntolerance\n:\n \n0.02\n\n\n}\n\n\ngm\n.\ncompare\n(\n/path/to/image1.jpg\n,\n \n/path/to/another.png\n,\n \noptions\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n)\n \n{\n\n  \n...\n\n\n})\n\n\n\n\n\n\u56fe\u50cf\u6bd4\u8f83\n\n\nBoth GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().\n\n\nCurrently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.\n\n\nYour callback will be passed four arguments:\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n  \nconsole\n.\nlog\n(\nThe images are equal: %s\n,\n \nisEqual\n);\n\n  \nconsole\n.\nlog\n(\nActual equality: %d\n,\n \nequality\n)\n\n  \nconsole\n.\nlog\n(\nRaw output was: %j\n,\n \nraw\n);\n\n\n});\n\n\n\n\n\nYou can also output a diff image of the two images by passing a configuration object in place of the tolerance:\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nhighlightColor\n:\n \nyellow\n,\n \n// optional. Defaults to red\n\n  \nfile\n:\n \n./diff.png\n \n// required\n\n\n};\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \noptions\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n\n});", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/ImageComparisons/#_1", 
            "text": "Graphicsmagicks  compare  command is exposed through  gm.compare() . This allows us to determine if two images can be considered \"equal\".  Currently  gm.compare  only accepts file paths.  gm.compare(path1, path2 [, options], callback)  gm . compare ( /path/to/image1.jpg ,   /path/to/another.png ,   function   ( err ,   isEqual ,   equality ,   raw ,   path1 ,   path2 )   { \n   if   ( err )   return   handle ( err ); \n\n   // if the images were considered equal, `isEqual` will be true, otherwise, false. \n   console . log ( The images were equal: %s ,   isEqual ); \n\n   // to see the total equality returned by graphicsmagick we can inspect the `equality` argument. \n   console . log ( Actual equality: %d ,   equality ); \n\n   // inspect the raw output \n   console . log ( raw ); \n\n   // print file paths \n   console . log ( path1 ,   path2 );  })   You may wish to pass a custom tolerance threshold to increase or decrease the default level of  0.4 .  gm . compare ( /path/to/image1.jpg ,   /path/to/another.png ,   1.2 ,   function   ( err ,   isEqual )   { \n   ...  })   To output a diff image, pass a configuration object to define the diff options and tolerance.  var   options   =   { \n   file :   /path/to/diff.png , \n   highlightColor :   yellow , \n   tolerance :   0.02  }  gm . compare ( /path/to/image1.jpg ,   /path/to/another.png ,   options ,   function   ( err ,   isEqual ,   equality ,   raw )   { \n   ...  })", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/ImageComparisons/#_2", 
            "text": "Both GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().  Currently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.  Your callback will be passed four arguments:  gm . compare ( path1 ,   path2 ,   function   ( err ,   isEqual ,   equality ,   raw )   { \n   if   ( err )   throw   err ; \n   console . log ( The images are equal: %s ,   isEqual ); \n   console . log ( Actual equality: %d ,   equality ) \n   console . log ( Raw output was: %j ,   raw );  });   You can also output a diff image of the two images by passing a configuration object in place of the tolerance:  var   options   =   { \n   highlightColor :   yellow ,   // optional. Defaults to red \n   file :   ./diff.png   // required  };  gm . compare ( path1 ,   path2 ,   options ,   function   ( err )   { \n   if   ( err )   throw   err ;  });", 
            "title": "\u56fe\u50cf\u6bd4\u8f83"
        }, 
        {
            "location": "/UsingImagemagick/", 
            "text": "\u4f7f\u7528 IMAGEMAGICK\n\n\nSubclass \ngm\n \u6765\u542f\u7528 ImageMagick\n\n\nvar\n \nfs\n \n=\n \nrequire\n(\nfs\n)\n\n  \n,\n \ngm\n \n=\n \nrequire\n(\ngm\n).\nsubClass\n({\nimageMagick\n:\n \ntrue\n});\n\n\n\n// resize and remove EXIF profile data\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n240\n,\n \n240\n)\n\n\n...\n\n\n\n\n\nWe have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.\n\n\nvar\n \nimageMagick\n \n=\n \ngm\n.\nsubClass\n({\n \nimageMagick\n:\n \ntrue\n \n});\n\n\n\n\n\nimageMagick\n(\nimg.png\n).\nautoOrient\n().\nwrite\n(\n/path\n,\n \ncallback\n);\n\n\n\n\n\nIMAGEMAGICK OPTIONS\n\n\nUnlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:\n\n\nbrew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528IM"
        }, 
        {
            "location": "/UsingImagemagick/#imagemagick", 
            "text": "Subclass  gm  \u6765\u542f\u7528 ImageMagick  var   fs   =   require ( fs ) \n   ,   gm   =   require ( gm ). subClass ({ imageMagick :   true });  // resize and remove EXIF profile data  gm ( /path/to/my/img.jpg )  . resize ( 240 ,   240 )  ...   We have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.  var   imageMagick   =   gm . subClass ({   imageMagick :   true   });   imageMagick ( img.png ). autoOrient (). write ( /path ,   callback );   IMAGEMAGICK OPTIONS  Unlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:  brew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528 IMAGEMAGICK"
        }, 
        {
            "location": "/Extending/", 
            "text": "\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u6269\u5c55 gm \u662f\u5f88\u5bb9\u6613\u7684. \u6240\u6709\u5fc5\u8981\u7684\u662f\u5c06\u4f60\u7684\u65b9\u6cd5\u6dfb\u52a0\u5230 \ngm.prototype\n. \u4f8b\u5982, \u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u68d5\u8910\u8272\u7684\u6269\u5c55\u540d\uff0c\u5b83\u4f1a\u7ed9\u4efb\u4f55\u56fe\u50cf\u4e00\u4e2a\u5f88\u597d\u7684\u201c\nsepia\n\u201d.\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\ngm\n)\n\n\ngm\n.\nprototype\n.\nsepia\n \n=\n \nfunction\n(){\n\n  \nthis\n.\nmodulate\n(\n115\n,\n \n0\n,\n \n100\n).\ncolorize\n(\n7\n,\n \n21\n,\n \n50\n)\n\n  \nreturn\n \nthis\n\n\n}\n\n\n\n\n\n\u563f\uff0c\u770b\u8d77\u6765\u5f88\u7b80\u5355\u5427\uff1f \u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a\n\n\ngm\n(\npath/to/img.png\n)\n\n  \n.\nsepia\n()\n\n  \n.\nwrite\n(\niLoveSepiaAndSoShouldYou.png\n,\n \nfunction\n(\nerr\n){\n \n...\n \n})\n\n\n\n\n\nSo let's take a looky at what's going on here. Within the sepia method, \nthis\n refers to the current instance of gm so you have access to all of the other gm methods and extensions. We're just utilizing two built in \ngm\n methods here to get the effect we want. Notice also that we return \nthis\n, which let's us retain the ability to continue chaining methods. We could return a little more elegantly too since, by convention, every method returns \nthis\n:\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\ngm\n)\n\n\ngm\n.\nprototype\n.\nsepia\n \n=\n \nfunction\n(){\n\n  \nreturn\n \nthis\n.\nmodulate\n(\n115\n,\n \n0\n,\n \n100\n).\ncolorize\n(\n7\n,\n \n21\n,\n \n50\n)\n\n\n}", 
            "title": "\u6269\u5c55"
        }, 
        {
            "location": "/GraphicsMagick/", 
            "text": "GraphicsMagick \u56fe\u50cf\u5904\u7406\u7cfb\u7edf\n\n\n\n\n\n\n\n\n\u7248\u672c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\n\u5f53\u524d\u7248\u672c\n\n\n1.3.27a (\u91ca\u653e December 11, 2017) \n\u4e0b\u8f7d\u7248\u672c\n\n\n\n\n\n\n\u5f00\u53d1\u5feb\u7167\n\n\n(\u7ecf\u5e38\u66f4\u65b0) \n\u4e0b\u8f7d\u5f00\u53d1\u5feb\u7167\n\n\n\n\n\n\n\u6d3b\u8dc3\u5e93\n\n\n(\u7ecf\u5e38\u66f4\u65b0) \n\u67e5\u770b\u6d3b\u8dc3\u5e93\n\n\n\n\n\n\n\n\n\u67e5\u770b \nhttp://www.GraphicsMagick.org/\n \u9875\u9762\u83b7\u53d6\u6700\u65b0\u7248\u672c.\n\n\nGraphicsMagick is the swiss army knife of image processing. Comprised of 267K physical lines (according to David A. Wheeler's SLOCCount) of source code in the base package (or 1,225K including 3rd party libraries) it provides a robust and efficient collection of tools and libraries which support reading, writing, and manipulating an image in over 88 major formats including important formats like DPX, GIF, JPEG, JPEG-2000, PNG, PDF, PNM, and TIFF.\n\n\nImage processing is multi-threaded (see the multi-thread benchmark results) using OpenMP so that CPU-bound tasks scale linearly as processor cores are added. OpenMP support requires compilation with GCC 4.2 (or later), or use of any C compiler supporting at least the OpenMP 2.0 specification.\n\n\nGraphicsMagick is quite portable, and compiles under almost every general purpose operating system that runs on 32-bit or 64-bit CPUs. GraphicsMagick is available for virtually any Unix or Unix-like system, including Linux. It also runs under Windows 2000 and later (Windows 2000, XP, Vista, 7, 8.X, 10), and MacOS-X.\n\n\nGraphicsMagick supports huge images and has been tested with gigapixel-size images. GraphicsMagick can create new images on the fly, making it suitable for building dynamic Web applications. GraphicsMagick may be used to resize, rotate, sharpen, color reduce, or add special effects to an image and save the result in the same or different image format. Image processing operations are available from the command line, as well as through C, C++, Lua, Perl, PHP, Python, Tcl, Ruby, Windows .NET, or Windows COM programming interfaces. With some modification, language extensions for ImageMagick may be used.\n\n\nGraphicsMagick is originally derived from ImageMagick 5.5.2 as of November 2002 but has been completely independent of the ImageMagick project since then. Since the fork from ImageMagick many improvements have been made (see NEWS) by many authors using an open development model but without breaking the API or utilities operation.\n\n\nHere are some reasons to prefer GraphicsMagick over ImageMagick:\n\n\n\n\nGM is more efficient so it gets the job done faster using fewer resources.\n\n\nGM is much smaller and lighter (3-5X smaller installation footprint).\n\n\nGM is used to process billions of files at the world's largest photo sites (e.g. Flickr and Etsy).\n\n\nGM does not conflict with other installed software.\n\n\nGM suffers from fewer security issues and exploits.\n\n\nGM valgrind's 100% clean (memcheck and helgrind).\n\n\nGM passes rigorous memory error testing using ASan_.\n\n\nGM comes with a comprehensive manual page.\n\n\nGM provides API and ABI stability and managed releases that you can count on.\n\n\nGM provides detailed yet comprehensible ChangeLog and NEWS files.\n\n\nGM is available for free, and may be used to support both open and proprietary applications.\n\n\nGM is distributed under an X11-style license (MIT License), approved by the Open Source Initiative, recommended for use by the OSSCC, and compatible with the GNU GPL.\n\n\nGM source code is managed in Mercurial, a distributed source control management tool which supports management of local changes.\n\n\nGM has 0.00 (zero) defects per 1000 lines of code (293,341 total lines included) according to Coverity analysis on May 25, 2015.\n\n\nGM developers contribute to other free projects for the public good.\nGraphicsMagick is copyrighted by the GraphicsMagick Group as well as many others.\n\n\n\n\nHere are just a few examples of what GraphicsMagick can do:\n\n\n\n\nConvert an image from one format to another (e.g. TIFF to JPEG)\n\n\nResize, rotate, sharpen, color reduce, or add special effects to an image\n\n\nCreate a montage of image thumbnails\n\n\nCreate a transparent image suitable for use on the Web\n\n\nCompare two images\n\n\nTurn a group of images into a GIF animation sequence\n\n\nCreate a composite image by combining several separate images\n\n\nDraw shapes or text on an image\n\n\nDecorate an image with a border or frame\n\n\nDescribe the format and characteristics of an image", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/#graphicsmagick", 
            "text": "\u7248\u672c  \u8bf4\u660e      \u5f53\u524d\u7248\u672c  1.3.27a (\u91ca\u653e December 11, 2017)  \u4e0b\u8f7d\u7248\u672c    \u5f00\u53d1\u5feb\u7167  (\u7ecf\u5e38\u66f4\u65b0)  \u4e0b\u8f7d\u5f00\u53d1\u5feb\u7167    \u6d3b\u8dc3\u5e93  (\u7ecf\u5e38\u66f4\u65b0)  \u67e5\u770b\u6d3b\u8dc3\u5e93     \u67e5\u770b  http://www.GraphicsMagick.org/  \u9875\u9762\u83b7\u53d6\u6700\u65b0\u7248\u672c.  GraphicsMagick is the swiss army knife of image processing. Comprised of 267K physical lines (according to David A. Wheeler's SLOCCount) of source code in the base package (or 1,225K including 3rd party libraries) it provides a robust and efficient collection of tools and libraries which support reading, writing, and manipulating an image in over 88 major formats including important formats like DPX, GIF, JPEG, JPEG-2000, PNG, PDF, PNM, and TIFF.  Image processing is multi-threaded (see the multi-thread benchmark results) using OpenMP so that CPU-bound tasks scale linearly as processor cores are added. OpenMP support requires compilation with GCC 4.2 (or later), or use of any C compiler supporting at least the OpenMP 2.0 specification.  GraphicsMagick is quite portable, and compiles under almost every general purpose operating system that runs on 32-bit or 64-bit CPUs. GraphicsMagick is available for virtually any Unix or Unix-like system, including Linux. It also runs under Windows 2000 and later (Windows 2000, XP, Vista, 7, 8.X, 10), and MacOS-X.  GraphicsMagick supports huge images and has been tested with gigapixel-size images. GraphicsMagick can create new images on the fly, making it suitable for building dynamic Web applications. GraphicsMagick may be used to resize, rotate, sharpen, color reduce, or add special effects to an image and save the result in the same or different image format. Image processing operations are available from the command line, as well as through C, C++, Lua, Perl, PHP, Python, Tcl, Ruby, Windows .NET, or Windows COM programming interfaces. With some modification, language extensions for ImageMagick may be used.  GraphicsMagick is originally derived from ImageMagick 5.5.2 as of November 2002 but has been completely independent of the ImageMagick project since then. Since the fork from ImageMagick many improvements have been made (see NEWS) by many authors using an open development model but without breaking the API or utilities operation.  Here are some reasons to prefer GraphicsMagick over ImageMagick:   GM is more efficient so it gets the job done faster using fewer resources.  GM is much smaller and lighter (3-5X smaller installation footprint).  GM is used to process billions of files at the world's largest photo sites (e.g. Flickr and Etsy).  GM does not conflict with other installed software.  GM suffers from fewer security issues and exploits.  GM valgrind's 100% clean (memcheck and helgrind).  GM passes rigorous memory error testing using ASan_.  GM comes with a comprehensive manual page.  GM provides API and ABI stability and managed releases that you can count on.  GM provides detailed yet comprehensible ChangeLog and NEWS files.  GM is available for free, and may be used to support both open and proprietary applications.  GM is distributed under an X11-style license (MIT License), approved by the Open Source Initiative, recommended for use by the OSSCC, and compatible with the GNU GPL.  GM source code is managed in Mercurial, a distributed source control management tool which supports management of local changes.  GM has 0.00 (zero) defects per 1000 lines of code (293,341 total lines included) according to Coverity analysis on May 25, 2015.  GM developers contribute to other free projects for the public good.\nGraphicsMagick is copyrighted by the GraphicsMagick Group as well as many others.   Here are just a few examples of what GraphicsMagick can do:   Convert an image from one format to another (e.g. TIFF to JPEG)  Resize, rotate, sharpen, color reduce, or add special effects to an image  Create a montage of image thumbnails  Create a transparent image suitable for use on the Web  Compare two images  Turn a group of images into a GIF animation sequence  Create a composite image by combining several separate images  Draw shapes or text on an image  Decorate an image with a border or frame  Describe the format and characteristics of an image", 
            "title": "GraphicsMagick \u56fe\u50cf\u5904\u7406\u7cfb\u7edf"
        }, 
        {
            "location": "/GraphicsMagick/Download/", 
            "text": "GraphicsMagick \u4e0b\u8f7d\n\n\n\n\nFtp Site Organization\n\n\nDownload Sites\n\n\n\n\nThe source distribution of GraphicsMagick as well as pre-compiled binaries are available at the sites listed here (unless otherwise noted). At the moment, the fastest way to obtain formal releases is from the SourceForge Download page since SourceForge has lots of bandwidth, and many mirror sites. Snapshot packages should usually be retrieved from the GraphicsMagick FTP site or one of its mirrors. There are mirrors of the ftp site in Czechoslovakia and Poland.\n\n\nFtp Site Organization\n\n\nThe organization of the GraphicsMagick directory on ftp sites is as follows:\n\n\nGraphicsMagick FTP\n\n\nContains the core GraphicsMagick sources in a file named similar to GraphicsMagick-1.3.tar.bz2, GraphicsMagick-1.3.tar.gz, or GraphicsMagick-1.3.tar.xz. These core sources are sufficient to compile a minimal GraphicsMagick on a Unix system (including MacOS-X), or under the Cygwin and MinGW environments for Windows. Additional development packages need to be installed in advance to support formats like JPEG and PNG.\n\n\ndelegates\n\n\nAdd on third-party libraries and applications which extend the formats supported by GraphicsMagick may be obtained from this directory. Windows users can usually ignore the contents of this directory since all common delegates are included in the Windows source and binaries packages.\n\n\nlinux\n\n\nLinux source RPM (SRPM) packages for Red Hat Linux, other Linux systems, or any system with RPM installed, may be found here.\n\n\nsnapshots\n\n\nSnapshots (between releases) copies of GraphicsMagick may be found here. New snapshots may be cut every few days as time permits. Quality may vary (but is usually excellent).\n\n\nwindows\n\n\nInstallable binary packages and the extended source code package for use with Microsoft Visual C++ (including configured delegates and a Visual C++ workspace) may be found here.\n\n\nDownload Sites\n\n\nHere are some known download sites for GraphicsMagick:\n\n\nSourceForge file download (http protocol)\n\n\nCzech ftp mirror (http protocol)\n\n\nPolish ftp mirror via ftp (ftp protocol)\n\n\nPolish ftp mirror via http (http protocol)", 
            "title": "\u4e0b\u8f7d"
        }, 
        {
            "location": "/GraphicsMagick/Download/#graphicsmagick", 
            "text": "Ftp Site Organization  Download Sites   The source distribution of GraphicsMagick as well as pre-compiled binaries are available at the sites listed here (unless otherwise noted). At the moment, the fastest way to obtain formal releases is from the SourceForge Download page since SourceForge has lots of bandwidth, and many mirror sites. Snapshot packages should usually be retrieved from the GraphicsMagick FTP site or one of its mirrors. There are mirrors of the ftp site in Czechoslovakia and Poland.", 
            "title": "GraphicsMagick \u4e0b\u8f7d"
        }, 
        {
            "location": "/GraphicsMagick/Download/#ftp-site-organization", 
            "text": "The organization of the GraphicsMagick directory on ftp sites is as follows:", 
            "title": "Ftp Site Organization"
        }, 
        {
            "location": "/GraphicsMagick/Download/#graphicsmagick-ftp", 
            "text": "Contains the core GraphicsMagick sources in a file named similar to GraphicsMagick-1.3.tar.bz2, GraphicsMagick-1.3.tar.gz, or GraphicsMagick-1.3.tar.xz. These core sources are sufficient to compile a minimal GraphicsMagick on a Unix system (including MacOS-X), or under the Cygwin and MinGW environments for Windows. Additional development packages need to be installed in advance to support formats like JPEG and PNG.", 
            "title": "GraphicsMagick FTP"
        }, 
        {
            "location": "/GraphicsMagick/Download/#delegates", 
            "text": "Add on third-party libraries and applications which extend the formats supported by GraphicsMagick may be obtained from this directory. Windows users can usually ignore the contents of this directory since all common delegates are included in the Windows source and binaries packages.", 
            "title": "delegates"
        }, 
        {
            "location": "/GraphicsMagick/Download/#linux", 
            "text": "Linux source RPM (SRPM) packages for Red Hat Linux, other Linux systems, or any system with RPM installed, may be found here.", 
            "title": "linux"
        }, 
        {
            "location": "/GraphicsMagick/Download/#snapshots", 
            "text": "Snapshots (between releases) copies of GraphicsMagick may be found here. New snapshots may be cut every few days as time permits. Quality may vary (but is usually excellent).", 
            "title": "snapshots"
        }, 
        {
            "location": "/GraphicsMagick/Download/#windows", 
            "text": "Installable binary packages and the extended source code package for use with Microsoft Visual C++ (including configured delegates and a Visual C++ workspace) may be found here.", 
            "title": "windows"
        }, 
        {
            "location": "/GraphicsMagick/Download/#download-sites", 
            "text": "Here are some known download sites for GraphicsMagick:  SourceForge file download (http protocol)  Czech ftp mirror (http protocol)  Polish ftp mirror via ftp (ftp protocol)  Polish ftp mirror via http (http protocol)", 
            "title": "Download Sites"
        }, 
        {
            "location": "/GraphicsMagick/Install/", 
            "text": "\u5b89\u88c5 GraphicsMagick\n\n\n\n\n\u6267\u884c\u6458\u8981\n\n\n\u53ef\u7528\u6027\n\n\n\u6587\u6863\n\n\n\u5b89\u88c5\n\n\n\u9644\u52a0\u7a0b\u5e8f\u5e93\u548c\u7a0b\u5e8f\n\n\n\n\n\u6267\u884c\u6458\u8981\n\n\nGraphicsMagick provides a comprehensive collection of utilities, programming interfaces, and GUIs, to support file format conversion, image processing, and 2D vector rendering.\n\n\nGraphicsMagick is originally based on ImageMagick from ImageMagick Studio (which was originally written by John Cristy at Dupont). The goal of GraphicsMagick is to provide the highest quality product possible while encouraging open and active participation from all interested developers. The GraphicsMagick usage license is designed to allow it to be used for any application, including proprietary or GPLed applications. Please see the file Copyright.txt for the GraphicsMagick licence.\n\n\n\u53ef\u7528\u6027\n\n\nThe master ftp site for GraphicsMagick distributions is ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/. Bandwidth on this site is very limited, so it is recommended to download from SourceForge at http://sourceforge.net/projects/graphicsmagick/files/ if possible.\n\n\nGraphicsMagick is a continual work in progress. The very latest code is available via the Mercurial distributed source control management tool (https://www.mercurial-scm.org/). GraphicsMagick may be retrieved via the following command:\n\n\nhg clone http://hg.code.sf.net/p/graphicsmagick/code/ GM\nMercurial provides a complete stand-alone repository which contains the full history of the GraphicsMagick project. You may use the cloned repository for your own purposes related to GraphicsMagick (e.g. manage local GraphicsMagick changes), and can easily pull GraphicsMagick updates from the main repository whenever you like.\n\n\n\u6587\u6863\n\n\nOpen the file index.html in a web browser, or refer to the gm(1) manual page. Also read the GraphicsMagick frequently asked questions in the file www/FAQ.html.\n\n\n\u5b89\u88c5\n\n\nGraphicsMagick may be compiled from source code for virtually any modern Unix system (including Linux and MacOS X) and Microsoft Windows. Installation instructions may be found in the following files (or their HTML equivalents):\n\n\n\n\nUnix / Linux / *BSD / MacOS-X / Cygwin / MinGW:\n  Installation on Unix-like systems\n\n\nMicrosoft Windows (Via \"setup\" style installer or from source code):\n  Installation on Microsoft Windows\n\n\n\n\n\u9644\u52a0\u7a0b\u5e8f\u5e93\u548c\u7a0b\u5e8f\n\n\nTo further enhance the capabilities of GraphicsMagick, you may want to get these programs or libraries. Note that these packages are already integrated into the GraphicsMagick Mercurial repository for use when building under Microsoft Windows:\n\n\nGraphicsMagick requires the BZLIB library from\n\n\nhttp://www.bzip.org/\n\n\nto read and write BZip compressed MIFF images.\n\n\nGraphicsMagick requires 'ralcgm' from\n\n\nhttp://www.agocg.ac.uk/train/cgm/ralcgm.htm\n\n\nto read the Computer Graphics Metafile (CGM) image format. You also need Ghostscript and Ghostscript Fonts (see below).\n\n\nGraphicsMagick requires 'dcraw' from\n\n\nhttp://www.cybercom.net/~dcoffin/dcraw/\n\n\nto read raw images from digital cameras. Dcraw is invoked automatically when used to read files using a common RAW file format extension.\n\n\nGraphicsMagick requires 'fig2dev' provided in the transfig package from\n\n\nhttp://www.xfig.org/\n\n\nto read the Fig image format. Ghostscript and Ghostscript Fonts (see below) are also required.\n\n\nGraphicsMagick requires the FreeType software, version 2.0 or above, available as\n\n\nhttp://www.freetype.org/\n\n\nto annotate with TrueType and Postscript Type 1 fonts.\n\n\nGraphicsMagick requires Ghostscript software (version 9.04 recommended) available from\n\n\nhttp://pages.cs.wisc.edu/~ghost/\n\n\nor\n\n\nhttp://sourceforge.net/projects/ghostscript/\n\n\nto read the Postscript or the Portable Document Format (PDF).\n\n\nGhostscript Fonts are available from\n\n\nhttps://sourceforge.net/projects/gs-fonts/\n\n\nGhostscript is available for use under both free (GPL) and commercial licenses. We are not lawyers so we can not provide advice as to when the commercial license from Artifex is required. Please make sure that you are aware of Ghostscript licencing and usage terms if you plan to use it in some sort of commercial situation.\n\n\nGhostscript (release 7.0 and later) may optionally install a library (libgs) under Linux. If this library is installed, GraphicsMagick may be configured to use it. We do NOT recommend using this library under Unix type systems. The Ghostscript library does not support concurrency since only one instance of the interpreter is available. Unix systems will obtain better performance from executing Ghostscript as an external process since then multiple interpreters may execute at once on multiple CPU cores.\n\n\nIf the Ghostscript library is used, then please be aware that Ghostscript provides its own modified version of libjpeg and libJasper while GraphicsMagick will be using these libraries as provided with the system. If Ghostscript is not using the same libraries, then identically named symbols may be used from the wrong code, causing confusion or a program crash. If conflicts cause JPEG to fail (JPEG returns an error regarding expected structure sizes), it may be necessary to use Ghostscript's copy of libjpeg for GraphicsMagick, and all delegate libraries which depend on libjpeg, or convince Ghostscript to build against an unmodified installed JPEG library (and lose compatibility with some Postscript files).\n\n\nGraphicsMagick requires hp2xx available from\n\n\nhttp://www.gnu.org/software/hp2xx/hp2xx.html\n\n\nto read the HP-GL image format. Note that HPGL is a plotter file format. HP printers usually accept PCL format rather than HPGL format. Ghostscript (see above) is also required.\n\n\nGraphicsMagick requires the lcms library (2.0 or later) available from\n\n\nhttp://www.littlecms.com/\n\n\nto perform ICC CMS color management.\n\n\nGraphicsMagick requires Graphviz available from\n\n\nhttp://www.graphviz.org/\n\n\nto read Graphvis 'dot' digraph files (with extension dot). Ghostscript (see above) is also required.\n\n\nGraphicsMagick requires html2ps available from\n\n\nhttp://user.it.uu.se/~jan/html2ps.html\n\n\nto rasterize HTML files. Ghostscript (see above) is also required.\n\n\nGraphicsMagick requires the JBIG-Kit software available via HTTP from\n\n\nhttp://www.cl.cam.ac.uk/~mgk25/jbigkit/\n\n\nto read and write the JBIG image format.\n\n\nGraphicsMagick requires the WebP library version 0.1.99 (or later) available via HTTPS from\n\n\nhttps://developers.google.com/speed/webp/\n\n\nto read and write the WebP image format.\n\n\nGraphicsMagick requires the Independent JPEG Group's software available from\n\n\nhttp://www.ijg.org/\n\n\nto read and write the JPEG v1 image format.\n\n\nApply this JPEG patch to Independent JPEG Group's (6b release!) source distribution if you want to read lossless jpeg-encoded DICOM (medical) images:\n\n\nftp://ftp.graphicsmagick.org/pub/GraphicsMagick/delegates/ljpeg-6b.tar.gz\n\n\nUse of lossless JPEG is not encouraged. Unless you have a requirement to read lossless jpeg-encoded DICOM images, please disregard the patch.\n\n\nGraphicsMagick requires the JasPer Project's JasPer library version 1.701.0 (or later) available via http from\n\n\nhttp://www.ece.uvic.ca/~mdadams/jasper/\n\n\nto read and write the JPEG-2000 format. Please note that JasPer 1.900.1 may have a problem when used with GraphicsMagick's modules build. To solve this problem, edit the file src/libjasper/base/jas_init.c and comment out the line which invokes atexit().\n\n\nOn Unix-type systems, Windows/MinGW, and Windows/Cygwin, GraphicsMagick requires libltdl from libtool in order to support building GraphicsMagick with dynamically loadable modules. Libtool is available via anonymous FTP from\n\n\nftp://ftp.gnu.org/pub/gnu/libtool/\n\n\nGraphicsMagick requires the MPEG utilities from the MPEG Software Simulation Group, which are available via anonymous FTP as\n\n\nftp://ftp.GraphicsMagick.org/pub/GraphicsMagick/delegates/mpeg2vidcodec_v12.tar.gz\n\n\nto read or write the MPEG image format.\n\n\nGraphicsMagick requires the LIBPNG library, version 1.0 or above, from\n\n\nhttp://www.libpng.org/pub/png/pngcode.html\n\n\nto read or write the PNG, MNG, or JNG image formats. LIBPNG depends upon the ZLIB library (see below).\n\n\nGraphicsMagick requires Sam Leffler's TIFF software available via HTTP at\n\n\nhttp://www.simplesystems.org/libtiff/\n\n\nto read the TIFF image format. It in turn optionally requires the JPEG and ZLIB libraries. Libtiff 3.8.2 or later is recommended.\n\n\nGraphicsMagick may optionally use the TRIO library from\n\n\nhttp://sourceforge.net/projects/ctrio/\n\n\nto substitute for the vsnprintf function when the operating system does not provide one. Older operating systems (e.g. Solaris 2.5) may not provide a vsnprintf function. If vsnprintf (or the TRIO replacement) is not used, then vsprintf is used instead, which decreases the security of GraphicsMagick due to possible buffer overrun exploits.\n\n\nGraphicsMagick may optionally use the umem memory allocation library which is included in Sun's Solaris operating system or available from\n\n\nhttps://labs.omniti.com/trac/portableumem\n\n\nto provide enhanced versions of the standard memory allocation facilities. Use of umem may improve performance for multi-threaded programs and provides access to debugging features that detect memory leaks, buffer overruns, multiple frees, use of uninitialized data, use of freed data, and many other common programming errors.\n\n\nGraphicsMagick requires libwmflite from libwmf 0.2.5 (or later) from\n\n\nhttp://sourceforge.net/projects/wvware/\n\n\nto render files in the Windows Meta File (WMF) metafile format (16-bit WMF files only, not 32-bit \"EMF\"). This is the format commonly used for Windows clipart (available on CD at your local computer or technical book store). WMF support requires the FreeType 2 library in order to render TrueType and Postscript fonts.\n\n\nWhile GraphicsMagick uses the libwmflite (parser) component of the libwmf package which does not depend on any special libraries, the libwmf package as a whole depends on FreeType 2 and either the xmlsoft libxml, or expat libraries. Since GraphicsMagick already uses libxml (for reading SVG and to retrieve files via HTTP or FTP), it is recommended that the options '--without-expat --with-xml' be supplied to libwmf's configure script. If the other features of libwmf are not needed, then the '--disable-heavy' option may be used to only build libwmflite.\n\n\nGraphicsMagick's WMF renderer provides some of the finest WMF rendering available due its use of antialiased drawing algorithms. You may select a background color or texture image to render on. For example, \"-background '#ffffffff'\" renders on a transparent background while \"-texture plasma:fractal\" renders on a fractal image.\n\n\nA free set of Microsoft Windows fonts may be retrieved from http://sourceforge.net/projects/corefonts/. Note that the license for these fonts requires that they be distributed in the original .exe form, but the Linux folks have found ways to deal with that on non-Windows systems.\n\n\nGraphicsMagick requires an X server for the 'display', 'animate', and 'import' functions to work properly. Unix systems usually provide an X server as part of their standard installation. For MacOS-X, X11 is a system install time option.\n\n\nA free X server for Microsoft Windows is included as part of Cygwin and may be selected from the Cygwin installer. Cygwin is available from\n\n\nhttp://www.cygwin.com/\n\n\nThere is a nearly free X server available for Windows and Macintosh at\n\n\nhttp://www.microimages.com/downloads/mix/\n\n\nGraphicsMagick requires libxml2 available from\n\n\nhttp://xmlsoft.org/\n\n\nto read the SVG image format and to retrieve files from over a network via FTP and HTTP.\n\n\nGraphicsMagick requires the liblzma library from XZ Utils available from\n\n\nhttp://www.tukaani.org/xz/\n\n\nto support TIFF with LZMA compression and future LZMA-compression features (yet to be developed). The utilities from this package are also necessary in order to decompress GraphicsMagick packages distributed with \".xz\" or \".lzma\" extensions.\n\n\nGraphicsMagick requires the ZLIB library from\n\n\nhttp://www.zlib.net/\n\n\nto read or write the PNG or Zip compressed MIFF images.", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/GraphicsMagick/Install/#graphicsmagick", 
            "text": "\u6267\u884c\u6458\u8981  \u53ef\u7528\u6027  \u6587\u6863  \u5b89\u88c5  \u9644\u52a0\u7a0b\u5e8f\u5e93\u548c\u7a0b\u5e8f", 
            "title": "\u5b89\u88c5 GraphicsMagick"
        }, 
        {
            "location": "/GraphicsMagick/Install/#_1", 
            "text": "GraphicsMagick provides a comprehensive collection of utilities, programming interfaces, and GUIs, to support file format conversion, image processing, and 2D vector rendering.  GraphicsMagick is originally based on ImageMagick from ImageMagick Studio (which was originally written by John Cristy at Dupont). The goal of GraphicsMagick is to provide the highest quality product possible while encouraging open and active participation from all interested developers. The GraphicsMagick usage license is designed to allow it to be used for any application, including proprietary or GPLed applications. Please see the file Copyright.txt for the GraphicsMagick licence.", 
            "title": "\u6267\u884c\u6458\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Install/#_2", 
            "text": "The master ftp site for GraphicsMagick distributions is ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/. Bandwidth on this site is very limited, so it is recommended to download from SourceForge at http://sourceforge.net/projects/graphicsmagick/files/ if possible.  GraphicsMagick is a continual work in progress. The very latest code is available via the Mercurial distributed source control management tool (https://www.mercurial-scm.org/). GraphicsMagick may be retrieved via the following command:  hg clone http://hg.code.sf.net/p/graphicsmagick/code/ GM\nMercurial provides a complete stand-alone repository which contains the full history of the GraphicsMagick project. You may use the cloned repository for your own purposes related to GraphicsMagick (e.g. manage local GraphicsMagick changes), and can easily pull GraphicsMagick updates from the main repository whenever you like.", 
            "title": "\u53ef\u7528\u6027"
        }, 
        {
            "location": "/GraphicsMagick/Install/#_3", 
            "text": "Open the file index.html in a web browser, or refer to the gm(1) manual page. Also read the GraphicsMagick frequently asked questions in the file www/FAQ.html.", 
            "title": "\u6587\u6863"
        }, 
        {
            "location": "/GraphicsMagick/Install/#_4", 
            "text": "GraphicsMagick may be compiled from source code for virtually any modern Unix system (including Linux and MacOS X) and Microsoft Windows. Installation instructions may be found in the following files (or their HTML equivalents):   Unix / Linux / *BSD / MacOS-X / Cygwin / MinGW:\n  Installation on Unix-like systems  Microsoft Windows (Via \"setup\" style installer or from source code):\n  Installation on Microsoft Windows", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/GraphicsMagick/Install/#_5", 
            "text": "To further enhance the capabilities of GraphicsMagick, you may want to get these programs or libraries. Note that these packages are already integrated into the GraphicsMagick Mercurial repository for use when building under Microsoft Windows:  GraphicsMagick requires the BZLIB library from  http://www.bzip.org/  to read and write BZip compressed MIFF images.  GraphicsMagick requires 'ralcgm' from  http://www.agocg.ac.uk/train/cgm/ralcgm.htm  to read the Computer Graphics Metafile (CGM) image format. You also need Ghostscript and Ghostscript Fonts (see below).  GraphicsMagick requires 'dcraw' from  http://www.cybercom.net/~dcoffin/dcraw/  to read raw images from digital cameras. Dcraw is invoked automatically when used to read files using a common RAW file format extension.  GraphicsMagick requires 'fig2dev' provided in the transfig package from  http://www.xfig.org/  to read the Fig image format. Ghostscript and Ghostscript Fonts (see below) are also required.  GraphicsMagick requires the FreeType software, version 2.0 or above, available as  http://www.freetype.org/  to annotate with TrueType and Postscript Type 1 fonts.  GraphicsMagick requires Ghostscript software (version 9.04 recommended) available from  http://pages.cs.wisc.edu/~ghost/  or  http://sourceforge.net/projects/ghostscript/  to read the Postscript or the Portable Document Format (PDF).  Ghostscript Fonts are available from  https://sourceforge.net/projects/gs-fonts/  Ghostscript is available for use under both free (GPL) and commercial licenses. We are not lawyers so we can not provide advice as to when the commercial license from Artifex is required. Please make sure that you are aware of Ghostscript licencing and usage terms if you plan to use it in some sort of commercial situation.  Ghostscript (release 7.0 and later) may optionally install a library (libgs) under Linux. If this library is installed, GraphicsMagick may be configured to use it. We do NOT recommend using this library under Unix type systems. The Ghostscript library does not support concurrency since only one instance of the interpreter is available. Unix systems will obtain better performance from executing Ghostscript as an external process since then multiple interpreters may execute at once on multiple CPU cores.  If the Ghostscript library is used, then please be aware that Ghostscript provides its own modified version of libjpeg and libJasper while GraphicsMagick will be using these libraries as provided with the system. If Ghostscript is not using the same libraries, then identically named symbols may be used from the wrong code, causing confusion or a program crash. If conflicts cause JPEG to fail (JPEG returns an error regarding expected structure sizes), it may be necessary to use Ghostscript's copy of libjpeg for GraphicsMagick, and all delegate libraries which depend on libjpeg, or convince Ghostscript to build against an unmodified installed JPEG library (and lose compatibility with some Postscript files).  GraphicsMagick requires hp2xx available from  http://www.gnu.org/software/hp2xx/hp2xx.html  to read the HP-GL image format. Note that HPGL is a plotter file format. HP printers usually accept PCL format rather than HPGL format. Ghostscript (see above) is also required.  GraphicsMagick requires the lcms library (2.0 or later) available from  http://www.littlecms.com/  to perform ICC CMS color management.  GraphicsMagick requires Graphviz available from  http://www.graphviz.org/  to read Graphvis 'dot' digraph files (with extension dot). Ghostscript (see above) is also required.  GraphicsMagick requires html2ps available from  http://user.it.uu.se/~jan/html2ps.html  to rasterize HTML files. Ghostscript (see above) is also required.  GraphicsMagick requires the JBIG-Kit software available via HTTP from  http://www.cl.cam.ac.uk/~mgk25/jbigkit/  to read and write the JBIG image format.  GraphicsMagick requires the WebP library version 0.1.99 (or later) available via HTTPS from  https://developers.google.com/speed/webp/  to read and write the WebP image format.  GraphicsMagick requires the Independent JPEG Group's software available from  http://www.ijg.org/  to read and write the JPEG v1 image format.  Apply this JPEG patch to Independent JPEG Group's (6b release!) source distribution if you want to read lossless jpeg-encoded DICOM (medical) images:  ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/delegates/ljpeg-6b.tar.gz  Use of lossless JPEG is not encouraged. Unless you have a requirement to read lossless jpeg-encoded DICOM images, please disregard the patch.  GraphicsMagick requires the JasPer Project's JasPer library version 1.701.0 (or later) available via http from  http://www.ece.uvic.ca/~mdadams/jasper/  to read and write the JPEG-2000 format. Please note that JasPer 1.900.1 may have a problem when used with GraphicsMagick's modules build. To solve this problem, edit the file src/libjasper/base/jas_init.c and comment out the line which invokes atexit().  On Unix-type systems, Windows/MinGW, and Windows/Cygwin, GraphicsMagick requires libltdl from libtool in order to support building GraphicsMagick with dynamically loadable modules. Libtool is available via anonymous FTP from  ftp://ftp.gnu.org/pub/gnu/libtool/  GraphicsMagick requires the MPEG utilities from the MPEG Software Simulation Group, which are available via anonymous FTP as  ftp://ftp.GraphicsMagick.org/pub/GraphicsMagick/delegates/mpeg2vidcodec_v12.tar.gz  to read or write the MPEG image format.  GraphicsMagick requires the LIBPNG library, version 1.0 or above, from  http://www.libpng.org/pub/png/pngcode.html  to read or write the PNG, MNG, or JNG image formats. LIBPNG depends upon the ZLIB library (see below).  GraphicsMagick requires Sam Leffler's TIFF software available via HTTP at  http://www.simplesystems.org/libtiff/  to read the TIFF image format. It in turn optionally requires the JPEG and ZLIB libraries. Libtiff 3.8.2 or later is recommended.  GraphicsMagick may optionally use the TRIO library from  http://sourceforge.net/projects/ctrio/  to substitute for the vsnprintf function when the operating system does not provide one. Older operating systems (e.g. Solaris 2.5) may not provide a vsnprintf function. If vsnprintf (or the TRIO replacement) is not used, then vsprintf is used instead, which decreases the security of GraphicsMagick due to possible buffer overrun exploits.  GraphicsMagick may optionally use the umem memory allocation library which is included in Sun's Solaris operating system or available from  https://labs.omniti.com/trac/portableumem  to provide enhanced versions of the standard memory allocation facilities. Use of umem may improve performance for multi-threaded programs and provides access to debugging features that detect memory leaks, buffer overruns, multiple frees, use of uninitialized data, use of freed data, and many other common programming errors.  GraphicsMagick requires libwmflite from libwmf 0.2.5 (or later) from  http://sourceforge.net/projects/wvware/  to render files in the Windows Meta File (WMF) metafile format (16-bit WMF files only, not 32-bit \"EMF\"). This is the format commonly used for Windows clipart (available on CD at your local computer or technical book store). WMF support requires the FreeType 2 library in order to render TrueType and Postscript fonts.  While GraphicsMagick uses the libwmflite (parser) component of the libwmf package which does not depend on any special libraries, the libwmf package as a whole depends on FreeType 2 and either the xmlsoft libxml, or expat libraries. Since GraphicsMagick already uses libxml (for reading SVG and to retrieve files via HTTP or FTP), it is recommended that the options '--without-expat --with-xml' be supplied to libwmf's configure script. If the other features of libwmf are not needed, then the '--disable-heavy' option may be used to only build libwmflite.  GraphicsMagick's WMF renderer provides some of the finest WMF rendering available due its use of antialiased drawing algorithms. You may select a background color or texture image to render on. For example, \"-background '#ffffffff'\" renders on a transparent background while \"-texture plasma:fractal\" renders on a fractal image.  A free set of Microsoft Windows fonts may be retrieved from http://sourceforge.net/projects/corefonts/. Note that the license for these fonts requires that they be distributed in the original .exe form, but the Linux folks have found ways to deal with that on non-Windows systems.  GraphicsMagick requires an X server for the 'display', 'animate', and 'import' functions to work properly. Unix systems usually provide an X server as part of their standard installation. For MacOS-X, X11 is a system install time option.  A free X server for Microsoft Windows is included as part of Cygwin and may be selected from the Cygwin installer. Cygwin is available from  http://www.cygwin.com/  There is a nearly free X server available for Windows and Macintosh at  http://www.microimages.com/downloads/mix/  GraphicsMagick requires libxml2 available from  http://xmlsoft.org/  to read the SVG image format and to retrieve files from over a network via FTP and HTTP.  GraphicsMagick requires the liblzma library from XZ Utils available from  http://www.tukaani.org/xz/  to support TIFF with LZMA compression and future LZMA-compression features (yet to be developed). The utilities from this package are also necessary in order to decompress GraphicsMagick packages distributed with \".xz\" or \".lzma\" extensions.  GraphicsMagick requires the ZLIB library from  http://www.zlib.net/  to read or write the PNG or Zip compressed MIFF images.", 
            "title": "\u9644\u52a0\u7a0b\u5e8f\u5e93\u548c\u7a0b\u5e8f"
        }, 
        {
            "location": "/GraphicsMagick/Utilities/", 
            "text": "GraphicsMagick \u5de5\u5177\n\n\nGraphicsMagick provides a powerful command line utility gm, which may be used to access all GraphicsMagick functions. Gm uses a consistent set of options (see options documentation). GraphicsMagick provides access to major commands via a single executable command-line program; for example, to use the \"convert\" sub-command, type gm convert .... The available commands are as follows:\n\n\n\n\nanimate   Animate a sequence of images\n\n\nbatch Executes an arbitary number of utility commands\n\n\nbenchmark Measure and report utility command performance.\n\n\ncompare   Compare two images using statistics and/or visual differencing\n\n\ncomposite Composite images together\n\n\nconjure   Execute a Magick Scripting Language (MSL) XML script\n\n\nconvert   Convert an image or sequence of images\n\n\ndisplay   Display an image on a workstation running X\n\n\nidentify  Describe an image or image sequence\n\n\nimport    Capture an application or X server screen\n\n\nmogrify   Transform an image or sequence of images\n\n\nmontage   Create a composite image (in a grid) from separate images\n\n\ntime  Time the execution of a utility command.\n\n\nversion   Report GraphicsMagick version, features, and build options.", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/GraphicsMagick/Utilities/#graphicsmagick", 
            "text": "GraphicsMagick provides a powerful command line utility gm, which may be used to access all GraphicsMagick functions. Gm uses a consistent set of options (see options documentation). GraphicsMagick provides access to major commands via a single executable command-line program; for example, to use the \"convert\" sub-command, type gm convert .... The available commands are as follows:   animate   Animate a sequence of images  batch Executes an arbitary number of utility commands  benchmark Measure and report utility command performance.  compare   Compare two images using statistics and/or visual differencing  composite Composite images together  conjure   Execute a Magick Scripting Language (MSL) XML script  convert   Convert an image or sequence of images  display   Display an image on a workstation running X  identify  Describe an image or image sequence  import    Capture an application or X server screen  mogrify   Transform an image or sequence of images  montage   Create a composite image (in a grid) from separate images  time  Time the execution of a utility command.  version   Report GraphicsMagick version, features, and build options.", 
            "title": "GraphicsMagick \u5de5\u5177"
        }, 
        {
            "location": "/GraphicsMagick/Manual/", 
            "text": "\u624b\u518c\n\n\nGraphicsMagick\n\n\n\u547d\u540d\n\n\ngm - command-line utility to create, edit, compare, convert, or display images\n\n\n\u6982\u8981\n\n\ngm\n \nanimate\n \n[\n \noptions\n \n...\n \n]\n \nfile\n \n[\n \n[\n \noptions\n \n...\n \n]\n \nfile\n \n...\n \n]\n\n\n\ngm\n \nbatch\n \n[\n \noptions\n \n...\n \n]\n \n[\n \nscript\n \n]\n\n\n\ngm\n \nbenchmark\n \n[\n \noptions\n \n...\n \n]\n \nsubcommand\n\n\n\ngm\n \ncompare\n \n[\n \noptions\n \n...\n \n]\n \nreference\n-\nimage\n \n[\n \noptions\n \n...\n \n]\n \ncompare\n-\nimage\n \n[\n \noptions\n \n...\n \n]\n\n\n\ngm\n \ncomposite\n \n[\n \noptions\n \n...\n \n]\n \nchange\n-\nimage\n \nbase\n-\nimage\n \n[\n \nmask\n-\nimage\n \n]\n \noutput\n-\nimage\n\n\n\ngm\n \nconjure\n \n[\n \noptions\n \n]\n \nscript\n.\nmsl\n \n[\n \n[\n \noptions\n \n]\n \nscript\n.\nmsl\n \n]\n\n\n\ngm\n \nconvert\n \n[\n \n[\n \noptions\n \n...\n \n]\n \n[\n \ninput\n-\nfile\n \n...\n \n]\n \n[\n \noptions\n \n...\n \n]\n \n]\n \noutput\n-\nfile\n\n\n\ngm\n \ndisplay\n \n[\n \noptions\n \n...\n \n]\n \nfile\n \n...\n \n[\n \n[\noptions\n \n...\n \n]\nfile\n \n...\n \n]\n\n\n\ngm\n \nidentify\n \nfile\n \n[\n \nfile\n \n...\n \n]\n\n\n\ngm\n \nimport\n \n[\n \noptions\n \n...\n \n]\n \nfile\n\n\n\ngm\n \nmogrify\n \n[\n \noptions\n \n...\n \n]\n \nfile\n \n...\n\n\n\ngm\n \nmontage\n \n[\n \noptions\n \n...\n \n]\n \nfile\n \n[\n \n[\n \noptions\n \n...\n \n]\n \nfile\n \n...\n \n]\n \noutput\n-\nfile\n\n\n\ngm\n \ntime\n \nsubcommand\n\n\n\ngm\n \nversion\n\n\n\n\n\n\n\u63cf\u8ff0\n\n\nGraphicsMagick's gm provides a suite of utilities for creating, comparing, converting, editing, and displaying images. All of the utilities are provided as sub-commands of a single gm executable:\n\n\nanimate\n displays an animation (e.g. a GIF file) on any workstation display running an X server.\n\n\nbatch\n executes an arbitary number of the utility commands (e.g. convert) in the form of a simple linear batch script in order to improve execution efficiency, and/or to allow use as a subordinate co-process under the control of an arbitrary script or program.\n\n\nbenchmark\n executes one of the other utility commands (e.g. convert) for a specified number of iterations, or execution time, and reports execution time and other profiling information such as CPU utilization. Benchmark provides various operating modes including executing the command with a varying number of threads, and alternate reporting formats such as comma-separated value (CSV).\n\n\ncompare\n compares two images and reports difference statistics according to specified metrics and/or outputs an image with a visual representation of the differences. It may also be used to test if images are similar within a particular range and specified metric, returning a truth value to the executing environment.\n\n\ncomposite\n composites images (blends or merges images together) to create new images.\n\n\nconjure\n interprets and executes scripts in the Magick Scripting Language (MSL).\n\n\nconvert\n converts an input file using one image format to an output file with the same or differing image format while applying an arbitrary number of image transformations.\n\n\ndisplay\n is a machine architecture independent image processing and display facility. It can display an image on any workstation display running an X server.\n\n\nidentify\n describes the format and characteristics of one or more image files. It will also report if an image is incomplete or corrupt.\n\n\nimport\n reads an image from any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen.\n\n\nmogrify\n transforms an image or a sequence of images. These transforms include image scaling, image rotation, color reduction, and others. The transmogrified image overwrites the original image.\n\n\nmontage\n creates a composite by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.\n\n\ntime\n executes a subcommand and reports the user, system, and total execution time consumed.\n\n\nversion\n reports the GraphicsMagick release version, maximum sample-depth, copyright notice, supported features, and the options used while building the software.\n\n\nThe GraphicsMagick utilities recognize the following image formats:\n\n\n\n\n\n\n\n\nName\n\n\nMode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n3FR\n\n\nr--\n\n\nHasselblad Photo RAW\n\n\n\n\n\n\n8BIM\n\n\nrw-\n\n\nPhotoshop resource format\n\n\n\n\n\n\n8BIMTEXT\n\n\nrw-\n\n\nPhotoshop resource text format\n\n\n\n\n\n\n8BIMWTEXT\n\n\nrw-\n\n\nPhotoshop resource wide text format\n\n\n\n\n\n\nAPP1\n\n\nrw-\n\n\nRaw application information\n\n\n\n\n\n\nAPP1JPEG\n\n\nrw-\n\n\nRaw JPEG binary data\n\n\n\n\n\n\nART\n\n\nr--\n\n\nPF1: 1st Publisher\n\n\n\n\n\n\nARW\n\n\nr--\n\n\nSony Alpha DSLR RAW\n\n\n\n\n\n\nAVS\n\n\nrw+\n\n\nAVS X image\n\n\n\n\n\n\nBIE\n\n\nrw-\n\n\nJoint Bi-level Image experts Group interchange format\n\n\n\n\n\n\nBMP\n\n\nrw+\n\n\nMicrosoft Windows bitmap image\n\n\n\n\n\n\nBMP2\n\n\n-w-\n\n\nMicrosoft Windows bitmap image v2\n\n\n\n\n\n\nBMP3\n\n\n-w-\n\n\nMicrosoft Windows bitmap image v3\n\n\n\n\n\n\nCACHE\n\n\n---\n\n\nMagick Persistent Cache image format\n\n\n\n\n\n\nCALS\n\n\nrw-\n\n\nContinuous Acquisition and Life-cycleSupport Type 1 image\n\n\n\n\n\n\nCAPTION\n\n\nr--\n\n\nCaption (requires separate size info)\n\n\n\n\n\n\nCIN\n\n\nrw-\n\n\nKodak Cineon Format\n\n\n\n\n\n\nCMYK\n\n\nrw-\n\n\nRaw cyan, magenta, yellow, and black samples (8 or 16 bits, depending on the image depth)\n\n\n\n\n\n\nCMYKA\n\n\nrw-\n\n\nRaw cyan, magenta, yellow, black, and matte samples (8 or 16 bits, depending on the image depth)\n\n\n\n\n\n\nCR2\n\n\nr--\n\n\nCanon Photo RAW\n\n\n\n\n\n\nCRW\n\n\nr--\n\n\nCanon Photo RAW\n\n\n\n\n\n\nCUR\n\n\nr--\n\n\nMicrosoft Cursor Icon\n\n\n\n\n\n\nCUT\n\n\nr--\n\n\nDR Halo\n\n\n\n\n\n\nDCM\n\n\nr--\n\n\nDigital Imaging and Communications in Medicine image\n\n\n\n\n\n\nDCR\n\n\nr--\n\n\nKodak Photo RAW\n\n\n\n\n\n\nDCX\n\n\nrw+\n\n\nZSoft IBM PC multi-page Paintbrush\n\n\n\n\n\n\nDNG\n\n\nr--\n\n\nAdobe Digital Negative\n\n\n\n\n\n\nDPS\n\n\nr--\n\n\nDisplay PostScript Interpreter\n\n\n\n\n\n\nDPX\n\n\nrw-\n\n\nDigital Moving Picture Exchange\n\n\n\n\n\n\nEPDF\n\n\nrw-\n\n\nEncapsulated Portable Document Format\n\n\n\n\n\n\nEPI\n\n\nw-\n\n\nAdobe Encapsulated PostScript Interchange format\n\n\n\n\n\n\nEPS\n\n\nrw-\n\n\nAdobe Encapsulated PostScript\n\n\n\n\n\n\nEPS2\n\n\n-w-\n\n\nAdobe Level II Encapsulated PostScript\n\n\n\n\n\n\nEPS3\n\n\n-w-\n\n\nAdobe Level III Encapsulated PostScript\n\n\n\n\n\n\nEPSF\n\n\nrw-\n\n\nAdobe Encapsulated PostScript\n\n\n\n\n\n\nEPSI\n\n\nrw-\n\n\nAdobe Encapsulated PostScript Interchange format\n\n\n\n\n\n\nEPT\n\n\nrw-\n\n\nAdobe Encapsulated PostScript with MS-DOS TIFF preview\n\n\n\n\n\n\nEPT2\n\n\nrw-\n\n\nAdobe Level II Encapsulated PostScript with MS-DOS TIFF preview\n\n\n\n\n\n\nEPT3\n\n\nrw-\n\n\nAdobe Level III Encapsulated PostScript with MS-DOS TIFF preview\n\n\n\n\n\n\nEXIF\n\n\nrw-\n\n\nExif digital camera binary data\n\n\n\n\n\n\nFAX\n\n\nrw+\n\n\nGroup 3 FAX (Not TIFF Group3 FAX!)\n\n\n\n\n\n\nFITS\n\n\nrw-\n\n\nFlexible Image Transport System\n\n\n\n\n\n\nFRACTAL\n\n\nr--\n\n\nPlasma fractal image\n\n\n\n\n\n\nFPX\n\n\nrw-\n\n\nFlashPix Format\n\n\n\n\n\n\nGIF\n\n\nrw+\n\n\nCompuServe graphics interchange format\n\n\n\n\n\n\nGIF87\n\n\nrw-\n\n\nCompuServe graphics interchange format(version 87a)\n\n\n\n\n\n\nGRADIENT\n\n\nr--\n\n\nGradual passing from one shade to another\n\n\n\n\n\n\nGRAY\n\n\nrw+\n\n\nRaw gray samples (8/16/32 bits,depending on the image depth)\n\n\n\n\n\n\nHISTOGRAM\n\n\n-w-\n\n\nHistogram of the image\n\n\n\n\n\n\nHRZ\n\n\nr--\n\n\nHRZ: Slow scan TV\n\n\n\n\n\n\nHTML\n\n\n-w-\n\n\nHypertext Markup Language and a client-side image map\n\n\n\n\n\n\nICB\n\n\nrw+\n\n\nTruevision Targa image\n\n\n\n\n\n\nICC\n\n\nrw-\n\n\nICC Color Profile\n\n\n\n\n\n\nICM\n\n\nrw-\n\n\nICC Color Profile\n\n\n\n\n\n\nICO\n\n\nr--\n\n\nMicrosoft icon\n\n\n\n\n\n\nICON\n\n\nr--\n\n\nMicrosoft icon\n\n\n\n\n\n\nIDENTITY\n\n\nr--\n\n\nHald CLUT identity image\n\n\n\n\n\n\nIMAGE\n\n\nr--\n\n\nGraphicsMagick Embedded Image\n\n\n\n\n\n\nINFO\n\n\n-w+\n\n\nImage descriptive information and statistics\n\n\n\n\n\n\nIPTC\n\n\nrw-\n\n\nIPTC Newsphoto\n\n\n\n\n\n\nIPTCTEXT\n\n\nrw-\n\n\nIPTC Newsphoto text format\n\n\n\n\n\n\nIPTCWTEXT\n\n\nrw-\n\n\nIPTC Newsphoto wide text format\n\n\n\n\n\n\nJBG\n\n\nrw+\n\n\nJoint Bi-level Image experts Group interchange format\n\n\n\n\n\n\nJBIG\n\n\nrw+\n\n\nJoint Bi-level Image experts Group interchange format\n\n\n\n\n\n\nJNG\n\n\nrw-\n\n\nJPEG Network Graphics\n\n\n\n\n\n\nJP2\n\n\nrw-\n\n\nJPEG-2000 JP2 File Format Syntax\n\n\n\n\n\n\nJPC\n\n\nrw-\n\n\nJPEG-2000 Code Stream Syntax\n\n\n\n\n\n\nJPEG\n\n\nrw-\n\n\nJoint Photographic Experts Group JFIF format\n\n\n\n\n\n\nJPG\n\n\nrw-\n\n\nJoint Photographic Experts Group JFIF format\n\n\n\n\n\n\nK25\n\n\nr--\n\n\nKodak Photo RAW\n\n\n\n\n\n\nKDC\n\n\nr--\n\n\nKodak Photo RAW\n\n\n\n\n\n\nLABEL\n\n\nr--\n\n\nText image format\n\n\n\n\n\n\nM2V\n\n\nrw+\n\n\nMPEG-2 Video Stream\n\n\n\n\n\n\nMAP\n\n\nrw-\n\n\nColormap intensities and indices\n\n\n\n\n\n\nMAT\n\n\nr--\n\n\nMATLAB image format\n\n\n\n\n\n\nMATTE\n\n\n-w+\n\n\nMATTE format\n\n\n\n\n\n\nMIFF\n\n\nrw+\n\n\nMagick Image File Format\n\n\n\n\n\n\nMNG\n\n\nrw+\n\n\nMultiple-image Network Graphics\n\n\n\n\n\n\nMONO\n\n\nrw-\n\n\nBi-level bitmap in least-significant- -byte-first order\n\n\n\n\n\n\nMPC\n\n\nrw+\n\n\nMagick Persistent Cache image format\n\n\n\n\n\n\nMPEG\n\n\nrw+\n\n\nMPEG-1 Video Stream\n\n\n\n\n\n\nMPG\n\n\nrw+\n\n\nMPEG-1 Video Stream\n\n\n\n\n\n\nMRW\n\n\nr--\n\n\nMinolta Photo Raw\n\n\n\n\n\n\nMSL\n\n\nr--\n\n\nMagick Scripting Language\n\n\n\n\n\n\nMTV\n\n\nrw+\n\n\nMTV Raytracing image format\n\n\n\n\n\n\nMVG\n\n\nrw-\n\n\nMagick Vector Graphics\n\n\n\n\n\n\nNEF\n\n\nr--\n\n\nNikon Electronic Format\n\n\n\n\n\n\nNULL\n\n\nr--\n\n\nConstant image of uniform color\n\n\n\n\n\n\nOTB\n\n\nrw-\n\n\nOn-the-air bitmap\n\n\n\n\n\n\nP7\n\n\nrw+\n\n\nXv thumbnail format\n\n\n\n\n\n\nPAL\n\n\nrw-\n\n\n16bit/pixel interleaved YUV\n\n\n\n\n\n\nPALM\n\n\nrw-\n\n\nPalm Pixmap\n\n\n\n\n\n\nPBM\n\n\nrw+\n\n\nPortable bitmap format (black and white)\n\n\n\n\n\n\nPCD\n\n\nrw-\n\n\nPhoto CD\n\n\n\n\n\n\nPCDS\n\n\nrw-\n\n\nPhoto CD\n\n\n\n\n\n\nPCL\n\n\n-w-\n\n\nPage Control Language\n\n\n\n\n\n\nPCT\n\n\nrw-\n\n\nApple Macintosh QuickDraw/PICT\n\n\n\n\n\n\nPCX\n\n\nrw-\n\n\nZSoft IBM PC Paintbrush\n\n\n\n\n\n\nPDB\n\n\nrw+\n\n\nPalm Database ImageViewer Format\n\n\n\n\n\n\nPDF\n\n\nrw+\n\n\nPortable Document Format\n\n\n\n\n\n\nPEF\n\n\nr--\n\n\nPentax Electronic File\n\n\n\n\n\n\nPFA\n\n\nr--\n\n\nTrueType font\n\n\n\n\n\n\nPFB\n\n\nr--\n\n\nTrueType font\n\n\n\n\n\n\nPGM\n\n\nrw+\n\n\nPortable graymap format (gray scale)\n\n\n\n\n\n\nPGX\n\n\nr--\n\n\nJPEG-2000 VM Format\n\n\n\n\n\n\nPICON\n\n\nrw-\n\n\nPersonal Icon\n\n\n\n\n\n\nPICT\n\n\nrw-\n\n\nApple Macintosh QuickDraw/PICT\n\n\n\n\n\n\nPIX\n\n\nr--\n\n\nAlias/Wavefront RLE image format\n\n\n\n\n\n\nPLASMA\n\n\nr--\n\n\nPlasma fractal image\n\n\n\n\n\n\nPNG\n\n\nrw-\n\n\nPortable Network Graphics\n\n\n\n\n\n\nPNG24\n\n\nrw-\n\n\nPortable Network Graphics, 24 bit RGB opaque only\n\n\n\n\n\n\nPNG32\n\n\nrw-\n\n\nPortable Network Graphics, 32 bit RGBA semitransparency OK\n\n\n\n\n\n\nPNG8\n\n\nrw-\n\n\nPortable Network Graphics, 8-bit indexed, binary transparency only\n\n\n\n\n\n\nPNM\n\n\nrw+\n\n\nPortable anymap\n\n\n\n\n\n\nPPM\n\n\nrw+\n\n\nPortable pixmap format (color)\n\n\n\n\n\n\nPREVIEW\n\n\n-w-\n\n\nShow a preview an image enhancement,effect, or f/x\n\n\n\n\n\n\nPS\n\n\nrw+\n\n\nAdobe PostScript\n\n\n\n\n\n\nPS2\n\n\n-w+\n\n\nAdobe Level II PostScript\n\n\n\n\n\n\nPS3\n\n\n-w+\n\n\nAdobe Level III PostScript\n\n\n\n\n\n\nPSD\n\n\nrw-\n\n\nAdobe Photoshop bitmap\n\n\n\n\n\n\nPTIF\n\n\nrw-\n\n\nPyramid encoded TIFF\n\n\n\n\n\n\nPWP\n\n\nr--\n\n\nSeattle Film Works\n\n\n\n\n\n\nRAF\n\n\nr--\n\n\nFuji Photo RAW\n\n\n\n\n\n\nRAS\n\n\nrw+\n\n\nSUN Rasterfile\n\n\n\n\n\n\nRGB\n\n\nrw+\n\n\nRaw red, green, and blue samples\n\n\n\n\n\n\nRGBA\n\n\nrw+\n\n\nRaw red, green, blue, and matte samples\n\n\n\n\n\n\nRLA\n\n\nr--\n\n\nAlias/Wavefront image\n\n\n\n\n\n\nRLE\n\n\nr--\n\n\nUtah Run length encoded image\n\n\n\n\n\n\nSCT\n\n\nr--\n\n\nScitex HandShake\n\n\n\n\n\n\nSFW\n\n\nr--\n\n\nSeattle Film Works\n\n\n\n\n\n\nSGI\n\n\nrw+\n\n\nIrix RGB image\n\n\n\n\n\n\nSHTML\n\n\n-w-\n\n\nHypertext Markup Language and a client-side image map\n\n\n\n\n\n\nSTEGANO\n\n\nr--\n\n\nSteganographic image\n\n\n\n\n\n\nSUN\n\n\nrw+\n\n\nSUN Rasterfile\n\n\n\n\n\n\nSVG\n\n\nrw+\n\n\nScalable Vector Gaphics\n\n\n\n\n\n\nTEXT\n\n\nrw+\n\n\nRaw text\n\n\n\n\n\n\nTGA\n\n\nrw+\n\n\nTruevision Targa image\n\n\n\n\n\n\nTIFF\n\n\nrw+\n\n\nTagged Image File Format\n\n\n\n\n\n\nTILE\n\n\nr--\n\n\nTile image with a texture\n\n\n\n\n\n\nTIM\n\n\nr--\n\n\nPSX TIM\n\n\n\n\n\n\nTOPOL\n\n\nr--\n\n\nTOPOL X Image\n\n\n\n\n\n\nTTF\n\n\nr--\n\n\nTrueType font\n\n\n\n\n\n\nTXT\n\n\nrw+\n\n\nRaw text\n\n\n\n\n\n\nUIL\n\n\n-w-\n\n\nX-Motif UIL table\n\n\n\n\n\n\nUYVY\n\n\nrw-\n\n\n16bit/pixel interleaved YUV\n\n\n\n\n\n\nVDA\n\n\nrw+\n\n\nTruevision Targa image\n\n\n\n\n\n\nVICAR\n\n\nrw-\n\n\nVICAR rasterfile format\n\n\n\n\n\n\nVID\n\n\nrw+\n\n\nVisual Image Directory\n\n\n\n\n\n\nVIFF\n\n\nrw+\n\n\nKhoros Visualization image\n\n\n\n\n\n\nVST\n\n\nrw+\n\n\nTruevision Targa image\n\n\n\n\n\n\nWBMP\n\n\nrw-\n\n\nWireless Bitmap (level 0) image\n\n\n\n\n\n\nWMF\n\n\nr--\n\n\nWindows Metafile\n\n\n\n\n\n\nWPG\n\n\nr--\n\n\nWord Perfect Graphics\n\n\n\n\n\n\nX\n\n\nrw-\n\n\nX Image\n\n\n\n\n\n\nX3F\n\n\nr--\n\n\nFoveon X3 (Sigma/Polaroid) RAW\n\n\n\n\n\n\nXBM\n\n\nrw-\n\n\nX Windows system bitmap (black and white)\n\n\n\n\n\n\nXC\n\n\nr--\n\n\nConstant image uniform color\n\n\n\n\n\n\nXCF\n\n\nr--\n\n\nGIMP image\n\n\n\n\n\n\nXMP\n\n\nrw-\n\n\nAdobe XML metadata\n\n\n\n\n\n\nXPM\n\n\nrw-\n\n\nX Windows system pixmap (color)\n\n\n\n\n\n\nXV\n\n\nrw+\n\n\nKhoros Visualization image\n\n\n\n\n\n\nXWD\n\n\nrw-\n\n\nX Windows system window dump (color)\n\n\n\n\n\n\nYUV\n\n\nrw-\n\n\nCCIR 601 4:1:1 or 4:2:2 (8-bit only)\n\n\n\n\n\n\n\n\n\u6a21\u5f0f:\n\n\n\n\nr\n Read\n\n\nw\n Write\n\n\n+\n Multi-image\n\n\n\n\nSupport for some of these formats require additional programs or libraries. See README in the source package for where to find optional additional software.\n\n\nNote, a format delineated with + means that if more than one image is specified, frames are combined into a single multi-image file. Use +adjoin if you want a single image produced for each frame.\n\n\nYour installation might not support all of the formats in the list. To get an accurate listing of the formats supported by your particular configuration, run \"gm convert -list format\".\n\n\nRaw images are expected to have one byte per pixel unless gm is compiled in 16-bit quantum mode or in 32-bit quantum mode. Here, the raw data is expected to be stored two or four bytes per pixel, respectively, in most-significant-byte-first order. For example, you can tell if gm was compiled in 16-bit mode by typing \"gm version\" without any options, and looking for \"Q:16\" in the first line of output.\n\n\n\u6587\u4ef6\u548c\u683c\u5f0f\n\n\nBy default, the image format is determined by its magic number, i.e., the first few bytes of the file. To specify a particular image format, precede the filename with an image format name and a colon (i.e.ps:image) or specify the image type as the filename suffix (i.e.image.ps). The magic number takes precedence over the filename suffix and the prefix takes precedence over the magic number and the suffix in input files. When a file is read, its magic number is stored in the \"image-\nmagick\" string. In output files, the prefix takes precedence over the filename suffix, and the filename suffix takes precedence over the \"image-\nmagick\" string.\n\n\nTo read the \"built-in\" formats (GRANITE, H, LOGO, NETSCAPE, PLASMA, and ROSE) use a prefix (including the colon) without a filename or suffix. To read the XC format, follow the colon with a color specification. To read the CAPTION format, follow the colon with a text string or with a filename prefixed with the at symbol (@).\n\n\nWhen you specify X as your image type, the filename has special meaning. It specifies an X window by id, name, or root. If no filename is specified, the window is selected by clicking the mouse in the desired window.\n\n\nSpecify input_file as - for standard input, output_file as - for standard output. If input_file has the extension .Z or .gz, the file is uncompressed with uncompress or gunzip respectively. If output_file has the extension .Z or .gz, the file is compressed using with compress or gzip respectively.\n\n\nUse an optional index enclosed in brackets after an input file name to specify a desired subimage of a multi-resolution image format like Photo CD (e.g. \"img0001.pcd[4]\") or a range for MPEG images (e.g. \"video.mpg[50-75]\"). A subimage specification can be disjoint (e.g. \"image.tiff[2,7,4]\"). For raw images, specify a subimage with a geometry (e.g. -size 640x512 \"image.rgb[320x256+50+50]\"). Surround the image name with quotation marks to prevent your shell from interpreting the square brackets.\n\n\nSingle images are written with the filename you specify. However, multi-part images (e.g., a multi-page PostScript document with +adjoin specified) may be written with the scene number included as part of the filename. In order to include the scene number in the filename, it is necessary to include a printf-style %d format specification in the file name and use the +adjoin option. For example,\n\n\nimage%02d.miff\n\n\n\n\n\nwrites files image00.miff, image01.miff, etc. Only a single specification is allowed within an output filename. If more than one specification is present, it will be ignored. It is best to embed the scene number in the base part of the file name, not in the extension, because the extension will not be a recognizeable image type.\n\n\nWhen running a commandline utility, you can prepend an at sign @ to a filename to read a list of image filenames from that file. This is convenient in the event you have too many image filenames to fit on the command line.\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect for the set of images that follows, until the set is terminated by the appearance of any option or -noop. Some options only affect the decoding of images and others only the encoding. The latter can appear after the final group of input images.\n\n\nThis is a combined list of the command-line options used by the GraphicsMagick utilities (animate, compare, composite, convert, display, identify, import, mogrify and montage).\n\n\nIn this document, angle brackets (\"\n\") enclose variables and curly brackets (\"{}\") enclose optional parameters. For example, \"-fuzz \ndistance\n{%}\" means you can use the option \"-fuzz 10\" or \"-fuzz 2%\".\n\n\n-adjoin\njoin images into a single multi-image file\nBy default, all images of an image sequence are stored in the same file. However, some formats (e.g. JPEG) do not support storing more than one image per file and only the first frame in an image sequence will be saved unless the result is saved to separate files. Use +adjoin to force saving multiple frames to multiple numbered files. If +adjoin is used, then the output filename must include a printf style formatting specification for the numeric part of the filename. For example,\nimage%02d.miff\n\n\n\n\n-affine \nmatrix\ndrawing transform matrix\nThis option provides a transform matrix {sx,rx,ry,sy,tx,ty} for use by subsequent -draw or -transform options.\n-antialias\nremove pixel aliasing\nBy default antialiasing algorithms are used when drawing objects (e.g. lines) or rendering vector formats (e.g. WMF and Postscript). Use +antialias to disable use of antialiasing algorithms. Reasons to disable antialiasing include avoiding increasing colors in the image, or improving rendering speed.\n-append\nappend a set of images\nThis option creates a single image where the images in the original set are stacked top-to-bottom. If they are not of the same width, any narrow images will be expanded to fit using the background color. Use +append to stack images left-to-right. The set of images is terminated by the appearance of any option. If the -append option appears after all of the input images, all images are appended.\n-asc-cdl \nspec\napply ASC CDL color transform\nApplies (\"bakes in\") the ASC CDL, which is a format for the exchange of basic primary color grading information between equipment and software from different manufacturers. The format defines the math for three functions: slope, offset and power. Each function uses a number for the red, green, and blue color channels for a total of nine numbers comprising a single color decision. The tenth number (optional) is for chromiance (saturation) as specified by ASC CDL 1.2.\nThe argument string is comma delimited and is in the following form (but without invervening spaces or line breaks)\nredslope,redoffset,redpower:\ngreenslope,greenoffset,greenpower:\nblueslope,blueoffset,bluepower:\nsaturation\n\n\n\n\nwith the unity (no change) specification being:\n1.0,0.0,1.0:1.0,0.0,1.0:1.0,0.0,1.0:1.0\n\n\n\n\n\n-authenticate \nstring\ndecrypt image with this password\nUse this option to supply a password for decrypting an image or an image sequence, if it is being read from a format such as PDF that supports encryption. Encrypting images being written is not supported.\n-auto-orient\norient (rotate) image so it is upright\nAdjusts the image orienation so that it is suitable for viewing. Uses the orientation tag obtained from the image file or as supplied by the -orient option.\n-average\naverage a set of images\nThe set of images is terminated by the appearance of any option. If the -average option appears after all of the input images, all images are averaged.\n-backdrop\ndisplay the image centered on a backdrop.\nThis backdrop covers the entire workstation screen and is useful for hiding other X window activity while viewing the image. The color of the backdrop is specified as the foreground color (X11 default is black).\nRefer to X Resources for details.\n-background \ncolor\nthe background color\nThe color is specified using the format described under the -fill option.\n-black-threshold red[,green][,blue][,opacity]\npixels below the threshold become black\nUse -black-threshold to set pixels with values below the specified threshold to minimum value (black). If only one value is supplied, or the red, green, and blue values are identical, then intensity thresholding is used. If the color threshold values are not identical then channel-based thresholding is used, and color distortion will occur. Specify a negative value (e.g. -1) if you want a channel to be ignored but you do want to threshold a channel later in the list. If a percent (%) symbol is appended, then the values are treated as a percentage of maximum range.\n-blue-primary \nx\n,\ny\nblue chromaticity primary point\n-blur \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\nBlur with the given radius and standard deviation (sigma).\n-border \nwidth\nx\nheight\nsurround the image with a border of color\nSee -geometry for details about the geometry specification.\n-bordercolor \ncolor\nthe border color\nThe color is specified using the format described under the -fill option.\n-borderwidth \ngeometry\nthe border width\n-box \ncolor\nset the color of the annotation bounding box\nThe color is specified using the format described under the -fill option.\nSee -draw for further details.\n-channel \ntype\nthe type of channel\nChoose from: Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray.\nUse this option to extract a particular channel from the image. Opacity, for example, is useful for extracting the opacity values from an image.\n-charcoal \nfactor\nsimulate a charcoal drawing\n-chop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\nremove pixels from the interior of an image\nWidth and height give the number of columns and rows to remove, and x and y are offsets that give the location of the leftmost column and topmost row to remove.\nThe x offset normally specifies the leftmost column to remove. If the -gravity option is present with NorthEast, East, or SouthEast gravity, it gives the distance leftward from the right edge of the image to the rightmost column to remove. Similarly, the y offset normally specifies the topmost row to remove, but if the -gravity option is present with SouthWest, South, or SouthEast gravity, it specifies the distance upward from the bottom edge of the image to the bottom row to remove.\nThe -chop option removes entire rows and columns, and moves the remaining corner blocks leftward and upward to close the gaps.\n-clip\napply the clipping path, if one is present\nIf a clipping path is present, it will be applied to subsequent operations.\nFor example, if you type the following command:\ngm convert -clip -negate cockatoo.tif negated.tif\n\n\n\n\nonly the pixels within the clipping path are negated.\nThe -clip feature requires the XML library. If the XML library is not present, the option is ignored.\n-coalesce\nmerge a sequence of images\nEach image N in the sequence after Image 0 is replaced with the image created by flattening images 0 through N.\nThe set of images is terminated by the appearance of any option. If the -coalesce option appears after all of the input images, all images are coalesced.\n-colorize \nvalue\ncolorize the image with the pen color\nSpecify the amount of colorization as a percentage. You can apply separate colorization values to the red, green, and blue channels of the image with a colorization value list delimited with slashes (e.g. 0/0/50).\nThe -colorize option may be used in conjunction with -modulate to produce a nice sepia toned image like:\ngm convert input.ppm -modulate 115,0,100 \\\n        -colorize 7,21,50 output.ppm.\n\n\n\n\n-colormap \ntype\ndefine the colormap type\nChoose between shared or private.\nThis option only applies when the default X server visual is PseudoColor or GRAYScale. Refer to -visual for more details. By default, a shared colormap is allocated. The image shares colors with other X clients. Some image colors could be approximated, therefore your image may look very different than intended. Choose Private and the image colors appear exactly as they are defined. However, other clients may go technicolor when the image colormap is installed.\n-colors \nvalue\npreferred number of colors in the image\nThe actual number of colors in the image may be less than your request, but never more. Note, this is a color reduction option. Images with less unique colors than specified with this option will have any duplicate or unused colors removed. The ordering of an existing color palette may be altered. When converting an image from color to grayscale, convert the image to the gray colorspace before reducing the number of colors since doing so is most efficient. Refer to \nquantize\n for more details.\nNote, options -dither, -colorspace, and -treedepth affect the color reduction algorithm.\n-colorspace \nvalue\nthe type of colorspace\nChoices are: CineonLog, CMYK, GRAY, HSL, HWB, OHTA, RGB, Rec601Luma, Rec709Luma, Rec601YCbCr, Rec709YCbCr, Transparent, XYZ, YCbCr, YIQ, YPbPr, or YUV.\nColor reduction, by default, takes place in the RGB color space. Empirical evidence suggests that distances in color spaces such as YUV or YIQ correspond to perceptual color differences more closely than do distances in RGB space. These color spaces may give better results when color reducing an image. Refer to quantize for more details.\nTwo gray colorspaces are supported. The Rec601Luma space is based on the recommendations for legacy NTSC television (ITU-R BT.601-5). The Rec709Luma space is based on the recommendations for HDTV (Rec. ITU-R BT.709-5) and is suitable for use with computer graphics, and for contemporary CRT displays. The GRAY colorspace currently selects the Rec601Luma colorspace by default for backwards compatibly reasons. This default may be re-considered in the future.\nTwo YCbCr colorspaces are supported. The Rec601YCbCr space is based on the recommendations for legacy NTSC television (ITU-R BT.601-5). The Rec709CbCr space is based on the recommendations for HDTV (Rec. ITU-R BT.709-5) and is suitable for suitable for use with computer graphics, and for contemporary CRT displays. The YCbCr colorspace specification is equivalent toRec601YCbCr.\nThe Transparent color space behaves uniquely in that it preserves the matte channel of the image if it exists.\nThe -colors or -monochrome option, or saving to a file format which requires color reduction, is required for this option to take effect.\n-comment \nstring\nannotate an image with a comment\nUse this option to assign a specific comment to the image, when writing to an image format that supports comments. You can include the image filename, type, width, height, or other image attribute by embedding special format characters listed under the -format option. The comment is not drawn on the image, but is embedded in the image datastream via a \"Comment\" tag or similar mechanism. If you want the comment to be visible on the image itself, use the -draw option instead.\nFor example,\n-comment \n%m:%f %wx%h\n\n\n\n\n\nproduces an image comment of MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480.\nIf the first character of string is @, the image comment is read from a file titled by the remaining characters in the string.\nIf the -comment option appears multiple times, only the last comment is stored.\nIn PNG images, the comment is stored in a tEXt or zTXt chunk with the keyword \"comment\".\n-compose \noperator\nthe type of image composition\nThe description of composition uses abstract terminology in order to allow the the description to be more clear, while avoiding constant values which are specific to a particular build configuration. Each image pixel is represented by red, green, and blue levels (which are equal for a gray pixel). MaxRGB is the maximum integral value which may be stored in the red, green, or blue channels of the image. Each image pixel may also optionally (if the image matte channel is enabled) have an associated level of opacity (ranging from opaque to transparent), which may be used to determine the influence of the pixel color when compositing the pixel with another image pixel. If the image matte channel is disabled, then all pixels in the image are treated as opaque. The color of an opaque pixel is fully visible while the color of a transparent pixel color is entirely absent (pixel color is ignored).\nBy definition, raster images have a rectangular shape. All image rows are of equal length, and all image columns have the same number of rows. By treating the opacity channel as a visual \"mask\" the rectangular image may be given a \"shape\" by treating the opacity channel as a cookie-cutter for the image. Pixels within the shape are opaque, while pixels outside the shape are transparent. Pixels on the boundary of the shape may be between opaque and transparent in order to provide antialiasing (visually smooth edges). The description of the composition operators use this concept of image \"shape\" in order to make the description of the operators easier to understand. While it is convenient to describe the operators in terms of \"shapes\" they are by no means limited to mask-style operations since they are based on continuous floating-point mathematics rather than simple boolean operations.\nBy default, the Over composite operator is used. The following composite operators are available:\nOver\nIn\nOut\nAtop\nXor\nPlus\nMinus\nAdd\nSubtract\nDifference\nDivide\nMultiply\nBumpmap\nCopy\nCopyRed\nCopyGreen\nCopyBlue\nCopyOpacity\nCopyCyan\nCopyMagenta\nCopyYellow\nCopyBlack\nThe behavior of each operator is described below.\nOver\nThe result will be the union of the two image shapes, with opaque areas of change-image obscuring base-image in the region of overlap.\nIn\nThe result is simply change-image cut by the shape of base-image. None of the image data of base-image will be in the result.\nOut\nThe resulting image is change-image with the shape of base-image cut out.\nAtop\nThe result is the same shape as base-image, with change-image obscuring base-image where the image shapes overlap. Note this differs from over because the portion of change-image outside base-image's shape does not appear in the result.\nXor\nThe result is the image data from both change-image and base-image that is outside the overlap region. The overlap region will be blank.\nPlus\nThe result is just the sum of the image data. Output values are cropped to MaxRGB (no overflow). This operation is independent of the matte channels.\nMinus\nThe result of change-image - base-image, with underflow cropped to zero. The matte channel is ignored (set to opaque, full coverage).\nAdd\nThe result of change-image + base-image, with overflow wrapping around (mod MaxRGB+1).\nSubtract\nThe result of change-image - base-image, with underflow wrapping around (mod MaxRGB+1). The add and subtract operators can be used to perform reversible transformations.\nDifference\nThe result of abs(change-image - base-image). This is useful for comparing two very similar images.\nDivide\nThe result of change-image / base-image. This is useful for improving the readability of text on unevenly illuminated photos (by using a gaussian blurred copy of change-image as base-image).\nMultiply\nThe result of change-image * base-image. This is useful for the creation of drop-shadows.\nBumpmap\nThe result base-image shaded by change-image.\nCopy\nThe resulting image is base-image replaced with change-image. Here the matte information is ignored.\nCopyRed\nThe resulting image is the red channel in base-image replaced with the red channel in change-image. The other channels are copied untouched.\nCopyGreen\nThe resulting image is the green channel in base-image replaced with the green channel in change-image. The other channels are copied untouched.\nCopyBlue\nThe resulting image is the blue channel in base-image replaced with the blue channel in change-image. The other channels are copied untouched.\nCopyOpacity\nThe resulting image is the opacity channel in base-image replaced with the opacity channel in change-image. The other channels are copied untouched.\nCopyCyan\nThe resulting image is the cyan channel in base-image replaced with the cyan channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace.\nCopyMagenta\nThe resulting image is the magenta channel in base-image replaced with the magenta channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace.\nCopyYellow\nThe resulting image is the yellow channel in base-image replaced with the yellow channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace.\nCopyBlack\nThe resulting image is the black channel in base-image replaced with the black channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace. If change-image is not in CMYK space, then the change-image pixel intensities are used.\n-compress \ntype\nthe type of image compression\nChoices are: None, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA.\nSpecify +compress to store the binary image in an uncompressed format. The default is the compression type of the specified image file.\n\"Lossless\" refers to lossless JPEG, which is only available if the JPEG library has been patched to support it. Use of lossless JPEG is generally not recommended.\nUse the -quality option to set the compression level to be used by JPEG, PNG, MIFF, and MPEG encoders. Use the -sampling-factor option to set the sampling factor to be used by the DPX, JPEG, MPEG, and YUV encoders for downsampling the chroma channels.\n-contrast\nenhance or reduce the image contrast\nThis option enhances the intensity differences between the lighter and darker elements of the image. Use -contrast to enhance the image or +contrast to reduce the image contrast.\nFor a more pronounced effect you can repeat the option:\n\n    gm convert rose: -contrast -contrast rose_c2.png\n\n-convolve \nkernel\nconvolve image with the specified convolution kernel\nThe kernel is specified as a comma-separated list of floating point values, ordered left-to right, starting with the top row. The order of the kernel is determined by the square root of the number of entries. Presently only square kernels are supported.\n-create-directories\ncreate output directory if required\nUse this option with -output-directory if the input paths contain subdirectories and it is desired to create similar subdirectories in the output directory. Without this option, mogrify will fail if the required output directory does not exist.\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\nSee -geometry for details about the geometry specification.\nThe width and height give the size of the image that remains after cropping, and x and y are offsets that give the location of the top left corner of the cropped image with respect to the original image. To specify the amount to be removed, use -shave instead.\nIf the x and y offsets are present, a single image is generated, consisting of the pixels from the cropping region. The offsets specify the location of the upper left corner of the cropping region measured downward and rightward with respect to the upper left corner of the image. If the -gravity option is present with NorthEast, East, or SouthEast gravity, it gives the distance leftward from the right edge of the image to the right edge of the cropping region. Similarly, if the -gravity option is present with SouthWest, South, or SouthEast gravity, the distance is measured upward between the bottom edges.\nIf the x and y offsets are omitted, a set of tiles of the specified geometry, covering the entire input image, is generated. The rightmost tiles and the bottom tiles are smaller if the specified geometry extends beyond the dimensions of the input image.\n-cycle \namount\ndisplace image colormap by amount\nAmount defines the number of positions each colormap entry isshifted.\n-debug \nevents\nenable debug printout\nThe events parameter specifies which events are to be logged. It can be either None, All, or a comma-separated list consisting of one or more of the following domains: Annotate, Blob, Cache, Coder, Configure, Deprecate, Error, Exception, Locale, Render,Resource, TemporaryFile, Transform, Warning, X11, or User. For example, to log cache and blob events, use\n    gm convert -debug \nCache,Blob\n rose: rose.png\n\n\n\nThe \"User\" domain is normally empty, but developers can log \"User\" events in their private copy of GraphicsMagick.\nUse the -log option to specify the format for debugging output.\nUse +debug to turn off all logging.\nAn alternative to using -debug is to use the MAGICK_DEBUG environment variable. The allowed values for the MAGICK_DEBUG environment variable are the same as for the -debug option.\n-deconstruct\nbreak down an image sequence into constituent parts\nThis option compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers. This method can undo a coalesced sequence returned by the -coalesce option, and is useful for removing redundant information from a GIF or MNG animation.\nThe sequence of images is terminated by the appearance of any option. If the -deconstruct option appears after all of the input images, all images are deconstructed.\n-define \nkey\n{=\nvalue\n},...\nadd \ncoder/decoder\n specific options\nThis option creates one or more definitions for coders and decoders to use while reading and writing image data. Definitions may be passed to coders and decoders to control options that are specific to certain image formats. If value is missing for a definition, an empty-valued definition of a flag will be created with that name. This is used to control on/off options. Use +define \nkey\n,... to remove definitions previously created. Use +define \"*\" to remove all existing definitions.\nThe following definitions may be created:\ncineon:colorspace={rgb|cineonlog}\nUse the cineon:colorspace option when reading a Cineon file to specify the colorspace the Cineon file uses. This overrides the colorspace type implied by the DPX header (if any).\ndpx:bits-per-sample=\nvalue\nIf the dpx:bits-per-sample key is defined, GraphicsMagick will write DPX images with the specified bits per sample, overriding any existing depth value. If this option is not specified, then the value is based on the existing image depth value from the original image file. The DPX standard supports bits per sample values of 1, 8, 10, 12, and 16. Many DPX readers demand a sample size of 10 bits with type A padding (see below).\ndpx:colorspace={rgb|cineonlog}\nUse the dpx:colorspace option when reading a DPX file to specify the colorspace the DPX file uses. This overrides the colorspace type implied by the DPX header (if any).\ndpx:packing-method={packed|a|b|lsbpad|msbpad}\nDPX samples are output within 32-bit words. They may be tightly packed end-to-end within the words (\"packed\"), padded with null bits to the right of the sample (\"a\" or \"lsbpad), or padded with null bits to the left of the sample (\"b\" or \"msbpad\"). This option only has an effect for sample sizes of 10 or 12 bits. If samples are not packed, the DPX standard recommends type A padding. Many DPX readers demand a sample size of 10 bits with type A padding.\ndpx:pixel-endian={lsb|msb}\nAllows the user to specify the endian order of the pixels when reading or writing the DPX files. Sometimes this is useful if the file is (or must be) written incorrectly so that the file header and the pixels use different endianness.\ndpx:swap-samples={true|false}\nGraphicsMagick strives to adhere to the DPX standard but certain aspects of the standard can be quite confusing. As a result, some 10-bit DPX files have Red and Blue interchanged, or Cb and Cr interchanged due to an different interpretation of the standard, or getting the wires crossed. The swap-samples option may be supplied when reading or writing in order to read or write using the necessary sample order.\njp2:rate=\nvalue\nSpecify the compression factor to use while writing JPEG-2000 files. The compression factor is the reciprocal of the compression ratio. The valid range is 0.0 to 1.0, with 1.0 indicating lossless compression. If defined, this value overrides the -quality setting. The default quality setting of 75 results in a rate value of 0.06641.\njpeg:block-smoothing={true|false}\nEnables or disables block smoothing when reading a JPEG file (default enabled).\njpeg:dct-method=\nvalue\nSelects the IJG JPEG library DCT implementation to use. The encoding implementations vary in speed and encoding error. The available choices for value are islow, ifast, float, default and fastest. Note that fastest might not necessarily be fastest on your CPU, depending on the choices made when the JPEG library was built and how your CPU behaves.\njpeg:fancy-upsampling={true|false}\nEnables or disables fancy upsampling when reading a JPEG file (default enabled).\njpeg:optimize-coding={true|false}\nSelects if huffman encoding should be used. Huffman encoding is enabled by default, but may be disabled for very large images since it encoding requires that the entire image be buffered in memory. Huffman encoding produces smaller JPEG files at the expense of added compression time and memory consumption.\njpeg:preserve-settings\nIf the jpeg:preserve-settings flag is defined, the JPEG encoder will use the same \"quality\" and \"sampling-factor\" settings that were found in the input file, if the input was in JPEG format. These settings are also preserved if the input is a JPEG file and the output is a JNG file. If the colorspace of the output file differs from that of the input file, the quality setting is preserved but the sampling-factors are not.\npcl:fit-to-page\nIf the pcl:fit-to-page flag is defined, then the printer is requested to scale the image to fit the page size (width and/or height).\npdf:use-cropbox={true|false}\nIf the pdf:use-cropbox flag is set to true, then Ghostscript is requested to apply the PDF crop box.\npdf:stop-on-error={true|false}\nIf the pdf:stop-on-error flag is set to true, then Ghostscript is requested to stop processing the PDF when the first error is encountered. Otherwise it will attempt to process all requested pages.\nps:imagemask\nIf the ps:imagemask flag is defined, the PS3 and EPS3 coders will create Postscript files that render bilevel images with the Postscript imagemask operator instead of the image operator.\ntiff:alpha={unspecified|associated|unassociated}\nSpecify the TIFF alpha channel type when reading or writing TIFF files, overriding the normal value. The default alpha channel type for new files is unspecified alpha. Existing alpha settings are preserved when converting from one TIFF file to another. When a TIFF file uses associated alpha, the image pixels are pre-multiplied (i.e. altered) with the alpha channel. Files with \"associated\" alpha appear as if they were alpha composited on a black background when the matte channel is disabled. If the unassociated alpha type is selected, then the alpha channel is saved without altering the pixels. Photoshop recognizes associated alpha as transparency information, if the file is saved with unassociated alpha, the alpha information is loaded as an independent channel. Note that for many years, ImageMagick and GraphicsMagick marked TIFF files as using associated alpha, without properly pre-multiplying the pixels.\ntiff:fill-order={msb2lsb|lsb2msb}\nIf the tiff:fill-order key is defined, GraphicsMagick will use it to determine the bit fill order used while writing TIFF files. The normal default is \"msb2lsb\", which matches the native bit order of all modern CPUs. The only exception to this is when Group3 or Group4 FAX compression is requested since FAX machines send data in bit-reversed order and therefore RFC 2301 recommends using reverse order.\ntiff:group-three-options=\nvalue\nIf the tiff:group-three-options key is defined, GraphicsMagick will use it to set the group3 options tag when writing group3-compressed TIFF. Please see the TIFF specification for the usage of this tag. The default value is 4.\ntiff:ignore-tags=\ntags\nIf the tiff:ignore-tags key is defined, then it is used as a list of comma-delimited integer TIFF tag values to ignore while reading the TIFF file. This is useful in order to be able to read files which which otherwise fail to read due to problems with TIFF tags. Note that some TIFF tags are required in order to be able to read the image data at all.\ntiff:report-warnings={false|true}\nIf the tiff:report-warnings key is defined and set to true, then TIFF warnings are reported as a warning exception rather than as a coder log message. Such warnings are reported after the image has been read or written. Most TIFF warnings are benign but sometimes they may help deduce problems with the TIFF file, or help detect that the TIFF file requires a special application to read successfully due to the use of proprietary or specialized extensions.\ntiff:sample-format={unsigned|ieeefp}\nIf the tiff:sample-format key is defined, GraphicsMagick will use it to determine the sample format used while writing TIFF files. The default is \"unsigned\". Specify \"ieeefp\" in order to write floating-point TIFF files with float (32-bit) or double (64-bit) values. Use the tiff:bits-per-sample define to determine the type of floating-point value to use.\ntiff:max-sample-value=\nvalue\nIf the tiff:max-sample-value key is defined, GraphicsMagick will use the assigned value as the maximum floating point value while reading or writing IEEE floating point TIFFs. Otherwise the maximum value is 1.0 or the value obtained from the file's SMaxSampleValue tag (if present). The floating point data is currently not scanned in advance to determine a best maximum sample value so if the range is not 1.0, or the SMaxSampleValue tag is not present, it may be necessary to (intelligently) use this parameter to properly read a file.\ntiff:min-sample-value=\nvalue\nIf the tiff:min-sample-value key is defined, GraphicsMagick will use the assigned value as the minimum floating point value while reading or writing IEEE floating point TIFFs. Otherwise the minimum value is 0.0 or the value obtained from the file's SMinSampleValue tag (if present).\ntiff:bits-per-sample=\nvalue\nIf the tiff:bits-per-sample key is defined, GraphicsMagick will write images with the specified bits per sample, overriding any existing depth value. Value may be any in the range of 1 to 32, or 64 when the default 'unsigned' format is written, or 16/32/24/64 if IEEEFP format is written. Please note that the baseline TIFF 6.0 specification only requires readers to handle certain powers of two, and the values to be handled depend on the nature of the image (e.g. colormapped, grayscale, RGB, CMYK).\ntiff:samples-per-pixel=\nvalue\nIf the tiff:samples-per-pixel key is defined to a value, the TIFF coder will write TIFF images with the defined samples per pixel, overriding any value stored in the image. This option should not normally be used.\ntiff:rows-per-strip=\nvalue\n\nAllows the user to specify the number of rows per TIFF strip. Rounded up to a multiple of 16 when using JPEG compression. Ignored when using tiles.\ntiff:strip-per-page=true\nRequests that the image is written in a single TIFF strip. This is normally the default when group3 or group4 compression is requested within reasonable limits. Requesting a single strip for large images may result in failure due to resource consumption in the writer or reader.\ntiff:tile\nEnable writing tiled TIFF (rather than stripped) using the default tile size. Tiled TIFF organizes the image as an array of smaller images (tiles) in order to enable random access.\ntiff:tile-geometry=\nwidth\nx\nheight\nSpecify the tile size to use while writing tiled TIFF. Width and height should be a multiple of 16. If the value is not a multiple of 16, then it will be rounded down. Enables tiled TIFF if it has not already been enabled. GraphicsMagick does not use tiled storage internally so tiles need to be converted back and forth from the internal scanline-oriented storage to tile-oriented storage. Testing with typical RGB images shows that useful square tile size values range from 128x128 to 1024x1024. Large images which require using a disk-based pixel cache benefit from large tile sizes while images which fit in memory work well with smaller tile sizes.\ntiff:tile-width=\nwidth\nSpecify the tile width to use while writing tiled TIFF. The tile height is then defaulted to an appropriate size. Width should be a multiple of 16. If the value is not a multiple of 16, then it will be rounded down. Enables tiled TIFF if it has not already been enabled.\ntiff:tile-height=\nheight\nSpecify the tile height to use while writing tiled TIFF. The tile width is then defaulted to an appropriate size. Height should be a multiple of 16. If the value is not a multiple of 16, then it will be rounded down. Enables tiled TIFF if it has not already been enabled.\nwebp:lossless={true|false}\nEnable lossless encoding.\nwebp:method={0-6}\nQuality/speed trade-off.\nwebp:image-hint={default,graph,photo,picture}\nHint for image type.\nwebp:target-size=\ninteger\nTarget size in bytes.\nwebp:target-psnr=\nfloat\nMinimal distortion to try to achieve.\nwebp:segments={1-4}\nMaximum number of segments to use.\nwebp:sns-strength={0-100}\nSpatial Noise Shaping.\nwebp:filter-strength={0-100}\nFilter strength.\nwebp:filter-sharpness={0-7}\nFilter sharpness.\nwebp:filter-type={0,1}\nFiltering type. 0 = simple, 1 = strong (only used if filter-strength ??? info \"0 or autofilter is enabled).\nwebp:auto-filter={true|false}\nAuto adjust filter's strength.\nwebp:alpha-compression=\ninteger\nAlgorithm for encoding the alpha plane (0 = none, 1 = compressed with WebP lossless). Default is 1.\nwebp:alpha-filtering=\ninteger\nPredictive filtering method for alpha plane. 0: none, 1: fast, 2: best. Default is 1.\nwebp:alpha-quality={0-100}\nBetween 0 (smallest size) and 100 (lossless). Default is 100.\nwebp:pass=[1..10]\nNumber of entropy-analysis passes.\nwebp:show-compressed={true|false}\nExport the compressed picture back. In-loop filtering is not applied.\nwebp:preprocessing=[0,1,2]\n0=none, 1=segment-smooth, 2=pseudo-random dithering\nwebp:partitions=[0-3]\nlog2(number of token partitions) in [0..3]. Default is 0 for easier progressive decoding.\nwebp:partition-limit={0-100}\nQuality degradation allowed to fit the 512k limit on prediction modes coding (0: no degradation, 100: maximum possible degradation).\nwebp:emulate-jpeg-size={true|false}\nIf true, compression parameters will be remapped to better match the expected output size from JPEG compression. Generally, the output size will be similar but the degradation will be lower.\nwebp:thread-level=\ninteger\nIf non-zero, try and use multi-threaded encoding.\nwebp:low-memory={true|false}\nIf set, reduce memory usage (but increase CPU use)\nFor example, to create a postscript file that will render only the black pixels of a bilevel image, use:\n    gm convert bilevel.tif -define ps:imagemask eps3:stencil.ps\n\n\n\n-delay \n1/100ths of a second\ndisplay the next image after pausing\nThis option is useful for regulating the animation of image sequences Delay/100 seconds must expire before the display of the next image. The default is no delay between each showing of the image sequence. The maximum delay is 65535.\nYou can specify a delay range (e.g. -delay 10-500) which sets the minimum and maximum delay.\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\nThis option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats such as Postscript, PDF, WMF, and SVG into a raster image. Image resolution provides the unit of measure to apply when rendering to an output device or raster image. The default unit of measure is in dots per inch (DPI). The -units option may be used to select dots per centimeter instead.\nThe default resolution is 72 dots per inch, which is equivalent to one point per pixel (Macintosh and Postscript standard). Computer screens are normally 72 or 96 dots per inch while printers typically support 150, 300, 600, or 1200 dots per inch. To determine the resolution of your display, use a ruler to measure the width of your screen in inches, and divide by the number of horizontal pixels (1024 on a 1024x768 display).\nIf the file format supports it, this option may be used to update the stored image resolution. Note that Photoshop stores and obtains image resolution from a proprietary embedded profile. If this profile is not stripped from the image, then Photoshop will continue to treat the image using its former resolution, ignoring the image resolution specified in the standard file header.\nThe density option is an attribute and does not alter the underlying raster image. It may be used to adjust the rendered size for desktop publishing purposes by adjusting the scale applied to the pixels. To resize the image so that it is the same size at a different resolution, use the -resample option.\n-depth \nvalue\ndepth of the image\nThis is the number of bits of color to preserve in the image. Any value between 1 and QuantumDepth (build option) may be specified, although 8 or 16 are the most common values. Use this option to specify the depth of raw images whose depth is unknown such as GRAY, RGB, or CMYK, or to change the depth of any image after it has been read.\nThe depth option is applied to the pixels immediately so it may be used as a form of simple compression by discarding the least significant bits. Reducing the depth in advance may speed up color quantization, and help create smaller file sizes when using a compression algorithm like LZW or ZIP.\n-descend\nobtain image by descending window hierarchy\n-despeckle\nreduce the speckles within an image\n-displace \nhorizontal scale\nx\nvertical scale\nshift image pixels as defined by a displacement map\nWith this option, composite image is used as a displacement map. Black, within the displacement map, is a maximum positive displacement. White is a maximum negative displacement and middle gray is neutral. The displacement is scaled to determine the pixel shift. By default, the displacement applies in both the horizontal and vertical directions. However, if you specify mask, composite image is the horizontal X displacement and mask the vertical Y displacement.\n-display \nhost:display[.screen]\nspecifies the X server to contact\nThis option is used with convert for obtaining image or font from this X server. See X(1).\n-dispose \nmethod\nGIF disposal method\nThe Disposal Method indicates the way in which the graphic is to be treated after being displayed.\nHere are the valid methods:\nUndefined       No disposal specified.\nNone            Do not dispose between frames.\nBackground      Overwrite the image area with\n                the background color.\nPrevious        Overwrite the image area with\n                what was there prior to rendering\n                the image.\n\n\n\n\n-dissolve \npercent\ndissolve an image into another by the given percent\nThe opacity of the composite image is multiplied by the given percent, then it is composited over the main image.\n-dither\napply Floyd/Steinberg error diffusion to the image\nThe basic strategy of dithering is to trade intensity resolution for spatial resolution by averaging the intensities of several neighboring pixels. Images which suffer from severe contouring when reducing colors can be improved with this option.\nThe -colors or -monochrome option is required for this option to take effect.\nUse +dither to turn off dithering and to render PostScript without text or graphic aliasing. Disabling dithering often (but not always) leads to decreased processing time.\n-draw \nstring\nannotate an image with one or more graphic primitives\nUse this option to annotate an image with one or more graphic primitives. The primitives include shapes, text, transformations, and pixel operations. The shape primitives are\npoint           x,y\nline            x0,y0 x1,y1\nrectangle       x0,y0 x1,y1\nroundRectangle  x0,y0 x1,y1 wc,hc\narc             x0,y0 x1,y1 a0,a1\nellipse         x0,y0 rx,ry a0,a1\ncircle          x0,y0 x1,y1\npolyline        x0,y0  ...  xn,yn\npolygon         x0,y0  ...  xn,yn\nBezier          x0,y0  ...  xn,yn\npath            path specification\nimage           operator x0,y0 w,h filename\n\n\n\n\nThe text primitive is\ntext            x0,y0 string\n\n\n\n\nThe text gravity primitive is\ngravity         NorthWest, North, NorthEast, West, Center,\n                East, SouthWest, South, or SouthEast\n\n\n\n\nThe text gravity primitive only affects the placement of text and does not interact with the other primitives. It is equivalent to using the -gravity commandline option, except that it is limited in scope to the -draw option in which it appears.\nThe transformation primitives are\nrotate          degrees\ntranslate       dx,dy\nscale           sx,sy\nskewX           degrees\nskewY           degrees\n\n\n\n\nThe pixel operation primitives are\ncolor           x0,y0 method\nmatte           x0,y0 method\n\n\n\n\nThe shape primitives are drawn in the color specified in the preceding -stroke option. Except for the line and point primitives, they are filled with the color specified in the preceding -fill option. For unfilled shapes, use -fill none\n.\nPoint requires a single coordinate.\nLine requires a start and end coordinate.\nRectangle expects an upper left and lower right coordinate.\nRoundRectangle has the upper left and lower right coordinates and the width and height of the corners.\nCircle has a center coordinate and a coordinate for the outer edge.\nUse Arc to inscribe an elliptical arc within a rectangle. Arcs require a start and end point as well as the degree of rotation (e.g. 130,30 200,100 45,90).\nUse Ellipse to draw a partial ellipse centered at the given point with the x-axis and y-axis radius and start and end of arc in degrees (e.g. 100,100 100,150 0,360).\nFinally, polyline and polygon require three or more coordinates to define its boundaries. Coordinates are integers separated by an optional comma. For example, to define a circle centered at 100,100 that extends to 150,150 use:\n-draw \ncircle 100,100 150,150\n\n\n\n\n\nPaths (See Paths) represent an outline of an object which is defined in terms of moveto (set a new current point), lineto (draw a straight line), curveto (draw a curve using a cubic Bezier), arc (elliptical or circular arc) and closepath (close the current shape by drawing a line to the last moveto) elements. Compound paths (i.e., a path with subpaths, each consisting of a single moveto followed by one or more line or curve operations) are possible to allow effects such as \"donut holes\" in objects.\nUse image to composite an image with another image. Follow the image keyword with the composite operator, image location, image size, and filename:\n-draw \nimage Over 100,100 225,225 image.jpg\n\n\n\n\n\nYou can use 0,0 for the image size, which means to use the actual dimensions found in the image header. Otherwise, it will be scaled to the given dimensions. See -compose for a description of the composite operators.\nUse text to annotate an image with text. Follow the text coordinates with a string. If the string has embedded spaces, enclose it in single or double quotes. Optionally you can include the image filename, type, width, height, or other image attribute by embedding special format character. See -comment for details.\nFor example,\n-draw \ntext 100,100 \n%m:%f %wx%h\n\n\n\n\n\nannotates the image with MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480.\nIf the first character of string is @, the text is read from a file titled by the remaining characters in the string.\nRotate rotates subsequent shape primitives and text primitives about the origin of the main image. If the -region option precedes the -draw option, the origin for transformations is the upper left corner of the region.\nTranslate translates them.\nScale scales them.\nSkewX and SkewY skew them with respect to the origin of the main image or the region.\nThe transformations modify the current affine matrix, which is initialized from the initial affine matrix defined by the -affine option. Transformations are cumulative within the -draw option. The initial affine matrix is not affected; that matrix is only changed by the appearance of another -affine option. If another -draw option appears, the current affine matrix is reinitialized from the initial affine matrix.\nUse color to change the color of a pixel to the fill color (see -fill). Follow the pixel coordinate with a method:\npoint\nreplace\nfloodfill\nfilltoborder\nreset\n\n\n\n\nConsider the target pixel as that specified by your coordinate. The point method recolors the target pixel. The replace method recolors any pixel that matches the color of the target pixel. Floodfill recolors any pixel that matches the color of the target pixel and is a neighbor, whereas filltoborder recolors any neighbor pixel that is not the border color. Finally, reset recolors all pixels.\nUse matte to the change the pixel matte value to transparent. Follow the pixel coordinate with a method (see the color primitive for a description of methods). The point method changes the matte value of the target pixel. The replace method changes the matte value of any pixel that matches the color of the target pixel. Floodfill changes the matte value of any pixel that matches the color of the target pixel and is a neighbor, whereas filltoborder changes the matte value of any neighbor pixel that is not the border color (-bordercolor). Finally reset changes the matte value of all pixels.\nYou can set the primitive color, font, and font bounding box color with -fill, -font, and -box respectively. Options are processed in command line order so be sure to use these options before the -draw option.\n-edge \nradius\ndetect edges within an image\n-emboss \nradius\nemboss an image\n-encoding \ntype\nspecify the text encoding\nChoose from AdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung.\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\nMSB indicates big-endian (e.g. SPARC, Motorola 68K) while LSB indicates little-endian (e.g. Intel 'x86, VAX) byte ordering. Native indicates to use the normal ordering for the current CPU. This option currently only influences the CMYK, DPX, GRAY, RGB, and TIFF, formats.\nUse +endian to revert to unspecified endianness.\n-enhance\napply a digital filter to enhance a noisy image\n-equalize\nperform histogram equalization to the image\n-extent \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\ncomposite image on background color canvas image\nThis option composites the image on a new background color (-background) canvas image of size \nwidth\nx\nheight\n. The existing image content is composited at the position specified by geometry x and y offset and/or desired gravity (-gravity) using the current image compose (-compose) method. Image content which falls outside the bounds of the new image dimensions is discarded.\nFor example, this command creates a thumbnail of an image, and centers it on a red color backdrop image, offsetting the canvas ten pixels to the left and five pixels up, with respect to the thumbnail:\ngm convert infile.jpg -thumbnail 120x80 -background red -gravity center \\\n        -extent 140x100-10-5 outfile.jpg\n\n\n\n\nThis command reduces or expands a JPEG image to fit on an 800x600 display:\ngm convert -size 800x600 input.jpg \\\n        -resize 800x600 -background black \\\n        -compose Copy -gravity center \\\n        -extent 800x600 \\\n        -quality 92 output.jpg\n\n\n\n\nIf the aspect ratio of the input image isn't exactly 4:3, then the image is centered on an 800x600 black canvas.\n-file \nfilename\nwrite annotated difference image to file\nIf -file is specified, then an annotated difference image is generated and written to the specified file. Pixels which differ between the reference and compare images are modified from those in the compare image so that the changed pixels become more obvious. Some images may require use of an alternative highlight style (see -highlight-style) or highlight color (see -highlight-color) before the changes are obvious.\n-fill \ncolor\ncolor to use when filling a graphic primitive\nColors are represented in GraphicsMagick in the same form used by SVG. Use \"gm convert -list color\" to list named colors:\nname               (named color)\n#RGB               (hex numbers, 4 bits each)\n#RRGGBB            (8 bits each)\n#RRRGGGBBB         (12 bits each)\n#RRRRGGGGBBBB      (16 bits each)\n#RGBA              (4 bits each)\n#RRGGBBAA          (8 bits each)\n#RRRGGGBBBAAA      (12 bits each)\n#RRRRGGGGBBBBAAAA  (16 bits each)\nrgb(r,g,b)         (r,g,b are decimal numbers)\nrgba(r,g,b,a)      (r,g,b,a are decimal numbers)\n\n\n\n\nEnclose the color specification in quotation marks to prevent the \"#\" or the parentheses from being interpreted by your shell.\nFor example,\ngm convert -fill blue ...\ngm convert -fill \n#ddddff\n ...\ngm convert -fill \nrgb(65000,65000,65535)\n ...\n\n\n\n\nThe shorter forms are scaled up, if necessary by replication. For example, #3af, #33aaff, and #3333aaaaffff are all equivalent.\nSee -draw for further details.\n-filter \ntype\nuse this type of filter when resizing an image\nUse this option to affect the resizing operation of an image (see -geometry). Choose from these filters (ordered by approximate increasing CPU time):\nPoint\nBox\nTriangle\nHermite\nHanning\nHamming\nBlackman\nGaussian\nQuadratic\nCubic\nCatrom\nMitchell\nLanczos\nBessel\nSinc\n\n\n\n\nThe default filter is automatically selected to provide the best quality while consuming a reasonable amount of time. The Mitchell filter is used if the image supports a palette, supports a matte channel, or is being enlarged, otherwise the Lanczos filter is used.\n-flatten\nflatten a sequence of images\nIn some file formats (e.g. Photoshop's PSD) complex images may be represented by \"layers\" (independent images) which must be composited in order to obtain the final rendition. The -flatten option accomplishes this composition. The sequence of images is replaced by a single image created by compositing each image in turn, while respecting composition operators and page offsets. While -flatten is immediately useful for eliminating layers, it is also useful as a general-purpose composition tool.\nThe sequence of images is terminated by the appearance of any option. If the -flatten option appears after all of the input images, all images are flattened. Also see -mosaic which is similar to -flatten except that it adds a suitably-sized canvas base image.\nFor example, this composites an image on top of a 640x400 transparent black canvas image:\ngm convert -size 640x300 xc:transparent \\\n        -compose over -page +0-100 \\\n        frame.png -flatten output.png\n\n\n\n\nand this flattens a Photoshop PSD file:\ngm convert input.psd -flatten output.png\n\n\n\n\n-flip\ncreate a \"mirror image\"\nreflect the scanlines in the vertical direction.\n-flop\ncreate a \"mirror image\"\nreflect the scanlines in the horizontal direction.\n-font \nname\nuse this font when annotating the image with text\nYou can tag a font to specify whether it is a PostScript, TrueType, or X11 font. For example, Arial.ttf is a TrueType font, ps:helvetica is PostScript, and x:fixed is X11.\n-foreground \ncolor\ndefine the foreground color\nThe color is specified using the format described under the -fill option.\n-format \ntype\nthe image format type\nWhen used with the mogrify utility, this option will convert any image to the image format you specify. See GraphicsMagick(1) for a list of image format types supported by GraphicsMagick, or see the output of 'gm -list format'.\nBy default the file is written to its original name. However, if the filename extension matches a supported format, the extension is replaced with the image format type specified with -format. For example, if you specify tiff as the format type and the input image filename is image.gif, the output image filename becomes image.tiff.\n-format \nstring\noutput formatted image characteristics\nWhen used with the identify utility, or the convert utility with output written to the 'info:-' file specification, use this option to print information about the image in a format of your choosing. You can include the image filename, type, width, height, Exif data, or other image attributes by embedding special format characters:\n%b\n   \nfile\n \nsize\n\n\n%c\n   \ncomment\n\n\n%d\n   \ndirectory\n\n\n%e\n   \nfilename\n \nextension\n\n\n%f\n   \nfilename\n\n\n%g\n   \npage\n \ndimensions\n \nand\n \noffsets\n\n\n%h\n   \nheight\n\n\n%i\n   \ninput\n \nfilename\n\n\n%k\n   \nnumber\n \nof\n \nunique\n \ncolors\n\n\n%l\n   \nlabel\n\n\n%m\n   \nmagick\n\n\n%n\n   \nnumber\n \nof\n \nscenes\n\n\n%o\n   \noutput\n \nfilename\n\n\n%p\n   \npage\n \nnumber\n\n\n%q\n   \nimage\n \nbit\n \ndepth\n\n\n%r\n   \nimage\n \ntype\n \ndescription\n\n\n%s\n   \nscene\n \nnumber\n\n\n%t\n   \ntop\n \nof\n \nfilename\n\n\n%u\n   \nunique\n \ntemporary\n \nfilename\n\n\n%w\n   \nwidth\n\n\n%x\n   \nhorizontal\n \nresolution\n\n\n%y\n   \nvertical\n \nresolution\n\n\n%\nA\n   \ntransparency\n \nsupported\n\n\n%\nC\n   \ncompression\n \ntype\n\n\n%\nD\n   \nGIF\n \ndisposal\n \nmethod\n\n\n%\nG\n   \nOriginal\n \nwidth\n \nand\n \nheight\n\n\n%\nH\n   \npage\n \nheight\n\n\n%\nM\n   \noriginal\n \nfilename\n \nspecification\n\n\n%\nO\n   \npage\n \noffset\n \n(\nx\n,\ny\n)\n\n\n%\nP\n   \npage\n \ndimensions\n \n(\nwidth\n,\nheight\n)\n\n\n%\nQ\n   \ncompression\n \nquality\n\n\n%\nT\n   \ntime\n \ndelay\n \n(\nin\n \ncenti\n-\nseconds\n)\n\n\n%\nU\n   \nresolution\n \nunits\n\n\n%\nW\n   \npage\n \nwidth\n\n\n%\nX\n   \npage\n \nhorizontal\n \noffset\n \n(\nx\n)\n\n\n%\nY\n   \npage\n \nvertical\n \noffset\n \n(\ny\n)\n\n\n%\n@\n   \ntrim\n \nbounding\n \nbox\n\n\n%\n#\n   \nsignature\n\n\n\\\nn\n   \nnewline\n\n\n\\\nr\n   \ncarriage\n \nreturn\n\n\n%%\n   \n%\n\n\n\n\n\nFor example,\n-format \n%m:%f %wx%h\n\n\n\n\n\ndisplays MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480.\nIf the first character of string is @, the format is read from a file titled by the remaining characters in the string.\nThe values of image type (%p) which may be returned include:\nBilevel\nGrayscale\nGrayscaleMatte\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\n\n\n\n\nYou can also use the following special formatting syntax to print Exif information contained in the file:\n%[EXIF:`\ntag\n`]\n\n\n\n\n\nWhere \"\ntag\n\" may be one of the following:\n*  (print all Exif tags, in keyword=data format)\n!  (print all Exif tags, in tag_number format)\n#hhhh (print data for Exif tag #hhhh)\nImageWidth\nImageLength\nBitsPerSample\nCompression\nPhotometricInterpretation\nFillOrder\nDocumentName\nImageDescription\nMake\nModel\nStripOffsets\nOrientation\nSamplesPerPixel\nRowsPerStrip\nStripByteCounts\nXResolution\nYResolution\nPlanarConfiguration\nResolutionUnit\nTransferFunction\nSoftware\nDateTime\nArtist\nWhitePoint\nPrimaryChromaticities\nTransferRange\nJPEGProc\nJPEGInterchangeFormat\nJPEGInterchangeFormatLength\nYCbCrCoefficients\nYCbCrSubSampling\nYCbCrPositioning\nReferenceBlackWhite\nCFARepeatPatternDim\nCFAPattern\nBatteryLevel\nCopyright\nExposureTime\nFNumber\nIPTC/NAA\nExifOffset\nInterColorProfile\nExposureProgram\nSpectralSensitivity\nGPSInfo\nISOSpeedRatings\nOECF\nExifVersion\nDateTimeOriginal\nDateTimeDigitized\nComponentsConfiguration\nCompressedBitsPerPixel\nShutterSpeedValue\nApertureValue\nBrightnessValue\nExposureBiasValue\nMaxApertureValue\nSubjectDistance\nMeteringMode\nLightSource\nFlash\nFocalLength\nMakerNote\nUserComment\nSubSecTime\nSubSecTimeOriginal\nSubSecTimeDigitized\nFlashPixVersion\nColorSpace\nExifImageWidth\nExifImageLength\nInteroperabilityOffset\nFlashEnergy\nSpatialFrequencyResponse\nFocalPlaneXResolution\nFocalPlaneYResolution\nFocalPlaneResolutionUnit\nSubjectLocation\nExposureIndex\nSensingMethod\nFileSource\nSceneType\n\n\n\n\nJPEG specific information (from reading a JPEG file) may be obtained like this:\n%[JPEG-`\ntag\n`]\n\n\n\n\n\nWhere \"\ntag\n\" may be one of the following:\n*                 (all JPEG-related tags, in\n                    keyword=data format)\nQuality           IJG JPEG \nquality\n estimate\nColorspace        JPEG colorspace numeric ID\nColorspace-Name   JPEG colorspace name\nSampling-factors  JPEG sampling factors\n\n\n\n\nPlease note that JPEG has no notion of \"quality\" and that the quality metric used by, and estimated by the software is based on the quality metric established by IJG JPEG 6b. Other encoders (e.g. that used by Adobe Photoshop) use different encoding metrics.\nSurround the format specification with quotation marks to prevent your shell from misinterpreting any spaces and square brackets.\n-frame \nwidth\nx\nheight\n+\nouter bevel width\n+\ninner bevel width\nsurround the image with an ornamental border\nSee -geometry for details about the geometry specification. The -frame option is not affected by the -gravity option.\nThe color of the border is specified with the -mattecolor command line option.\n-frame\ninclude the X window frame in the imported image\n-fuzz \ndistance\n{%}\ncolors within this Euclidean distance are considered equal\nA number of algorithms search for a target color. By default the color must be exact. Use this option to match colors that are close (in Euclidean distance) to the target color in RGB 3D space. For example, if you want to automatically trim the edges of an image with -trim but the image was scanned and the target background color may differ by a small amount. This option can account for these differences.\nThe distance can be in absolute intensity units or, by appending \"%\", as a percentage of the maximum possible intensity (255, 65535, or 4294967295).\n-gamma \nvalue\nlevel of gamma correction\nThe same color image displayed on two different workstations may look different due to differences in the display monitor. Use gamma correction to adjust for this color difference. Reasonable values extend from 0.8 to 2.3. Gamma less than 1.0 darkens the image and gamma greater than 1.0 lightens it. Large adjustments to image gamma may result in the loss of some image information if the pixel quantum size is only eight bits (quantum range 0 to 255).\nYou can apply separate gamma values to the red, green, and blue channels of the image with a gamma value list delimited with slashes (e.g., 1.7/2.3/1.2).\nUse +gamma value to set the image gamma level without actually adjusting the image pixels. This option is useful if the image is of a known gamma but not set as an image attribute (e.g. PNG images).\n-gaussian \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\nUse the given radius and standard deviation (sigma).\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\nThe -geometry option is used for a number of different purposes, depending on the utility it is used with.\nFor the X11 commands ('animate', 'display', and 'import'), it specifies the preferred size and location of the Image window. By default, the window size is the image size and the location is chosen by you (or your window manager) when it is mapped.\nFor the 'import', 'convert', 'mogrify' utility commands it may be used to specify the desired size when resizing an image. In this case, symbols representing resize options may be appended to the geometry string to influence how the resize request is treated.\nSee later notes corresponding to usage by particular commands. The following notes apply to when -geometry is used to express a resize request, taking into account the current properties of the image.\nBy default, the width and height are maximum values. That is, the image is expanded or contracted to fit the width and height value while maintaining the aspect ratio of the image.\nAppend a ^ to the geometry so that the image aspect ratio is maintained when the image is resized, but the resulting width or height are treated as minimum values rather than maximum values.\nAppend a ! (exclamation point) to the geometry to force the image size to exactly the size you specify. For example, if you specify 640x480! the image width is set to 640 pixels and height to 480.\nIf only the width is specified, without the trailing 'x', then height is set to width (e.g., -geometry 100 is the same as -geometry 100x100). If only the width is specified but with the trailing 'x', then width assumes the value and the height is chosen to maintain the aspect ratio of the image. Similarly, if only the height is specified prefixed by 'x' (e.g., -geometry x256), the width is chosen to maintain the aspect ratio.\nTo specify a percentage width or height instead, append %. The image size is multiplied by the width and height percentages to obtain the final image dimensions. To increase the size of an image, use a value greater than 100 (e.g. 125%). To decrease an image's size, use a percentage less than 100.\nUse @ to specify the maximum area in pixels of an image.\nUse ??? info \"to change the dimensions of the image only if its width or height exceeds the geometry specification. \n resizes the image only if both of its dimensions are less than the geometry specification. For example, if you specify '640x480\n' and the image size is 256x256, the image size does not change. However, if the image is 512x512 or 1024x1024, it is resized to 480x480. Enclose the geometry specification in quotation marks to prevent the `\n or ??? info \"from being interpreted by your shell as a file redirection.\nWhen used with animate and display, offsets are handled in the same manner as in X(1) and the -gravity option is not used. If the x is negative, the offset is measured leftward from the right edge of the screen to the right edge of the image being displayed. Similarly, negative y is measured between the bottom edges. The offsets are not affected by \"%\"; they are always measured in pixels.\nWhen used as a composite option, -geometry gives the dimensions of the image and its location with respect to the composite image. If the -gravity option is present with NorthEast, East, or SouthEast gravity, the x represents the distance from the right edge of the image to the right edge of the composite image. Similarly, if the -gravity option is present with SouthWest, South, or SouthEast gravity, y is measured between the bottom edges. Accordingly, a positive offset will never point in the direction outside of the image. The offsets are not affected by \"%\"; they are always measured in pixels. To specify the dimensions of the composite image, use the -resize option.\nWhen used as a convert, import or mogrify option, -geometry is synonymous with -resize and specifies the size of the output image. The offsets, if present, are ignored.\nWhen used as a montage option, -geometry specifies the image size and border size for each tile; default is 256x256+0+0. Negative offsets (border dimensions) are meaningless. The -gravity option affects the placement of the image within the tile; the default gravity for this purpose is Center. If the \"%\" sign appears in the geometry specification, the tile size is the specified percentage of the original dimensions of the first tile. To specify the dimensions of the montage, use the -resize option.\n-gravity \ntype\ndirection primitive gravitates to when annotating the image.\nChoices are: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast.\nThe direction you choose specifies where to position the text when annotating the image. For example Center gravity forces the text to be centered within the image. By default, the image gravity is NorthWest. See -draw for more details about graphic primitives. Only the text primitive is affected by the -gravity option.\nThe -gravity option is also used in concert with the -geometry option and other options that take \ngeometry??? info \"as a parameter, such as the -crop option. See -geometry for details of how the -gravity option interacts with the\nx??? info \"and `\ny??? info \"parameters of a geometry specification.\nWhen used as an option to composite, -gravity gives the direction that the image gravitates within the composite.\nWhen used as an option to montage, -gravity gives the direction that an image gravitates within a tile. The default gravity is Center for this purpose.\n-green-primary \nx\n,\ny\ngreen chromaticity primary point\n-hald-clut \nclut\napply a Hald CLUT to the image\nA Hald CLUT (\"Color Look-Up Table\") is a special square color image which contains a look-up table for red, green, and blue. The size of the Hald CLUT image is determined by its order. The width (and height) of a Hald CLUT is the cube of the order. For example, a Hald CLUT of order 8 is 512x512 pixels (262,144 colors) and of order 16 is 4096x4096 (16,777,216 colors). A special CLUT is the identity CLUT which which causes no change to the input image. In order to use the Hald CLUT, one takes an identity CLUT and adjusts its colors in some way. The modified CLUT can then be used to transform any number of images in an identical way.\nGraphicsMagick contains a built-in identity CLUT generator via the IDENTITY coder. For example reading from the file name IDENTITY:8 returns an identity CLUT of order 8. Typical Hald CLUT identity images have an order of between 8 and 16. The default order for the IDENTITY CLUT generator is 8. Interpolation is used so it is not usually necessary for CLUT images to be very large. The PNG file format is ideal for storing Hald CLUT images because it compresses them very well.\n-help\nprint usage instructions\n-highlight-color \ncolor\npixel annotation color\nSpecifies the color to use when annotating difference pixels.\n-highlight-style \nstyle\npixel annotation style\nSpecifies the pixel difference annotation style used to draw attention to changed pixels. May be one of Assign, Threshold, Tint, or XOR; where Assign replaces the pixel with the highlight color (see -highlight-color), Threshold replaces the pixel with black or white based on the difference in intensity, Tint alpha tints the pixel with the highlight color, and XOR does an XOR between the pixel and the highlight color.\n-iconGeometry \ngeometry\nspecify the icon geometry\nOffsets, if present in the geometry specification, are handled in the same manner as the -geometry option, using X11 style to handle negative offsets.\n-iconic\niconic animation\n-immutable\nmake image immutable\n-implode \nfactor\nimplode image pixels about the center\n-intent \ntype\nuse this type of rendering intent when managing the image color\nUse this option to affect the the color management operation of an image (see -profile). Choose from these intents: Absolute, Perceptual, Relative, Saturation.\nThe default intent is undefined.\n-interlace \ntype\nthe type of interlacing scheme\nChoices are: None, Line, Plane, or Partition. The default is None.\nThis option is used to specify the type of interlacing scheme for raw image formats such as RGB or YUV.\nNone means do not interlace (RGBRGBRGBRGBRGBRGB...),\nLine uses scanline interlacing (RRR...GGG...BBB...RRR...GGG...BBB...), and\nPlane uses plane interlacing (RRRRRR...GGGGGG...BBBBBB...).\nPartition is like plane except the different planes are saved to individual files (e.g. image.R, image.G, and image.B).\nUse Line to create an interlaced PNG or GIF or progressive JPEG image.\n-label \nname\nassign a label to an image\nUse this option to assign a specific label to the image, when writing to an image format that supports labels, such as TIFF, PNG, MIFF, or PostScript. You can include the the image filename, type, width, height, or other image attribute by embedding special format character. A label is not drawn on the image, but is embedded in the image datastream via a \"Label\" tag or similar mechanism. If you want the label to be visible on the image itself, use the -draw option. See -comment for details.\nFor example,\n-label \n%m:%f %wx%h\n\n\n\n\n\nproduces an image label of MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480.\nIf the first character of string is @, the image label is read from a file titled by the remaining characters in the string.\nIf the -label option appears multiple times, only the last label is stored.\nIn PNG images, the label is stored in a tEXt or zTXt chunk with the keyword \"label\".\nWhen converting to PostScript, use this option to specify a header string to print above the image. Specify the label font with -font.\nWhen creating a montage, by default the label associated with an image is displayed with the corresponding tile in the montage. Use the +label option to suppress this behavior.\n-lat \nwidth\nx\nheight\n{+-}\noffset\n{%}\nperform local adaptive thresholding\nPerform local adaptive thresholding using the specified width, height, and offset. The offset is a distance in sample space from the mean, as an absolute integer ranging from 0 to the maximum sample value or as a percentage. If the percent option is supplied, then the offset is computed as a percentage of the quantum range. It is strongly recommended to use the percent option so that results are not sensitive to pixel quantum depth.\nFor example,\n-colorspace gray -lat \n10x10-5%\n\n\n\n\n\nwill help clarify a scanned grayscale or color document, producing a bi-level equivalent.\n-level \nblack_point\n{,\ngamma\n}{,\nwhite_point\n}{%}\nadjust the level of image contrast\nGive one, two or three values delimited with commas: black-point, gamma, white-point (e.g. 10,1.0,250 or 2%,0.5,98%). The black and white points range from 0 to MaxRGB or from 0 to 100%; if the white point is omitted it is set to MaxRGB-black_point. If a \"%\" sign is present anywhere in the string, the black and white points are percentages of MaxRGB. Gamma is an exponent that ranges from 0.1 to 10.; if it is omitted, the default of 1.0 (no gamma correction) is assumed. This interface works similar to Photoshop's \"Image-\nAdjustments-\nLevels...\" \"Input Levels\" interface.\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\nBy default, resource limits are estimated based on the available resources of the system. The resource limits are Disk, maximum total disk space consumed; File, maximum number of file descriptors allowed to be open at once; Map, maximum total number of file bytes which may be memory mapped; Memory, maximum total number of bytes of heap memory used for image storage; Pixels, maximum absolute image size (per image); Width, maximum image pixels width; Height, maximum image pixels height; and Threads, the maximum number of worker threads to use per OpenMP thread team.\nThese resource limits are used to decide if (for a given image) the decoded image (\"pixel cache\") should be stored in heap memory (RAM), in a memory-mapped disk file, or in a disk file accessed via read/write I/O. The number of total pixels in one image, and/or the width/height, may also be limited in order to force the reading, or creation of images larger than the limit (in pixels) to intentionally fail. The disk limit establishes an overall limit since using the disk is the means of last resort. When the disk limit has been reached, no more images may be read.\nThe value argument is an absolute value, but may have standard binary suffix characters applied ('K', 'M', 'G', 'T', 'P', 'E') to apply a scaling to the value (based on a multiplier of 1024). Any additional characters are ignored. For example, '-limit Pixels 10MP' limits the maximum image size to 10 megapixels and '-limit memory 32MB -limit map 64MB' limits memory and memory mapped files to 32 megabytes and 64 megabytes respectively.\nResource limits may also be set using environment variables. The environment variables MAGICK_LIMIT_DISK, MAGICK_LIMIT_FILES, MAGICK_LIMIT_MAP, MAGICK_LIMIT_MEMORY, MAGICK_LIMIT_PIXELS, MAGICK_LIMIT_WIDTH, MAGICK_LIMIT_HEIGHT,and OMP_NUM_THREADS may be used to set the limits for disk space, open files, memory mapped size, heap memory, per-image pixels, image width, image height, and threads respectively.\nUse the option -list resource list the current limits.\n-linewidth\nthe line width for subsequent draw operations\n-list \ntype\nthe type of list\nChoices are: Color, Delegate, Format, Magic, Module, Resource, or Type. The Module option is only available if GraphicsMagick was built to support loadable modules.\nThis option lists information about the GraphicsMagick configuration.\n-log \nstring\nSpecify format for debug log\nThis option specifies the format for the log printed when the -debug option is active.\nYou can display the following components by embedding special format characters:\n%d\n   \ndomain\n\n\n%e\n   \nevent\n\n\n%f\n   \nfunction\n\n\n%l\n   \nline\n\n\n%m\n   \nmodule\n\n\n%p\n   \nprocess\n \nID\n\n\n%r\n   \nreal\n \nCPU\n \ntime\n\n\n%t\n   \nwall\n \nclock\n \ntime\n\n\n%u\n   \nuser\n \nCPU\n \ntime\n\n\n%%\n   \npercent\n \nsign\n\n\n\\\nn\n   \nnewline\n\n\n\\\nr\n   \ncarriage\n \nreturn\n\n\n\n\n\nFor example:\ngm convert -debug coders -log \n%u %m:%l %e\n in.gif out.png\n\n\n\n\nThe default behavior is to print all of the components.\n-loop \niterations\nadd Netscape loop extension to your GIF animation\nA value other than zero forces the animation to repeat itself up to iterations times.\n-magnify\nmagnify the image\nThe image size is doubled using linear interpolation.\n-magnify \nfactor\nmagnify the image\nThe displayed image is magnified by factor.\n-map \nfilename\nchoose a particular set of colors from this image\n[convert or mogrify]\nBy default, color reduction chooses an optimal set of colors that best represent the original image. Alternatively, you can choose a particular set of colors from an image file with this option.\nUse +map to reduce all images in the image sequence that follows to a single optimal set of colors that best represent all the images. The sequence of images is terminated by the appearance of any option. If the +map option appears after all of the input images, all images are mapped.\n-map \ntype\ndisplay image using this type.\n[animate or display]\nChoose from these Standard Colormap types:\nbest\ndefault\ngray\nred\ngreen\nblue\n\n\n\n\nThe X server must support the Standard Colormap you choose, otherwise an error occurs. Use list as the type and display searches the list of colormap types in top-to-bottom order until one is located. See xstdcmap(1) for one way of creating Standard Colormaps.\n-mask \nfilename\nSpecify a clipping mask\nThe image read from the file is used as a clipping mask. It must have the same dimensions as the image being masked.\nIf the mask image contains an opacity channel, the opacity of each pixel is used to define the mask. Otherwise, the intensity (gray level) of each pixel is used. Unmasked (black) pixels are modified while masked pixels (not black) are protected from alteration.\nUse +mask to remove the clipping mask.\nIt is not necessary to use -clip to activate the mask; -clip is implied by -mask.\n-matte\nstore matte channel if the image has one\nIf the image does not have a matte channel, create an opaque one.\nUse +matte to ignore the matte channel and to avoid writing a matte channel in the output file.\n-mattecolor \ncolor\nspecify the color to be used with the -frame option\nThe color is specified using the format described under the -fill option.\n-maximum-error \nlimit\nspecifies the maximum amount of total image error\nSpecifies the maximum amount of total image error (based on comparison using a specified metric) before an error (\"image difference exceeds limit\") is reported. The error is reported via a non-zero command execution return status.\n-median \nradius\napply a median filter to the image\n-metric \nmetric\ncomparison metric (MAE, MSE, PAE, PSNR, RMSE)\n-minify \nfactor\nminify the image\nThe image size is halved using linear interpolation.\n-mode \nvalue\nmode of operation\nThe available montage modes are frame to place the images in a rectangular grid while adding a decorative frame with dropshadow, unframe to place undecorated images in a rectangular grid, and concatenate to pack the images closely together without any well-defined grid or decoration.\n-modulate brightness[,saturation[,hue]]\nvary the brightness, saturation, and hue of an image\nSpecify the percent change in brightness, color saturation, and hue separated by commas. Default argument values are 100 percent, resulting in no change. For example, to increase the color brightness by 20% and decrease the color saturation by 10% and leave the hue unchanged, use: -modulate 120,90.\nHue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.\n-monitor\nshow progress indication\nA simple command-line progress indication is shown while the command is running. The process indication shows the operation currently being performed and the percent completed. Commands using X11 may replace the command line progress indication with a graphical one once an image has been displayed.\n-monochrome\ntransform the image to black and white\n-morph \nframes\nmorphs an image sequence\nBoth the image pixels and size are linearly interpolated to give the appearance of a meta-morphosis from one image to the next.\nThe sequence of images is terminated by the appearance of any option. If the -morph option appears after all of the input images, all images are morphed.\n-mosaic\ncreate a mosaic from an image or an image sequence\nThe -mosaic option provides a flexible way to composite one or more images onto a solid-color canvas image. It works similar to -flatten except that a base canvas image is automatically created with a suitable size given the image size, page dimensions, and page offsets of images to be composited. The color of the base canvas image may be set via the -background option. The default canvas color is 'white', but 'black' or 'transparent' may be more suitable depending on the composition algorithm requested.\nThe -compose option may be used to specify the composition algorithm to use when compositing the subsequent image on the base canvas.\nThe -page option can be used to establish the dimensions of the mosaic and to position the subsequent image within the mosaic. If the -page argument does not specify width and height, then the canvas dimensions are evaluated based on the image sizes and offsets.\nThe sequence of images is terminated by the appearance of any option. If the -mosaic option appears after all of the input images, all images are included in the mosaic.\nThe following is an example of composing an image based on red, green, and blue layers extracted from a sequence of images and pasted on the canvas image at specified offsets:\ngm convert -background black \\\n        -compose CopyRed   -page +0-100 red.png \\\n        -compose CopyGreen -page +0+40  green.png \\\n        -compose CopyBlue  -page +0+180 blue.png \\\n        -mosaic output.png\n\n\n\n\n-motion-blur \nradius\n{x\nsigma\n}{+angle}\nSimulate motion blur\nSimulate motion blur by convolving the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. If radius is zero, then a suitable radius is automatically selected based on sigma. The angle specifies the angle that the object is coming from (side which is blurred).\n-name\nname an image\n-negate\nreplace every pixel with its complementary color\nThe red, green, and blue intensities of an image are negated. White becomes black, yellow becomes blue, etc. Use +negate to only negate the grayscale pixels of the image.\n-noise \nradius|type\nadd or reduce noise in an image\nThe principal function of noise peak elimination filter is to smooth the objects within an image without losing edge information and without creating undesired structures. The central idea of the algorithm is to replace a pixel with its next neighbor in value within a pixel window, if this pixel has been found to be noise. A pixel is defined as noise if and only if this pixel is a maximum or minimum within the pixel window.\nUse radius to specify the width of the neighborhood.\nUse +noise followed by a noise type to add noise to an image. The noise added modulates the existing image pixels. Choose from these noise types:\nUniform\nGaussian\nMultiplicative\nImpulse\nLaplacian\nPoisson\nRandom (uniform distribution)\n\n\n\n\n-noop\nNOOP (no option)\nThe -noop option can be used to terminate a group of images and reset all options to their default values, when no other option is desired.\n-normalize\ntransform image to span the full range of color values\nThis is a contrast enhancement technique based on the image histogram.\nWhen computing the contrast enhancement values, the histogram edges are truncated so that the majority of the image pixels are considered in the constrast enhancement, and outliers (e.g. random noise or minute details) are ignored. The default is that 0.1 percent of the histogram entries are ignored. The percentage of the histogram to ignore may be specified by using the -set option with the histogram-threshold parameter similar to -set histogram-threshold 0.01 to specify 0.01 percent. Use 0 percent to use the entire histogram, with possibly diminished contrast enhancement.\n-opaque \ncolor\nchange this color to the pen color within the image\nThe color is specified using the format described under the -fill option. The color is replaced if it is identical to the target color, or close enough to the target color in a 3D space as defined by the Euclidean distance specified by -fuzz.\nSee -fill and -fuzz for more details.\n-operator channel operator rvalue[%]\napply a mathematical, bitwise, or value operator to an image channel\nApply a low-level mathematical, bitwise, or value operator to a selected image channel or all image channels. Operations which result in negative results are reset to zero, and operations which overflow the available range are reset to the maximum possible value.\nSelect a channel from: Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, All, or Gray. All only modifies the color channels and does not modify the Opacity channel. Except for the threshold operators, All operates on each channel independently so that operations are on a per-channel basis.\nGray treats the color channels as a grayscale intensity and performs the requested operation on the equivalent pixel intensity so the result is a gray image.\nSelect an operator from Add, And, Assign, Depth, Divide, Gamma, Negate, LShift, Log, Max, Min, Multiply, Or, Pow RShift, Subtract, Threshold, Threshold-White, Threshold-White-Negate, Threshold-Black, Threshold-Black-Negate, Xor, Noise-Gaussian, Noise-Impulse, Noise-Laplacian, Noise-Multiplicative, Noise-Poisson, Noise-Random, and Noise-Uniform.\nRvalue may be any floating point or integer value. Normally rvalue will be in the range of 0 to MaxRGB, where MaxRGB is the largest quantum value supported by the GraphicsMagick build (255, 65535, or 4294967295) but values outside this range are useful for some arithmetic operations. Arguments to logical or bit-wise operations are rounded to a positive integral value prior to use. If a percent (%) symbol is appended to the argument, then the argument has a range of 0 to 100 percent.\nThe following is a description of the operators:\nAdd\nResult is rvalue added to channel value.\nAnd\nResult is the logical AND of rvalue with channel value.\nAssign\nResult is rvalue.\nDepth\nResult is channel value adjusted so that it may be (approximately) stored in the specified number of bits without additional loss.\nDivide\nResult is channel value divided by rvalue.\nGamma\nResult is channel value gamma adjusted by rvalue.\nLShift\nResult is channel value bitwise left shifted by rvalue bits.\nLog\nResult is computed as log(value*rvalue+1)/log(rvalue+1).\nMax\nResult is assigned to rvalue if rvalue is greater than value.\nMin\nResult is assigned to rvalue if rvalue is less than value.\nMultiply\nResult is channel value multiplied by rvalue.\nNegate\nResult is inverse of channel value (like a film negative). An rvalue must be supplied but is currently not used. Inverting the image twice results in the original image.\nOr\nResult is the logical OR of rvalue with channel value.\nPow\nResult is computed as pow(value,rvalue). Similar to Gamma except that rvalue is not inverted.\nRShift\nResult is channel value bitwise right shifted by rvalue bits.\nSubtract\nResult is channel value minus rvalue.\nThreshold\nResult is maximum (white) if channel value is greater than rvalue, or minimum (black) if it is less than or equal to rvalue. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-white\nResult is maximum (white) if channel value is greater than rvalue and is unchanged if it is less than or equal to rvalue. This can be used to remove apparent noise from the bright parts of an image. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-White-Negate\nResult is set to black if channel value is greater than rvalue and is unchanged if it is less than or equal to rvalue. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-black\nResult is minimum (black) if channel value is less than than rvalue and is unchanged if it is greater than or equal to rvalue. This can be used to remove apparent noise from the dark parts of an image. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-Black-Negate\nResult is set to white if channel value is less than than rvalue and is unchanged if it is greater than or equal to rvalue. If all channels are specified, then thresholding is done based on computed pixel intensity.\nXor\nResult is the logical XOR of rvalue with channel value. An interesting property of XOR is that performing the same operation twice results in the original value.\nNoise-Gaussian\nResult is the current channel value modulated with gaussian noise according to the intensity specified by rvalue.\nNoise-Impulse\nResult is the current channel value modulated with impulse noise according to the intensity specified by rvalue.\nNoise-Laplacian\nResult is the current channel value modulated with laplacian noise according to the intensity specified by rvalue.\nNoise-Multiplicative\nResult is the current channel value modulated with multiplicative gaussian noise according to the intensity specified by rvalue.\nNoise-Poisson\nResult is the current channel value modulated with poisson noise according to the intensity specified by rvalue.\nNoise-Random\nResult is the current channel value modulated with random (uniform distribution) noise according to the intensity specified by rvalue. The initial noise intensity (rvalue=1.0) is the range of one pixel quantum span.\nNoise-Uniform\nResult is the channel value with uniform noise applied according to the intensity specified by rvalue.\nAs an example, the Assign operator assigns a fixed value to a channel. For example, this command sets the red channel to the mid-range value:\ngm convert in.bmp -operator red assign \n50%\n out.bmp\n\n\n\n\nThe following applies 50% thresholding to the image and returns a gray image:\ngm convert in.bmp -operator gray threshold \n50%\n out.bmp\n\n\n\n\n-ordered-dither \nchanneltype??? info \"\n`\nordered dither the image\nThe channel or channels specified in the channeltype argument are reduced to binary, using an ordered dither method. The choices for channeltype are All, Intensity, Red, Green, Blue, Cyan, Magenta, Yellow, Black, and Opacity\nWhen channeltype is \"All\", the color samples are dithered into a gray level and then that gray level is stored in the three color channels. Separately, the opacity channel is dithered into a bilevel opacity value which is stored in the opacity channel.\nWhen channeltype is \"Intensity\", only the color samples are dithered. When channeltype is \"opacity\" or \"matte\", only the opacity channel is dithered. When a color channel is specified, only that channel is dithered.\nThe choices for N are 2 through 7. The image is divided into NxN pixel tiles. In each tile, some or all pixels are turned to white depending on their intensity. For each N, (N**2)+1 levels of gray can be represented. For N == 2, 3, or 4, the pixels are turned to white in an order that maximizes dispersion (i.e., reduces granularity), while for N == 5, 6, and 7, they are turned to white in an order that creates a roughly circular black blob in the middle of each tile. An attractive \"half-tone\" looking image can be obtained by first rotating the image 45 degrees, performing a 5x5 ordered-dither operation, then rotating it back to the original orientation and cropping to the original image dimensions. If the original image is gamma-encoded, it is adviseable to convert it to linear intensity first, e.g., with the \"-gamma 0.45455\" option.\n-output-directory \ndirectory\noutput files to directory\nUse -output-directory to specify a directory under which to write the output files. Normally mogrify overwrites the input files, but with this option the output files may be written to a different directory tree so that the input files are preserved. The algorithm used preserves all of the input path specification in the output path so that the user-specified input path (including any sub-directory part) is appended to the output path. If the input file lacks an extension, then a suitable extension is automatically added to the output file. The user is responsible for creating the output directory specified as an argument, but subdirectories will be created as needed if the -create-directories option is supplied. This option may be used to apply transformations on files from one directory and write the transformed files to a different directory. In conjunction with -create-directories, this option is designed to support transforming whole directory trees of files provided that the relative path of the input file is included as part the list of filenames.\n-orient \norientation\nSet the image orientation attribute\nSets the image orientation attribute. The image orientation attribute is compatible with the TIFF orientation tag (and the EXIF orientation tag). Accepted values are undefined, TopLeft, TopRight, BottomRight, BottomLeft, LeftTop, RightTop, RightBottom, LeftBottom, and hyphenated versions thereof (e.g. left-bottom). Please note that GraphicsMagick does not include an EXIF editor so if an EXIF profile is written to the output image, the value in the EXIF profile might not match the image. It is possible for an image file to indicate its orientation in several different ways simultaneously.\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\nUse this option to specify the dimensions of the PostScript page in dots per inch or a TEXT page in pixels. The choices for a PostScript page are:\n11x17         792  1224\nLedger       1224   792\nLegal         612  1008\nLetter        612   792\nLetterSmall   612   792\nArchE        2592  3456\nArchD        1728  2592\nArchC        1296  1728\nArchB         864  1296\nArchA         648   864\nA0           2380  3368\nA1           1684  2380\nA2           1190  1684\nA3            842  1190\nA4            595   842\nA4Small       595   842\nA5            421   595\nA6            297   421\nA7            210   297\nA8            148   210\nA9            105   148\nA10            74   105\nB0           2836  4008\nB1           2004  2836\nB2           1418  2004\nB3           1002  1418\nB4            709  1002\nB5            501   709\nC0           2600  3677\nC1           1837  2600\nC2           1298  1837\nC3            918  1298\nC4            649   918\nC5            459   649\nC6            323   459\nFlsa          612   936\nFlse          612   936\nHalfLetter    396   612\n\n\n\n\nFor convenience you can specify the page size by media (e.g. A4, Ledger, etc.). Otherwise, -page behaves much like -geometry (e.g. -page letter+43+43\n`).\nThis option is also used to place subimages when writing to a multi-image format that supports offsets, such as GIF89 and MNG. When used for this purpose the offsets are always measured from the top left corner of the canvas and are not affected by the -gravity option. To position a GIF or MNG image, use -page{+-}\nx\n{+-}`\ny??? info \"(e.g. -page +100+200). When writing to a MNG file, a -page option appearing ahead of the first image in the sequence with nonzero width and height defines the width and height values that are written in the MHDR chunk. Otherwise, the MNG width and height are computed from the bounding box that contains all images in the sequence. When writing a GIF89 file, only the bounding box method is used to determine its dimensions.\nFor a PostScript page, the image is sized as in -geometry and positioned relative to the lower left hand corner of the page by {+-}\nxoffset\n{+-}\ny offset\n. Use -page 612x792\n`, for example, to center the image within the page. If the image size exceeds the PostScript page, it is reduced to fit the page. The default gravity for the -page option is NorthWest, i.e., positive x and y offset are measured rightward and downward from the top left corner of the page, unless the -gravity option is present with a value other than NorthWest.\nThe default page dimensions for a TEXT image is 612x792.\nThis option is used in concert with -density.\nUse +page to remove the page settings for an image.\n-paint \nradius\nsimulate an oil painting\nEach pixel is replaced by the most frequent color in a circular neighborhood whose width is specified with radius.\n-pause \nseconds\npause between animation loops [animate]\nPause for the specified number of seconds before repeating the animation.\n-pause \nseconds\npause between snapshots [import]\nPause for the specified number of seconds before taking the next snapshot.\n-pen \ncolor\n(This option has been replaced by the -fill option)\n-ping\nefficiently determine image characteristics\nUse this option to disable reading the image pixels so that image characteristics such as the image dimensions may be obtained very quickly. For identify, use +ping to force reading the image pixels so that the pixel read rate may be included in the displayed information.\n-pointsize \nvalue\npointsize of the PostScript, X11, or TrueType font\n-preview \ntype\nimage preview type\nUse this option to affect the preview operation of an image (e.g. convert file.png -preview Gamma Preview:gamma.png). Choose from these previews:\nRotate\nShear\nRoll\nHue\nSaturation\nBrightness\nGamma\nSpiff\nDull\nGrayscale\nQuantize\nDespeckle\nReduceNoise\nAddNoise\nSharpen\nBlur\nThreshold\nEdgeDetect\nSpread\nShade\nRaise\nSegment\nSolarize\nSwirl\nImplode\nWave\nOilPaint\nCharcoalDrawing\nJPEG\n\n\n\n\nThe default preview is JPEG.\n-process \ncommand\nprocess a sequence of images using a process module\nThe command argument has the form module=arg1,arg2,arg3,...,argN where module is the name of the module to invoke (e.g. \"analyze\") and arg1,arg2,arg3,...,argN are an arbitrary number of arguments to pass to the process module.\nThe sequence of images is terminated by the appearance of any option.\nIf the -process option appears after all of the input images, all images are processed.\n-profile \nfilename\nadd ICM, IPTC, or generic profile to image\n-profile filename adds an ICM (ICC color management), IPTC (newswire information), or a generic (including Exif) profile to the image\n.\nUse +profile icm, +profile iptc, or +profile profile_name to remove the respective profile. Multiple profiles may be listed, separated by commas. Profiles may be excluded from subsequent listed matches by preceding their name with an exclamation point. For example, +profile '!icm,\n' strips all profiles except for the ICM profile. Use identify -verbose to find out what profiles are in the image file. Use +profile \"\n\" to remove all profiles.\nWriting the image to a format that does not support profiles will of course also cause all profiles to be removed. The JPEG and PNG formats will store any profiles that have been read and not removed. In JPEG they are stored in APP1 markers, and in PNG they are stored as hex-coded binary in compressed zTXt chunks, except for the iCC chunk which is stored in the iCCP chunk.\nTo extract a profile, the -profile option is not used. Instead, simply write the file to an image format such as APP1, 8BIM, ICM, or IPTC.\nFor example, to extract the Exif data (which is stored in JPEG files in the APP1 profile), use\ngm convert cockatoo.jpg exifdata.app1\n\n\n\n\nNote that GraphicsMagick does not attempt to update any profile to reflect changes made to the image, e.g., rotation from portrait to landscape orientation, so it is possible that the preserved profile may contain invalid data.\n-preserve-timestamp\npreserve the original timestamps of the file\nUse this option to preserve the original modification and access timestamps of the file, even if it has been modified.\n+progress\ndisable progress monitor and busy cursor\nBy default, when an image is displayed, a progress monitor bar is shown in the top left corner of an existing image display window, and the current cursor is replaced with an hourglass cursor. Use +progress to disable the progress monitor and busy cursor during display operations. While the progress monitor is disabled for all operations, the busy cursor continues to be enabled for non-display operations such as image processing. This option is useful for non-interactive display operations, or when a \"clean\" look is desired.\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\nFor the JPEG and MPEG image formats, quality is 0 (lowest image quality and highest compression) to 100 (best quality but least effective compression). The default quality is 75. Use the -sampling-factor option to specify the factors for chroma downsampling. To use the same quality value as that found by the JPEG decoder, use the -define jpeg:preserve-settings flag.\nFor the MIFF image format, and the TIFF format while using ZIP compression, quality/10 is the zlib compression level, which is 0 (worst but fastest compression) to 9 (best but slowest). It has no effect on the image appearance, since the compression is always lossless.\nFor the JPEG-2000 image format, quality is mapped using a non-linear equation to the compression ratio required by the Jasper library. This non-linear equation is intended to loosely approximate the quality provided by the JPEG v1 format. The default quality value 75 results in a request for 16:1 compression. The quality value 100 results in a request for non-lossy compression.\nFor the MNG and PNG image formats, the quality value sets the zlib compression level (quality / 10) and filter-type (quality % 10). Compression levels range from 0 (fastest compression) to 100 (best but slowest). For compression level 0, the Huffman-only strategy is used, which is fastest but not necessarily the worst compression.\nIf filter-type is 4 or less, the specified filter-type is used for all scanlines:\n0\n:\n \nnone\n\n\n1\n:\n \nsub\n\n\n2\n:\n \nup\n\n\n3\n:\n \naverage\n\n\n4\n:\n \nPaeth\n\n\n\n\n\nIf filter-type is 5, adaptive filtering is used when quality is greater than 50 and the image does not have a color map, otherwise no filtering is used.\nIf filter-type is 6, adaptive filtering with minimum-sum-of-absolute-values is used.\nOnly if the output is MNG, if filter-type is 7, the LOCO color transformation and adaptive filtering with minimum-sum-of-absolute-values are used.\nThe default is quality is 75, which means nearly the best compression with adaptive filtering. The quality setting has no effect on the appearance of PNG and MNG images, since the compression is always lossless.\nFor further information, see the PNG specification.\nWhen writing a JNG image with transparency, two quality values are required, one for the main image and one for the grayscale image that conveys the opacity channel. These are written as a single integer equal to the main image quality plus 1000 times the opacity quality. For example, if you want to use quality 75 for the main image and quality 90 to compress the opacity data, use -quality 90075.\nFor the PNM family of formats (PNM, PGM, and PPM) specify a quality factor of zero in order to obtain the ASCII variant of the format. Note that -compress none used to be used to trigger ASCII output but provided the opposite result of what was expected as compared with other formats.\n-raise \nwidth\nx\nheight\nlighten or darken image edges\nThis will create a 3-D effect. See -geometry for details details about the geometry specification. Offsets are not used.\nUse -raise to create a raised effect, otherwise use +raise.\n-random-threshold \nchanneltype??? info \"\n`\nrandom threshold the image\nThe channel or channels specified in the `\nchanneltype??? info \"argument are reduced to binary, using an random-threshold method. The choices for channeltype are All, Intensity, Red, Green, Blue, Cyan, Magenta, Yellow, Black, and Opacity\nWhen channeltype is \"All\", the color samples are thresholded into a graylevel and then that gray level is stored in the three color channels. Separately, the opacity channel is thresholded into a bilevel opacity value which is stored in the opacity channel. For each pixel, a new random number is used to establish the threshold to be used. The threshold never exceeds the specified maximum (HIGH) and is never less than the specified minimum (LOW).\nWhen channeltype is \"intensity\", only the color samples are thresholded. When channeltype is \"opacity\" or \"matte\", only the opacity channel is thresholded. The other named channels only threshold the associated channel.\n-recolor \nmatrix\napply a color translation matrix to image channels\nA user supplied color translation matrix (expressed as a text string) is used to translate/blend the image channels based on weightings in a supplied matrix which may be of order 3 (color channels only), 4 (color channels plus opacity), or 5 (color channels plus opacity and offset). Values in the columns of the matrix (red, green, blue, opacity) are used as multipliers with the existing channel values and added together according to the rows of the matrix. Matrix values are floating point and may be negative. The offset column (column 5) is purely additive and is scaled such that 0.0 to 1.0 represents the maximum quantum range (but values are not limited to this range). The math for the color translation matrix is similar to that used by Adobe Flash except that the offset is scaled to 1.0 (divide Flash offset by 255 for use with GraphicsMagick) so that the results are independent of quantum depth.\nAn identity matrix exists for each matrix order which results in no change to the image. The translation matrix should be based on an alteration of the identity matrix.\nIdentity matrix of order 3\n1 0 0\n0 1 0\n0 0 1\nwhich may be formatted into a convenient matrix argument similar to (comma is treated as white space):\n-recolor \"1 0 0, 0 1 0, 0 0 1\"\nIdentity matrix of order 4\n1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1\nIdentity matrix of order 5. The last row is required to exist for the purpose of parsing, but is otherwise not used.\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\nAs an example, an image wrongly in BGR channel order may be converted to RGB using this matrix (blue-\nred, red-\nblue):\n0 0 1\n0 1 0\n1 0 0\nand an RGB image using standard Rec.709 primaries may be converted to grayscale using this matrix of standard weighting factors:\n0.2126 0.7152 0.0722\n0.2126 0.7152 0.0722\n0.2126 0.7152 0.0722\nand contrast may be reduced by scaling down by 80% and adding a 10% offset:\n0.8 0.0 0.0 0.0 0.1\n0.0 0.8 0.0 0.0 0.1\n0.0 0.0 0.8 0.0 0.1\n0.0 0.0 0.0 0.8 0.1\n0.0 0.0 0.0 0.0 1.0\n-red-primary \nx\n,\ny\nred chromaticity primary point\n-region \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\napply options to a portion of the image\nThe x and y offsets are treated in the same manner as in -crop\n.\n-remote\nperform a X11 remote operation\nThe -remote command sends a command to a \"gm display\" or \"gm animate\" which is already running. The only command recognized at this time is the name of an image file to load. This capability is very useful to load new images without needing to restart GraphicsMagick (e.g. for a slide-show or to use GraphicsMagick as the display engine for a different GUI). Also see the +progress option for a way to disable progress indication for a clean look while loading new images.\n-render\nrender vector operations\nUse +render to turn off rendering vector operations. This is useful when saving the result to vector formats such as MVG or SVG.\n-repage \nwidth\nx\nheight\n+xoff+yoff[!]\nAdjust image page offsets\nAdjust the current image page canvas and position based on a relative page specification. This option may be used to change the location of a subframe (e.g. part of an animation) prior to composition. If the geometry specification is absolute (includes a '!'), then the offset adjustment is absolute and there is no adjustment to page width and height, otherwise the page width and height values are also adjusted based on the current image dimensions. Use +repage to set the image page offsets to default.\n-resample \nhorizontal\nx\nvertical\nResample image to specified horizontal and vertical resolution\nResize the image so that its rendered size remains the same as the original at the specified target resolution. Either the current image resolution units or the previously set with -units are used to interpret the argument. For example, if a 300 DPI image renders at 3 inches by 2 inches on a 300 DPI device, when the image has been resampled to 72 DPI, it will render at 3 inches by 2 inches on a 72 DPI device. Note that only a small number of image formats (e.g. JPEG, PNG, and TIFF) are capable of storing the image resolution. For formats which do not support an image resolution, the original resolution of the image must be specified via -density on the command line prior to specifying the resample resolution.\nNote that Photoshop stores and obtains image resolution from a proprietary embedded profile. If this profile exists in the image, then Photoshop will continue to treat the image using its former resolution, ignoring the image resolution specified in the standard file header.\nSome image formats (e.g. PNG) require use of metric or english units so even if the original image used a particular unit system, if it is saved to a different format prior to resampling, then it may be necessary to specify the desired resolution units using -units since the original units may have been lost. In other words, do not assume that the resolution units are restored if the image has been saved to a file.\n-resize \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image\nThis is an alias for the -geometry option and it behaves in the same manner. If the -filter option precedes the -resize option, the specified filter is used.\nThere are some exceptions:\nWhen used as a composite option, -resize conveys the preferred size of the output image, while -geometry conveys the size and placement of the composite image within the main image.\nWhen used as a montage option, -resize conveys the preferred size of the montage, while -geometry conveys information about the tiles.\n-roll {+-}\nx\n{+-}\ny\nroll an image vertically or horizontally\nSee -geometry for details the geometry specification. The x and y offsets are not affected by the -gravity option.\nA negative x offset rolls the image left-to-right. A negative y offset rolls the image top-to-bottom.\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\nPositive angles rotate the image in a clockwise direction while negative angles rotate counter-clockwise.\nUse ??? info \"to rotate the image only if its width exceeds the height. \n rotates the image only if its width is less than the height. For example, if you specify -rotate \"-90\n\" and the image size is 480x640, the image is not rotated. However, if the image is 640x480, it is rotated by -90 degrees. If you use ??? info \"or `\n, enclose it in quotation marks to prevent it from being misinterpreted as a file redirection.\nEmpty triangles left over from rotating the image are filled with the color defined as background (class backgroundColor). The color is specified using the format described under the -fill option.\n-sample \ngeometry\nscale image using pixel sampling\nSee -geometry for details about the geometry specification. -sample ignores the -filter selection if the -filter option is present. Offsets, if present in the geometry string, are ignored, and the -gravity option has no effect.\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\nThis option specifies the sampling factors to be used by the DPX, JPEG, MPEG, or YUV encoders for chroma downsampling. The sampling factor must be specified while reading the raw YUV format since it is not preserved in the file header.\nIndustry-standard video subsampling notation such as \"4:2:2\" may also be used to specify the sampling factors. \"4:2:2\" is equivalent to a specification of \"2x1\"\nThe JPEG decoder obtains the original sampling factors (and quality settings) when a JPEG file is read. To re-use the original sampling factors (and quality setting) when JPEG is output, use the -define jpeg:preserve-settings flag.\n-scale \ngeometry\nscale the image.\nSee -geometry for details about the geometry specification. -scale uses a simpler, faster algorithm, and it ignores the -filter selection if the -filter option is present. Offsets, if present in the geometry string, are ignored, and the -gravity option has no effect.\n-scene \nvalue\nset scene number\nThis option sets the scene number of an image or the first image in an image sequence.\n-scenes \nvalue-value\nrange of image scene numbers to read\nEach image in the range is read with the filename followed by a period (.) and the decimal scene number. You can change this behavior by embedding a %d, %0Nd, %o, %0No, %x, or %0Nx printf format specification in the file name. For example,\ngm montage -scenes 5-7 image.miff montage.miff\n\n\n\n\nmakes a montage of files image.miff.5, image.miff.6, and image.miff.7, and\ngm animate -scenes 0-12 image%02d.miff\n\n\n\n\nanimates files image00.miff, image01.miff, through image12.miff.\n-screen\nspecify the screen to capture\nThis option indicates that the GetImage request used to obtain the image should be done on the root window, rather than directly on the specified window. In this way, you can obtain pieces of other windows that overlap the specified window, and more importantly, you can capture menus or other popups that are independent windows but appear over the specified window.\n-set \nattribute??? info \"\n`\nset an image attribute\nSet a named image attribute. The attribute is set on the current (previously specified on command line) image.\n+set \nattribute\nunset an image attribute\nUnset a named image attribute. The attribute is removed from the current (previously specified on command line) image.\n-segment \ncluster threshold\nx\nsmoothing threshold\nsegment an image\nSegment an image by analyzing the histograms of the color components and identifying units that are homogeneous with the fuzzy c-means technique.\nSegmentation is a very useful fast and and approximate color quantization algorithm for scanned printed pages or scanned cartoons. It may also be used as a special effect. Specify cluster threshold as the minimum percentage of total pixels in a cluster before it is considered valid. For huge images containing small detail, this may need to be a tiny fraction of a percent (e.g. 0.015) so that important detail is not lost. Smoothing threshold eliminates noise in the second derivative of the histogram. As the value is increased, you can expect a smoother second derivative. The default is 1.5. Add the -verbose option to see a dump of cluster statistics given the parameters used. The statistics may be used as a guide to help fine tune the options.\n-shade \nazimuth\nx\nelevation\nshade the image using a distant light source\nSpecify azimuth and elevation as the position of the light source. Use +shade to return the shading results as a grayscale image.\n-shadow \nradius\n{x\nsigma\n}\nshadow the montage\n-shared-memory\nuse shared memory\nThis option specifies whether the utility should attempt to use shared memory for pixmaps. GraphicsMagick must be compiled with shared memory support, and the display must support the MIT-SHM extension. Otherwise, this option is ignored. The default is True.\n-sharpen \nradius\n{x\nsigma\n}\nsharpen the image\nUse a Gaussian operator of the given radius and standard deviation (sigma).\n-shave \nwidth\nx\nheight\n{%}\nshave pixels from the image edges\nSpecify the width of the region to be removed from both sides of the image and the height of the regions to be removed from top and bottom.\n-shear \nx degrees\nx\ny degrees\nshear the image along the X or Y axis\nUse the specified positive or negative shear angle.\nShearing slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x degrees is measured relative to the Y axis, and similarly, for Y direction shears y degrees is measured relative to the X axis.\nEmpty triangles left over from shearing the image are filled with the color defined as background (class backgroundColor). The color is specified using the format described under the -fill option.\n-silent\noperate silently\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\nUse this option to specify the width and height of raw images whose dimensions are unknown such as GRAY, RGB, or CMYK. In addition to width and height, use -size with an offset to skip any header information in the image or tell the number of colors in a MAP image file, (e.g. -size 640x512+256).\nFor Photo CD images, choose from these sizes:\n192x128\n384x256\n768x512\n1536x1024\n3072x2048\n\n\n\n\nFinally, use this option to choose a particular resolution layer of a JBIG or JPEG image (e.g. -size 1024x768).\n-snaps \nvalue\nnumber of screen snapshots\nUse this option to grab more than one image from the X server screen, to create an animation sequence.\n-solarize \nfactor\nnegate all pixels above the threshold level\nSpecify factor as the percent threshold of the intensity (0 - 99.9%).\nThis option produces a solarization effect seen when exposing a photographic film to light during the development process.\n-spread \namount\ndisplace image pixels by a random amount\nAmount defines the size of the neighborhood around each pixel to choose a candidate pixel to swap.\n-stegano \noffset\nhide watermark within an image\nUse an offset to start the image hiding some number of pixels from the beginning of the image. Note this offset and the image size. You will need this information to recover the steganographic image (e.g. display -size 320x256+35 stegano:image.png).\n-stereo\ncomposite two images to create a stereo anaglyph\nThe left side of the stereo pair is saved as the red channel of the output image. The right side is saved as the green channel. Red-green stereo glasses are required to properly view the stereo image.\n-strip\nremove all profiles and text attributes from the image\nAll embedded profiles and text attributes are stripped from the image. This is useful for images used for the web, or when output files need to be as small as possible\nBe careful not to use this option to remove author, copyright, and license information that you are required to retain when redistributing an image.\n-stroke \ncolor\ncolor to use when stroking a graphic primitive\nThe color is specified using the format described under the -fill option.\nSee -draw for further details.\n-strokewidth \nvalue\nset the stroke width\nSee -draw for further details.\n-swirl \ndegrees\nswirl image pixels about the center\nDegrees defines the tightness of the swirl.\n-text-font \nname\nfont for writing fixed-width text\nSpecifies the name of the preferred font to use in fixed (typewriter style) formatted text. The default is 14 point Courier.\nYou can tag a font to specify whether it is a PostScript, TrueType, or X11 font. For example, Courier.ttf is a TrueType font and x:fixed is X11.\n-texture \nfilename\nname of texture to tile onto the image background\n-threshold \nvalue\n{%}\nthreshold the image\nModify the image such that any pixel sample with an intensity value greater than the threshold is assigned the maximum intensity (white), or otherwise is assigned the minimum intensity (black). If a percent prefix is applied, then the threshold is a percentage of the available range.\nTo efficiently create a black and white image from a color image, use\ngm convert -threshold 50% in.png out.png\n\n\n\n\nThe optimum threshold value depends on the nature of the image.\nIn order to threshold individual channels, use the -operator subcommand with it's Threshold, Threshold-White, or Threshold-Black options.\n-thumbnail \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image (quickly)\nThe -thumbnail command resizes the image as quickly as possible, with more concern for speed than resulting image quality. Regardless, resulting image quality should be acceptable for many uses. It is primarily intended to be used to generate smaller versions of the image, but may also be used to enlarge the image. The -thumbnail geometry argument observes the same syntax and rules as it does for -resize.\n-tile \nfilename\ntile image when filling a graphic primitive\n-tile \ngeometry\nlayout of images [montage]\n-title \nstring\nassign title to displayed image [animate, display, montage]\nUse this option to assign a specific title to the image. This is assigned to the image window and is typically displayed in the window title bar. Optionally you can include the image filename, type, width, height, Exif data, or other image attribute by embedding special format characters described under the -format option.\nFor example,\n-title \n%m:%f %wx%h\n\n\n\n\n\nproduces an image title of MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480.\n-transform\ntransform the image\nThis option applies the transformation matrix from a previous -affine option.\ngm convert -affine 2,2,-2,2,0,0 -transform bird.ppm bird.jpg\n\n\n\n\n-transparent \ncolor\nmake this color transparent within the image\nThe color is specified using the format described under the -fill option.\n-treedepth \nvalue\ntree depth for the color reduction algorithm\nNormally, this integer value is zero or one. A value of zero or one causes the use of an optimal tree depth for the color reduction algorithm\nAn optimal depth generally allows the best representation of the source image with the fastest computational speed and the least amount of memory. However, the default depth is inappropriate for some images. To assure the best representation, try values between 2 and 8 for this parameter. Refer to quantize for more details.\nThe -colors or -monochrome option, or writing to an image format which requires color reduction, is required for this option to take effect.\n-trim\ntrim an image\nThis option removes any edges that are exactly the same color as the corner pixels. Use -fuzz to make -trim remove edges that are nearly the same color as the corner pixels.\n-type \ntype\nthe image type\nChoose from: Bilevel, Grayscale, Palette, PaletteMatte, TrueColor, TrueColorMatte, ColorSeparation, ColorSeparationMatte, or Optimize.\nNormally, when a format supports different subformats such as bilevel, grayscale, palette, truecolor, and truecolor+alpha, the encoder will try to choose a suitable subformat based on the nature of the image. The -type option may be used to tailor the output subformat. By default the output subformat is based on readily available image information and is usually similar to the input format.\nSpecify -type Optimize in order to enable inspecting all pixels (if necessary) in order to find the most efficient subformat. Inspecting all of the pixels may be slow for very large images, particularly if they are stored in a disk cache. If an RGB image contains only gray pixels, then every pixel in the image must be inspected in order to decide that the image is actually grayscale!\nSometimes a specific subformat is desired. For example, to force a JPEG image to be written in TrueColor RGB format even though only gray pixels are present, use\ngm convert bird.pgm -type TrueColor bird.jpg\n\n\n\n\nSimilarly, using -type TrueColorMatte will force the encoder to write an alpha channel even though the image is opaque, if the output format supports transparency.\nSome pseudo-formats (e.g. the XC format) will respect the requested type if it occurs previously on the command line. For example, to obtain a DirectClass solid color canvas image rather than PsuedoClass, use\ngm convert -size 640x480 -type TrueColor xc:red red.miff\n\n\n\n\nLikewise, specify -type Bilevel, Grayscale, TrueColor, or TrueColorMatte prior to reading a Postscript (or PDF file) in order to influence the type of image that Ghostcript returns. Reading performance will be dramatically improved for black/white Postscript if Bilevel is specified, and will be considerably faster if Grayscale is specified.\n-update \nseconds\ndetect when image file is modified and redisplay.\nSuppose that while you are displaying an image the file that is currently displayed is over-written. display will automatically detect that the input file has been changed and update the displayed image accordingly.\n-units \ntype\nthe units of image resolution\nChoose from: Undefined, PixelsPerInch, or PixelsPerCentimeter. This option is normally used in conjunction with the -density option.\n-unsharp \nradius\n{x\nsigma\n}{+\namount\n}{+\nthreshold\n}\nsharpen the image with an unsharp mask operator\nThe -unsharp option sharpens an image. The image is convolved with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 to have the method select a suitable radius.\nThe parameters are:\nradius\nThe radius of the Gaussian, in pixels, not counting the center pixel (default 0).\nsigma\nThe standard deviation of the Gaussian, in pixels (default 1.0).\namount\nThe percentage of the difference between the original and the blur image that is added back into the original (default 1.0).\nthreshold\nThe threshold, as a fraction of MaxRGB, needed to apply the difference amount (default 0.05).\n-use-pixmap\nuse the pixmap\n-verbose\nprint detailed information about the image\nThis information is printed: image scene number; image name; image size; the image class (DirectClass or PseudoClass); the total number of unique colors; and the number of seconds to read and transform the image. If the image is DirectClass, the total number of unique colors is not displayed unless -verbose is specified twice since it may take quite a long time to compute, particularly for deep images. If the image is PseudoClass then its pixels are defined by indexes into a colormap. If the image is DirectClass then each pixel includes a complete and independent color specification.\nIf -colors is also specified, the total unique colors in the image and color reduction error values are printed. Refer to quantize for a description of these values.\n-version\nprint GraphicsMagick version string\n-view \nstring\nFlashPix viewing parameters\n-virtual-pixel \nmethod\nspecify contents of \"virtual pixels\"\nThis option defines \"virtual pixels\" for use in operations that can access pixels outside the boundaries of an image.\nChoose from these methods:\nConstant\nUse the image background color.\nEdge\nExtend the edge pixel toward infinity (default).\nMirror\nMirror the image.\nTile\nTile the image.\nThis option affects operations that use virtual pixels such as -blur, -sharpen, -wave, etc.\n-visual \ntype\nanimate images using this X visual type\nChoose from these visual classes:\nStaticGray\nGrayScale\nStaticColor\nPseudoColor\nTrueColor\nDirectColor\ndefault\nvisual id\n\n\n\n\nThe X server must support the visual you choose, otherwise an error occurs. If a visual is not specified, the visual class that can display the most simultaneous colors on the default screen is chosen.\n-watermark \nbrightness\nx\nsaturation\npercent brightness and saturation of a watermark\n-wave \namplitude\nx\nwavelength\nalter an image along a sine wave\nSpecify amplitude and wavelength of the wave.\n-white-point \nx\n,\ny\nchromaticity white point\n-white-threshold red[,green][,blue][,opacity]\npixels above the threshold become white\nUse -white-threshold to set pixels with values above the specified threshold to maximum value (white). If only one value is supplied, or the red, green, and blue values are identical, then intensity thresholding is used. If the color threshold values are not identical then channel-based thresholding is used, and color distortion will occur. Specify a negative value (e.g. -1) if you want a channel to be ignored but you do want to threshold a channel later in the list. If a percent (%) symbol is appended, then the values are treated as a percentage of maximum range.\n-window \nid\nmake image the background of a window\nid can be a window id or name. Specify root to select X's root window as the target window.\nBy default the image is tiled onto the background of the target window. If backdrop or -geometry are specified, the image is surrounded by the background color. Refer to X RESOURCES for details.\nThe image will not display on the root window if the image has more unique colors than the target window colormap allows. Use -colors to reduce the number of colors.\n-window-group\nspecify the window group\n-write \nfilename\nwrite an intermediate image [convert, composite]\nThe current image is written to the specified filename and then processing continues using that image. The following is an example of how several sizes of an image may be generated in one command (repeat as often as needed):\ngm convert input.jpg -resize 50% -write input50.jpg \\\n        -resize 25% input25.jpg\n\n\n\n\n-write \nfilename\nwrite the image to a file [display]\nIf filename already exists, you will be prompted as to whether it should be overwritten.\nBy default, the image is written in the format that it was read in as. To specify a particular image format, prefix filename with the image type and a colon (e.g., ps:image) or specify the image type as the filename suffix (e.g., image.ps). Specify file as - for standard output. If file has the extension .Z or .gz, the file size is compressed using compress or gzip respectively. Precede the image file name with | to pipe to a system command.\nUse -compress to specify the type of image compression.\nThe equivalent X resource for this option is writeFilename (class WriteFilename). See X Resources for details.\nBack to Contents\n\u73af\u5883\u53d8\u91cf\n\n\nCOLUMNS\nOutput screen width. Used when formatting text for the screen. Many Unix systems keep this shell variable up to date, but it may need to be explicitly exported in order for GraphicsMagick to see it.\nDISPLAY\nX11 display ID (host, display number, and screen in the form hostname:display.screen).\nHOME\nLocation of user's home directory. GraphicsMagick searches for configuration files in $HOME/.magick if the directory exists. See MAGICK_CODER_MODULE_PATH, MAGICK_CONFIGURE_PATH, and MAGICK_FILTER_MODULE_PATH if more flexibility is needed.\nMAGICK_ACCESS_MONITOR\nWhen set to TRUE, command line monitor mode (enabled by -monitor) will also show files accessed (including temporary files) and any external commands which are executed. This is useful for debugging, but also illustrates arguments made available to an access handler registered by the MagickSetConfirmAccessHandler() C library function.\nMAGICK_CODER_STABILITY\nThe minimum coder stability level before it will be used. The available levels are PRIMARY, STABLE, UNSTABLE, and BROKEN. The default minimum level is UNSTABLE, which means that all available working coders will be used. The purpose of this option is to reduce the security exposure (or apparent complexity) due to the huge number of formats supported. Coders at the PRIMARY level are commonly used formats with very well maintained implementations. Coders at the STABLE level are reasonably well maintained but represent less used formats. Coders at the UNSTABLE level either have weak implementations, the file format itself is weak, or the probability the coder will be needed is vanishingly small. Coders at the BROKEN level are known to often not work properly or might not be useful in their current state at all.\nMAGICK_CODER_MODULE_PATH\nSearch path to use when searching for image format coder modules. This path allows the user to arbitrarily extend the image formats supported by GraphicsMagick by adding loadable modules to an arbitrary location rather than copying them into the GraphicsMagick installation directory. The formatting of the search path is similar to operating system search paths (i.e. colon delimited for Unix, and semi-colon delimited for Microsoft Windows). This user specified search path is used before trying the default search path.\nMAGICK_CONFIGURE_PATH\nSearch path to use when searching for configuration (.mgk) files. The formatting of the search path is similar to operating system search paths (i.e. colon delimited for Unix, and semi-colon delimited for Microsoft Windows). This user specified search path is used before trying the default search path.\nMAGICK_DEBUG\nDebug options (see -debug for details). Setting debug options via an environment variable is currently necessary to see the complete initialization process.\nMAGICK_FILTER_MODULE_PATH\nSearch path to use when searching for filter process modules (invoked via -process). This path allows the user to arbitrarily extend GraphicsMagick's image processing functionality by adding loadable modules to an arbitrary location rather than copying them into the GraphicsMagick installation directory. The formatting of the search path is similar to operating system search paths (i.e. colon delimited for Unix, and semi-colon delimited for Microsoft Windows). This user specified search path is used before trying the default search path.\nMAGICK_GHOSTSCRIPT_PATH\nFor Microsoft Windows, specify the path to the Ghostscript installation rather than searching for it via the Windows registry. This helps in case Ghostscript is not installed via the Ghostscript Windows installer or the user wants more control over the Ghostscript used.\nMAGICK_HOME\nPath to top of GraphicsMagick installation directory. Only observed by \"uninstalled\" builds of GraphicsMagick which do not have their location hard-coded or set by an installer.\nMAGICK_MMAP_READ\nIf MAGICK_MMAP_READ is set to TRUE, GraphicsMagick will attempt to memory-map the input file for reading. This usually substantially improves repeated read performance since the file is already in memory after the first time it has been read. However, testing shows that performance may be reduced for files accessed for the first time since data is accessed via page-faults (upon first access) and many operating systems fail to do sequential read-ahead of memory mapped files, and particularly if those files are accessed over a network. If many large input files are read, then enabling this option may harm performance by overloading the operating system's VM system as it then needs to free unmapped pages and map new ones.\nMAGICK_IO_FSYNC\nIf MAGICK_IO_FSYNC is set to TRUE, then GraphicsMagick will request that the output file is fully flushed and synchronized to disk when it is closed. This incurs a performance penalty, but has the benefit that if the power fails or the system crashes, the file should be valid on disk. If image files are referenced from a database, then this option helps assure that the files referenced by the database are valid.\nMAGICK_IOBUF_SIZE\nThe amount of I/O buffering (in bytes) to use when reading and writing encoded files. The default is 16384, which is observed to work well for many cases. The best value for a local filesystem is usually the the native filesystem block size (e.g. 4096, 8192, or even 131,072 for ZFS) in order to minimize the number of physical disk I/O operations. I/O performance to files accessed over a network may benefit significantly by tuning this option. Larger values are not necessarily better (they may be slower!), and there is rarely any benefit from using values larger than 32768. Use convert's -verbose option in order to evaluate read and write rates in pixels per second while keeping in mind that the operating system will try to cache files in RAM.\nMAGICK_LIMIT_DISK\nMaximum amount of disk space allowed for use by the pixel cache.\nMAGICK_LIMIT_FILES\nMaximum number of open files.\nMAGICK_LIMIT_MAP\nMaximum size of a memory mapped file allocation. A memory mapped file consumes memory when the file is accessed, although the system may reclaim such memory when needed.\nMAGICK_LIMIT_MEMORY\nMaximum amount of memory to allocate from the heap.\nMAGICK_LIMIT_PIXELS\nMaximum number of total pixels (image rows times image colums) to allow for any image which is requested to be created or read. This is useful to place a limit on how large an image may be. If the input image file has image dimensions larger than the pixel limit, then the image memory allocation is denied and an error is returned immediately. This is a per-image limit and does not limit the total number of pixels due to multiple image frames/pages (e.g. multi-page document or an animation).\nMAGICK_LIMIT_WIDTH\nMaximum pixel width of an image read, or created.\nMAGICK_LIMIT_HEIGHT\nMaximum pixel height of an image read, or created.\nMAGICK_TMPDIR\nPath to directory where GraphicsMagick should write temporary files. The default is to use the system default, or the location set by TMPDIR.\nTMPDIR\nFor POSIX-compatible systems (Unix-compatible), the path to the directory where all applications should write temporary files. Overridden by MAGICK_TMPDIR if it is set.\nTMP or TEMP\nFor Microsoft Windows, the path to the directory where applications should write temporary files. Overridden by MAGICK_TMPDIR if it is set.\nOMP_NUM_THREADS\nAs per the OpenMP standard, this specifies the number of threads to use in parallel regions. Some compilers default the number of threads to use to the number of processor cores available while others default to just one thread. See the OpenMP specification for other standard adjustments and your compiler's manual for vendor-specific settings.\n\u914d\u7f6e\u6587\u4ef6\n\n\nGraphicsMagick\u4f7f\u7528\u4e00\u4e9bXML\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff1a\n\n\ncolors.mgk\n\u989c\u8272\u914d\u7f6e\u6587\u4ef6\n`\n?xml version=\n1.0\n?\n\n`\ncolormap\n\n    `\ncolor\n \nname=\nAliceBlue\n \nred=\n240\n \ngreen=\n248\n \nblue=\n255\n\n        \ncompliance=\nSVG, X11, XPM\n \n/\n\n`\n/colormap\n\n\n\n\ndelegates.mgk\n\u59d4\u6258\u914d\u7f6e\u6587\u4ef6\nlog.mgk\n\u8bb0\u5f55\u914d\u7f6e\u6587\u4ef6\n?xml version=\n1.0\n?\n\n\nmagicklog\n\n    \nlog\n \nevents=\nNone\n \n/\n\n    \nlog\n \noutput=\nstdout\n \n/\n\n    \nlog\n \nfilename=\nMagick-%d.log\n \n/\n\n    \nlog\n \ngenerations=\n3\n \n/\n\n    \nlog\n \nlimit=\n2000\n \n/\n\n    \nlog\n \nformat=\n%t %r %u %p %m/%f/%l/%d:\\n  %e\n  \n/\n\n\n/magicklog\n\n\n\n\nmodules.mgk\n\u53ef\u52a0\u8f7d\u7684\u6a21\u5757\u914d\u7f6e\u6587\u4ef6\n?xml version=\n1.0\n?\n\n\nmodulemap\n\n    \nmodule\n \nmagick=\n8BIM\n \nname=\nMETA\n \n/\n\n\n/modulemap\n\n\n\n\ntype.mgk\n\u4e3b\u7c7b\u578b\uff08\u5b57\u4f53\uff09\u914d\u7f6e\u6587\u4ef6\n    \n?xml version=\n1.0\n?\n\n    \ntypemap\n\n        \ninclude\n \nfile=\ntype-windows.mgk\n \n/\n\n        \ntype\n\n        \nname=\nAvantGarde-Book\n\n        \nfullname=\nAvantGarde Book\n\n        \nfamily=\nAvantGarde\n\n        \nfoundry=\nURW\n\n        \nweight=\n400\n\n        \nstyle=\nnormal\n\n        \nstretch=\nnormal\n\n        \nformat=\ntype1\n\n        \nmetrics=\n/usr/local/share/ghostscript/fonts/a010013l.afm\n\n        \nglyphs=\n/usr/local/share/ghostscript/fonts/a010013l.pfb\n\n        \n/\n\n    \n/typemap\n\n\n\n\n\u4f5c\u8005\n\n\n\n\nJohn Cristy,\n\n\nBob Friesenhahn,\n\n\nGlenn Randers-Pehrson,\n\n\nWilliam Radcliff,\n\n\nLeonard Rosenthol,\n\n\nLars Ruben Skyum,\n\n\nJaroslav Fojtik,\n\n\nand many more.\n\n\n\n\n\u7248\u6743\n\n\nCopyright (C) 2002 - 2017 GraphicsMagick Group. Additional copyrights apply. Please see see http://www.GraphicsMagick.org/Copyright.html for details.", 
            "title": "\u4e3b\u9875"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_1", 
            "text": "GraphicsMagick", 
            "title": "\u624b\u518c"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_2", 
            "text": "gm - command-line utility to create, edit, compare, convert, or display images", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_3", 
            "text": "gm   animate   [   options   ...   ]   file   [   [   options   ...   ]   file   ...   ]  gm   batch   [   options   ...   ]   [   script   ]  gm   benchmark   [   options   ...   ]   subcommand  gm   compare   [   options   ...   ]   reference - image   [   options   ...   ]   compare - image   [   options   ...   ]  gm   composite   [   options   ...   ]   change - image   base - image   [   mask - image   ]   output - image  gm   conjure   [   options   ]   script . msl   [   [   options   ]   script . msl   ]  gm   convert   [   [   options   ...   ]   [   input - file   ...   ]   [   options   ...   ]   ]   output - file  gm   display   [   options   ...   ]   file   ...   [   [ options   ...   ] file   ...   ]  gm   identify   file   [   file   ...   ]  gm   import   [   options   ...   ]   file  gm   mogrify   [   options   ...   ]   file   ...  gm   montage   [   options   ...   ]   file   [   [   options   ...   ]   file   ...   ]   output - file  gm   time   subcommand  gm   version", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_4", 
            "text": "GraphicsMagick's gm provides a suite of utilities for creating, comparing, converting, editing, and displaying images. All of the utilities are provided as sub-commands of a single gm executable:  animate  displays an animation (e.g. a GIF file) on any workstation display running an X server.  batch  executes an arbitary number of the utility commands (e.g. convert) in the form of a simple linear batch script in order to improve execution efficiency, and/or to allow use as a subordinate co-process under the control of an arbitrary script or program.  benchmark  executes one of the other utility commands (e.g. convert) for a specified number of iterations, or execution time, and reports execution time and other profiling information such as CPU utilization. Benchmark provides various operating modes including executing the command with a varying number of threads, and alternate reporting formats such as comma-separated value (CSV).  compare  compares two images and reports difference statistics according to specified metrics and/or outputs an image with a visual representation of the differences. It may also be used to test if images are similar within a particular range and specified metric, returning a truth value to the executing environment.  composite  composites images (blends or merges images together) to create new images.  conjure  interprets and executes scripts in the Magick Scripting Language (MSL).  convert  converts an input file using one image format to an output file with the same or differing image format while applying an arbitrary number of image transformations.  display  is a machine architecture independent image processing and display facility. It can display an image on any workstation display running an X server.  identify  describes the format and characteristics of one or more image files. It will also report if an image is incomplete or corrupt.  import  reads an image from any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen.  mogrify  transforms an image or a sequence of images. These transforms include image scaling, image rotation, color reduction, and others. The transmogrified image overwrites the original image.  montage  creates a composite by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.  time  executes a subcommand and reports the user, system, and total execution time consumed.  version  reports the GraphicsMagick release version, maximum sample-depth, copyright notice, supported features, and the options used while building the software.  The GraphicsMagick utilities recognize the following image formats:     Name  Mode  Description      3FR  r--  Hasselblad Photo RAW    8BIM  rw-  Photoshop resource format    8BIMTEXT  rw-  Photoshop resource text format    8BIMWTEXT  rw-  Photoshop resource wide text format    APP1  rw-  Raw application information    APP1JPEG  rw-  Raw JPEG binary data    ART  r--  PF1: 1st Publisher    ARW  r--  Sony Alpha DSLR RAW    AVS  rw+  AVS X image    BIE  rw-  Joint Bi-level Image experts Group interchange format    BMP  rw+  Microsoft Windows bitmap image    BMP2  -w-  Microsoft Windows bitmap image v2    BMP3  -w-  Microsoft Windows bitmap image v3    CACHE  ---  Magick Persistent Cache image format    CALS  rw-  Continuous Acquisition and Life-cycleSupport Type 1 image    CAPTION  r--  Caption (requires separate size info)    CIN  rw-  Kodak Cineon Format    CMYK  rw-  Raw cyan, magenta, yellow, and black samples (8 or 16 bits, depending on the image depth)    CMYKA  rw-  Raw cyan, magenta, yellow, black, and matte samples (8 or 16 bits, depending on the image depth)    CR2  r--  Canon Photo RAW    CRW  r--  Canon Photo RAW    CUR  r--  Microsoft Cursor Icon    CUT  r--  DR Halo    DCM  r--  Digital Imaging and Communications in Medicine image    DCR  r--  Kodak Photo RAW    DCX  rw+  ZSoft IBM PC multi-page Paintbrush    DNG  r--  Adobe Digital Negative    DPS  r--  Display PostScript Interpreter    DPX  rw-  Digital Moving Picture Exchange    EPDF  rw-  Encapsulated Portable Document Format    EPI  w-  Adobe Encapsulated PostScript Interchange format    EPS  rw-  Adobe Encapsulated PostScript    EPS2  -w-  Adobe Level II Encapsulated PostScript    EPS3  -w-  Adobe Level III Encapsulated PostScript    EPSF  rw-  Adobe Encapsulated PostScript    EPSI  rw-  Adobe Encapsulated PostScript Interchange format    EPT  rw-  Adobe Encapsulated PostScript with MS-DOS TIFF preview    EPT2  rw-  Adobe Level II Encapsulated PostScript with MS-DOS TIFF preview    EPT3  rw-  Adobe Level III Encapsulated PostScript with MS-DOS TIFF preview    EXIF  rw-  Exif digital camera binary data    FAX  rw+  Group 3 FAX (Not TIFF Group3 FAX!)    FITS  rw-  Flexible Image Transport System    FRACTAL  r--  Plasma fractal image    FPX  rw-  FlashPix Format    GIF  rw+  CompuServe graphics interchange format    GIF87  rw-  CompuServe graphics interchange format(version 87a)    GRADIENT  r--  Gradual passing from one shade to another    GRAY  rw+  Raw gray samples (8/16/32 bits,depending on the image depth)    HISTOGRAM  -w-  Histogram of the image    HRZ  r--  HRZ: Slow scan TV    HTML  -w-  Hypertext Markup Language and a client-side image map    ICB  rw+  Truevision Targa image    ICC  rw-  ICC Color Profile    ICM  rw-  ICC Color Profile    ICO  r--  Microsoft icon    ICON  r--  Microsoft icon    IDENTITY  r--  Hald CLUT identity image    IMAGE  r--  GraphicsMagick Embedded Image    INFO  -w+  Image descriptive information and statistics    IPTC  rw-  IPTC Newsphoto    IPTCTEXT  rw-  IPTC Newsphoto text format    IPTCWTEXT  rw-  IPTC Newsphoto wide text format    JBG  rw+  Joint Bi-level Image experts Group interchange format    JBIG  rw+  Joint Bi-level Image experts Group interchange format    JNG  rw-  JPEG Network Graphics    JP2  rw-  JPEG-2000 JP2 File Format Syntax    JPC  rw-  JPEG-2000 Code Stream Syntax    JPEG  rw-  Joint Photographic Experts Group JFIF format    JPG  rw-  Joint Photographic Experts Group JFIF format    K25  r--  Kodak Photo RAW    KDC  r--  Kodak Photo RAW    LABEL  r--  Text image format    M2V  rw+  MPEG-2 Video Stream    MAP  rw-  Colormap intensities and indices    MAT  r--  MATLAB image format    MATTE  -w+  MATTE format    MIFF  rw+  Magick Image File Format    MNG  rw+  Multiple-image Network Graphics    MONO  rw-  Bi-level bitmap in least-significant- -byte-first order    MPC  rw+  Magick Persistent Cache image format    MPEG  rw+  MPEG-1 Video Stream    MPG  rw+  MPEG-1 Video Stream    MRW  r--  Minolta Photo Raw    MSL  r--  Magick Scripting Language    MTV  rw+  MTV Raytracing image format    MVG  rw-  Magick Vector Graphics    NEF  r--  Nikon Electronic Format    NULL  r--  Constant image of uniform color    OTB  rw-  On-the-air bitmap    P7  rw+  Xv thumbnail format    PAL  rw-  16bit/pixel interleaved YUV    PALM  rw-  Palm Pixmap    PBM  rw+  Portable bitmap format (black and white)    PCD  rw-  Photo CD    PCDS  rw-  Photo CD    PCL  -w-  Page Control Language    PCT  rw-  Apple Macintosh QuickDraw/PICT    PCX  rw-  ZSoft IBM PC Paintbrush    PDB  rw+  Palm Database ImageViewer Format    PDF  rw+  Portable Document Format    PEF  r--  Pentax Electronic File    PFA  r--  TrueType font    PFB  r--  TrueType font    PGM  rw+  Portable graymap format (gray scale)    PGX  r--  JPEG-2000 VM Format    PICON  rw-  Personal Icon    PICT  rw-  Apple Macintosh QuickDraw/PICT    PIX  r--  Alias/Wavefront RLE image format    PLASMA  r--  Plasma fractal image    PNG  rw-  Portable Network Graphics    PNG24  rw-  Portable Network Graphics, 24 bit RGB opaque only    PNG32  rw-  Portable Network Graphics, 32 bit RGBA semitransparency OK    PNG8  rw-  Portable Network Graphics, 8-bit indexed, binary transparency only    PNM  rw+  Portable anymap    PPM  rw+  Portable pixmap format (color)    PREVIEW  -w-  Show a preview an image enhancement,effect, or f/x    PS  rw+  Adobe PostScript    PS2  -w+  Adobe Level II PostScript    PS3  -w+  Adobe Level III PostScript    PSD  rw-  Adobe Photoshop bitmap    PTIF  rw-  Pyramid encoded TIFF    PWP  r--  Seattle Film Works    RAF  r--  Fuji Photo RAW    RAS  rw+  SUN Rasterfile    RGB  rw+  Raw red, green, and blue samples    RGBA  rw+  Raw red, green, blue, and matte samples    RLA  r--  Alias/Wavefront image    RLE  r--  Utah Run length encoded image    SCT  r--  Scitex HandShake    SFW  r--  Seattle Film Works    SGI  rw+  Irix RGB image    SHTML  -w-  Hypertext Markup Language and a client-side image map    STEGANO  r--  Steganographic image    SUN  rw+  SUN Rasterfile    SVG  rw+  Scalable Vector Gaphics    TEXT  rw+  Raw text    TGA  rw+  Truevision Targa image    TIFF  rw+  Tagged Image File Format    TILE  r--  Tile image with a texture    TIM  r--  PSX TIM    TOPOL  r--  TOPOL X Image    TTF  r--  TrueType font    TXT  rw+  Raw text    UIL  -w-  X-Motif UIL table    UYVY  rw-  16bit/pixel interleaved YUV    VDA  rw+  Truevision Targa image    VICAR  rw-  VICAR rasterfile format    VID  rw+  Visual Image Directory    VIFF  rw+  Khoros Visualization image    VST  rw+  Truevision Targa image    WBMP  rw-  Wireless Bitmap (level 0) image    WMF  r--  Windows Metafile    WPG  r--  Word Perfect Graphics    X  rw-  X Image    X3F  r--  Foveon X3 (Sigma/Polaroid) RAW    XBM  rw-  X Windows system bitmap (black and white)    XC  r--  Constant image uniform color    XCF  r--  GIMP image    XMP  rw-  Adobe XML metadata    XPM  rw-  X Windows system pixmap (color)    XV  rw+  Khoros Visualization image    XWD  rw-  X Windows system window dump (color)    YUV  rw-  CCIR 601 4:1:1 or 4:2:2 (8-bit only)     \u6a21\u5f0f:   r  Read  w  Write  +  Multi-image   Support for some of these formats require additional programs or libraries. See README in the source package for where to find optional additional software.  Note, a format delineated with + means that if more than one image is specified, frames are combined into a single multi-image file. Use +adjoin if you want a single image produced for each frame.  Your installation might not support all of the formats in the list. To get an accurate listing of the formats supported by your particular configuration, run \"gm convert -list format\".  Raw images are expected to have one byte per pixel unless gm is compiled in 16-bit quantum mode or in 32-bit quantum mode. Here, the raw data is expected to be stored two or four bytes per pixel, respectively, in most-significant-byte-first order. For example, you can tell if gm was compiled in 16-bit mode by typing \"gm version\" without any options, and looking for \"Q:16\" in the first line of output.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_5", 
            "text": "By default, the image format is determined by its magic number, i.e., the first few bytes of the file. To specify a particular image format, precede the filename with an image format name and a colon (i.e.ps:image) or specify the image type as the filename suffix (i.e.image.ps). The magic number takes precedence over the filename suffix and the prefix takes precedence over the magic number and the suffix in input files. When a file is read, its magic number is stored in the \"image- magick\" string. In output files, the prefix takes precedence over the filename suffix, and the filename suffix takes precedence over the \"image- magick\" string.  To read the \"built-in\" formats (GRANITE, H, LOGO, NETSCAPE, PLASMA, and ROSE) use a prefix (including the colon) without a filename or suffix. To read the XC format, follow the colon with a color specification. To read the CAPTION format, follow the colon with a text string or with a filename prefixed with the at symbol (@).  When you specify X as your image type, the filename has special meaning. It specifies an X window by id, name, or root. If no filename is specified, the window is selected by clicking the mouse in the desired window.  Specify input_file as - for standard input, output_file as - for standard output. If input_file has the extension .Z or .gz, the file is uncompressed with uncompress or gunzip respectively. If output_file has the extension .Z or .gz, the file is compressed using with compress or gzip respectively.  Use an optional index enclosed in brackets after an input file name to specify a desired subimage of a multi-resolution image format like Photo CD (e.g. \"img0001.pcd[4]\") or a range for MPEG images (e.g. \"video.mpg[50-75]\"). A subimage specification can be disjoint (e.g. \"image.tiff[2,7,4]\"). For raw images, specify a subimage with a geometry (e.g. -size 640x512 \"image.rgb[320x256+50+50]\"). Surround the image name with quotation marks to prevent your shell from interpreting the square brackets.  Single images are written with the filename you specify. However, multi-part images (e.g., a multi-page PostScript document with +adjoin specified) may be written with the scene number included as part of the filename. In order to include the scene number in the filename, it is necessary to include a printf-style %d format specification in the file name and use the +adjoin option. For example,  image%02d.miff  writes files image00.miff, image01.miff, etc. Only a single specification is allowed within an output filename. If more than one specification is present, it will be ignored. It is best to embed the scene number in the base part of the file name, not in the extension, because the extension will not be a recognizeable image type.  When running a commandline utility, you can prepend an at sign @ to a filename to read a list of image filenames from that file. This is convenient in the event you have too many image filenames to fit on the command line.", 
            "title": "\u6587\u4ef6\u548c\u683c\u5f0f"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_6", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect for the set of images that follows, until the set is terminated by the appearance of any option or -noop. Some options only affect the decoding of images and others only the encoding. The latter can appear after the final group of input images.  This is a combined list of the command-line options used by the GraphicsMagick utilities (animate, compare, composite, convert, display, identify, import, mogrify and montage).  In this document, angle brackets (\" \") enclose variables and curly brackets (\"{}\") enclose optional parameters. For example, \"-fuzz  distance {%}\" means you can use the option \"-fuzz 10\" or \"-fuzz 2%\".  -adjoin join images into a single multi-image file By default, all images of an image sequence are stored in the same file. However, some formats (e.g. JPEG) do not support storing more than one image per file and only the first frame in an image sequence will be saved unless the result is saved to separate files. Use +adjoin to force saving multiple frames to multiple numbered files. If +adjoin is used, then the output filename must include a printf style formatting specification for the numeric part of the filename. For example, image%02d.miff  -affine  matrix drawing transform matrix This option provides a transform matrix {sx,rx,ry,sy,tx,ty} for use by subsequent -draw or -transform options. -antialias remove pixel aliasing By default antialiasing algorithms are used when drawing objects (e.g. lines) or rendering vector formats (e.g. WMF and Postscript). Use +antialias to disable use of antialiasing algorithms. Reasons to disable antialiasing include avoiding increasing colors in the image, or improving rendering speed. -append append a set of images This option creates a single image where the images in the original set are stacked top-to-bottom. If they are not of the same width, any narrow images will be expanded to fit using the background color. Use +append to stack images left-to-right. The set of images is terminated by the appearance of any option. If the -append option appears after all of the input images, all images are appended. -asc-cdl  spec apply ASC CDL color transform Applies (\"bakes in\") the ASC CDL, which is a format for the exchange of basic primary color grading information between equipment and software from different manufacturers. The format defines the math for three functions: slope, offset and power. Each function uses a number for the red, green, and blue color channels for a total of nine numbers comprising a single color decision. The tenth number (optional) is for chromiance (saturation) as specified by ASC CDL 1.2. The argument string is comma delimited and is in the following form (but without invervening spaces or line breaks) redslope,redoffset,redpower:\ngreenslope,greenoffset,greenpower:\nblueslope,blueoffset,bluepower:\nsaturation  with the unity (no change) specification being: 1.0,0.0,1.0:1.0,0.0,1.0:1.0,0.0,1.0:1.0   -authenticate  string decrypt image with this password Use this option to supply a password for decrypting an image or an image sequence, if it is being read from a format such as PDF that supports encryption. Encrypting images being written is not supported. -auto-orient orient (rotate) image so it is upright Adjusts the image orienation so that it is suitable for viewing. Uses the orientation tag obtained from the image file or as supplied by the -orient option. -average average a set of images The set of images is terminated by the appearance of any option. If the -average option appears after all of the input images, all images are averaged. -backdrop display the image centered on a backdrop. This backdrop covers the entire workstation screen and is useful for hiding other X window activity while viewing the image. The color of the backdrop is specified as the foreground color (X11 default is black). Refer to X Resources for details. -background  color the background color The color is specified using the format described under the -fill option. -black-threshold red[,green][,blue][,opacity] pixels below the threshold become black Use -black-threshold to set pixels with values below the specified threshold to minimum value (black). If only one value is supplied, or the red, green, and blue values are identical, then intensity thresholding is used. If the color threshold values are not identical then channel-based thresholding is used, and color distortion will occur. Specify a negative value (e.g. -1) if you want a channel to be ignored but you do want to threshold a channel later in the list. If a percent (%) symbol is appended, then the values are treated as a percentage of maximum range. -blue-primary  x , y blue chromaticity primary point -blur  radius {x sigma } blur the image with a Gaussian operator Blur with the given radius and standard deviation (sigma). -border  width x height surround the image with a border of color See -geometry for details about the geometry specification. -bordercolor  color the border color The color is specified using the format described under the -fill option. -borderwidth  geometry the border width -box  color set the color of the annotation bounding box The color is specified using the format described under the -fill option. See -draw for further details. -channel  type the type of channel Choose from: Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray. Use this option to extract a particular channel from the image. Opacity, for example, is useful for extracting the opacity values from an image. -charcoal  factor simulate a charcoal drawing -chop  width x height {+-} x {+-} y {%} remove pixels from the interior of an image Width and height give the number of columns and rows to remove, and x and y are offsets that give the location of the leftmost column and topmost row to remove. The x offset normally specifies the leftmost column to remove. If the -gravity option is present with NorthEast, East, or SouthEast gravity, it gives the distance leftward from the right edge of the image to the rightmost column to remove. Similarly, the y offset normally specifies the topmost row to remove, but if the -gravity option is present with SouthWest, South, or SouthEast gravity, it specifies the distance upward from the bottom edge of the image to the bottom row to remove. The -chop option removes entire rows and columns, and moves the remaining corner blocks leftward and upward to close the gaps. -clip apply the clipping path, if one is present If a clipping path is present, it will be applied to subsequent operations. For example, if you type the following command: gm convert -clip -negate cockatoo.tif negated.tif  only the pixels within the clipping path are negated. The -clip feature requires the XML library. If the XML library is not present, the option is ignored. -coalesce merge a sequence of images Each image N in the sequence after Image 0 is replaced with the image created by flattening images 0 through N. The set of images is terminated by the appearance of any option. If the -coalesce option appears after all of the input images, all images are coalesced. -colorize  value colorize the image with the pen color Specify the amount of colorization as a percentage. You can apply separate colorization values to the red, green, and blue channels of the image with a colorization value list delimited with slashes (e.g. 0/0/50). The -colorize option may be used in conjunction with -modulate to produce a nice sepia toned image like: gm convert input.ppm -modulate 115,0,100 \\\n        -colorize 7,21,50 output.ppm.  -colormap  type define the colormap type Choose between shared or private. This option only applies when the default X server visual is PseudoColor or GRAYScale. Refer to -visual for more details. By default, a shared colormap is allocated. The image shares colors with other X clients. Some image colors could be approximated, therefore your image may look very different than intended. Choose Private and the image colors appear exactly as they are defined. However, other clients may go technicolor when the image colormap is installed. -colors  value preferred number of colors in the image The actual number of colors in the image may be less than your request, but never more. Note, this is a color reduction option. Images with less unique colors than specified with this option will have any duplicate or unused colors removed. The ordering of an existing color palette may be altered. When converting an image from color to grayscale, convert the image to the gray colorspace before reducing the number of colors since doing so is most efficient. Refer to  quantize  for more details. Note, options -dither, -colorspace, and -treedepth affect the color reduction algorithm. -colorspace  value the type of colorspace Choices are: CineonLog, CMYK, GRAY, HSL, HWB, OHTA, RGB, Rec601Luma, Rec709Luma, Rec601YCbCr, Rec709YCbCr, Transparent, XYZ, YCbCr, YIQ, YPbPr, or YUV. Color reduction, by default, takes place in the RGB color space. Empirical evidence suggests that distances in color spaces such as YUV or YIQ correspond to perceptual color differences more closely than do distances in RGB space. These color spaces may give better results when color reducing an image. Refer to quantize for more details. Two gray colorspaces are supported. The Rec601Luma space is based on the recommendations for legacy NTSC television (ITU-R BT.601-5). The Rec709Luma space is based on the recommendations for HDTV (Rec. ITU-R BT.709-5) and is suitable for use with computer graphics, and for contemporary CRT displays. The GRAY colorspace currently selects the Rec601Luma colorspace by default for backwards compatibly reasons. This default may be re-considered in the future. Two YCbCr colorspaces are supported. The Rec601YCbCr space is based on the recommendations for legacy NTSC television (ITU-R BT.601-5). The Rec709CbCr space is based on the recommendations for HDTV (Rec. ITU-R BT.709-5) and is suitable for suitable for use with computer graphics, and for contemporary CRT displays. The YCbCr colorspace specification is equivalent toRec601YCbCr. The Transparent color space behaves uniquely in that it preserves the matte channel of the image if it exists. The -colors or -monochrome option, or saving to a file format which requires color reduction, is required for this option to take effect. -comment  string annotate an image with a comment Use this option to assign a specific comment to the image, when writing to an image format that supports comments. You can include the image filename, type, width, height, or other image attribute by embedding special format characters listed under the -format option. The comment is not drawn on the image, but is embedded in the image datastream via a \"Comment\" tag or similar mechanism. If you want the comment to be visible on the image itself, use the -draw option instead. For example, -comment  %m:%f %wx%h   produces an image comment of MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480. If the first character of string is @, the image comment is read from a file titled by the remaining characters in the string. If the -comment option appears multiple times, only the last comment is stored. In PNG images, the comment is stored in a tEXt or zTXt chunk with the keyword \"comment\". -compose  operator the type of image composition The description of composition uses abstract terminology in order to allow the the description to be more clear, while avoiding constant values which are specific to a particular build configuration. Each image pixel is represented by red, green, and blue levels (which are equal for a gray pixel). MaxRGB is the maximum integral value which may be stored in the red, green, or blue channels of the image. Each image pixel may also optionally (if the image matte channel is enabled) have an associated level of opacity (ranging from opaque to transparent), which may be used to determine the influence of the pixel color when compositing the pixel with another image pixel. If the image matte channel is disabled, then all pixels in the image are treated as opaque. The color of an opaque pixel is fully visible while the color of a transparent pixel color is entirely absent (pixel color is ignored). By definition, raster images have a rectangular shape. All image rows are of equal length, and all image columns have the same number of rows. By treating the opacity channel as a visual \"mask\" the rectangular image may be given a \"shape\" by treating the opacity channel as a cookie-cutter for the image. Pixels within the shape are opaque, while pixels outside the shape are transparent. Pixels on the boundary of the shape may be between opaque and transparent in order to provide antialiasing (visually smooth edges). The description of the composition operators use this concept of image \"shape\" in order to make the description of the operators easier to understand. While it is convenient to describe the operators in terms of \"shapes\" they are by no means limited to mask-style operations since they are based on continuous floating-point mathematics rather than simple boolean operations. By default, the Over composite operator is used. The following composite operators are available: Over In Out Atop Xor Plus Minus Add Subtract Difference Divide Multiply Bumpmap Copy CopyRed CopyGreen CopyBlue CopyOpacity CopyCyan CopyMagenta CopyYellow CopyBlack The behavior of each operator is described below. Over The result will be the union of the two image shapes, with opaque areas of change-image obscuring base-image in the region of overlap. In The result is simply change-image cut by the shape of base-image. None of the image data of base-image will be in the result. Out The resulting image is change-image with the shape of base-image cut out. Atop The result is the same shape as base-image, with change-image obscuring base-image where the image shapes overlap. Note this differs from over because the portion of change-image outside base-image's shape does not appear in the result. Xor The result is the image data from both change-image and base-image that is outside the overlap region. The overlap region will be blank. Plus The result is just the sum of the image data. Output values are cropped to MaxRGB (no overflow). This operation is independent of the matte channels. Minus The result of change-image - base-image, with underflow cropped to zero. The matte channel is ignored (set to opaque, full coverage). Add The result of change-image + base-image, with overflow wrapping around (mod MaxRGB+1). Subtract The result of change-image - base-image, with underflow wrapping around (mod MaxRGB+1). The add and subtract operators can be used to perform reversible transformations. Difference The result of abs(change-image - base-image). This is useful for comparing two very similar images. Divide The result of change-image / base-image. This is useful for improving the readability of text on unevenly illuminated photos (by using a gaussian blurred copy of change-image as base-image). Multiply The result of change-image * base-image. This is useful for the creation of drop-shadows. Bumpmap The result base-image shaded by change-image. Copy The resulting image is base-image replaced with change-image. Here the matte information is ignored. CopyRed The resulting image is the red channel in base-image replaced with the red channel in change-image. The other channels are copied untouched. CopyGreen The resulting image is the green channel in base-image replaced with the green channel in change-image. The other channels are copied untouched. CopyBlue The resulting image is the blue channel in base-image replaced with the blue channel in change-image. The other channels are copied untouched. CopyOpacity The resulting image is the opacity channel in base-image replaced with the opacity channel in change-image. The other channels are copied untouched. CopyCyan The resulting image is the cyan channel in base-image replaced with the cyan channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace. CopyMagenta The resulting image is the magenta channel in base-image replaced with the magenta channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace. CopyYellow The resulting image is the yellow channel in base-image replaced with the yellow channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace. CopyBlack The resulting image is the black channel in base-image replaced with the black channel in change-image. The other channels are copied untouched. Use of this operator requires that base-image be in CMYK(A) colorspace. If change-image is not in CMYK space, then the change-image pixel intensities are used. -compress  type the type of image compression Choices are: None, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA. Specify +compress to store the binary image in an uncompressed format. The default is the compression type of the specified image file. \"Lossless\" refers to lossless JPEG, which is only available if the JPEG library has been patched to support it. Use of lossless JPEG is generally not recommended. Use the -quality option to set the compression level to be used by JPEG, PNG, MIFF, and MPEG encoders. Use the -sampling-factor option to set the sampling factor to be used by the DPX, JPEG, MPEG, and YUV encoders for downsampling the chroma channels. -contrast enhance or reduce the image contrast This option enhances the intensity differences between the lighter and darker elements of the image. Use -contrast to enhance the image or +contrast to reduce the image contrast. For a more pronounced effect you can repeat the option:     gm convert rose: -contrast -contrast rose_c2.png -convolve  kernel convolve image with the specified convolution kernel The kernel is specified as a comma-separated list of floating point values, ordered left-to right, starting with the top row. The order of the kernel is determined by the square root of the number of entries. Presently only square kernels are supported. -create-directories create output directory if required Use this option with -output-directory if the input paths contain subdirectories and it is desired to create similar subdirectories in the output directory. Without this option, mogrify will fail if the required output directory does not exist. -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image See -geometry for details about the geometry specification. The width and height give the size of the image that remains after cropping, and x and y are offsets that give the location of the top left corner of the cropped image with respect to the original image. To specify the amount to be removed, use -shave instead. If the x and y offsets are present, a single image is generated, consisting of the pixels from the cropping region. The offsets specify the location of the upper left corner of the cropping region measured downward and rightward with respect to the upper left corner of the image. If the -gravity option is present with NorthEast, East, or SouthEast gravity, it gives the distance leftward from the right edge of the image to the right edge of the cropping region. Similarly, if the -gravity option is present with SouthWest, South, or SouthEast gravity, the distance is measured upward between the bottom edges. If the x and y offsets are omitted, a set of tiles of the specified geometry, covering the entire input image, is generated. The rightmost tiles and the bottom tiles are smaller if the specified geometry extends beyond the dimensions of the input image. -cycle  amount displace image colormap by amount Amount defines the number of positions each colormap entry isshifted. -debug  events enable debug printout The events parameter specifies which events are to be logged. It can be either None, All, or a comma-separated list consisting of one or more of the following domains: Annotate, Blob, Cache, Coder, Configure, Deprecate, Error, Exception, Locale, Render,Resource, TemporaryFile, Transform, Warning, X11, or User. For example, to log cache and blob events, use     gm convert -debug  Cache,Blob  rose: rose.png  The \"User\" domain is normally empty, but developers can log \"User\" events in their private copy of GraphicsMagick. Use the -log option to specify the format for debugging output. Use +debug to turn off all logging. An alternative to using -debug is to use the MAGICK_DEBUG environment variable. The allowed values for the MAGICK_DEBUG environment variable are the same as for the -debug option. -deconstruct break down an image sequence into constituent parts This option compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers. This method can undo a coalesced sequence returned by the -coalesce option, and is useful for removing redundant information from a GIF or MNG animation. The sequence of images is terminated by the appearance of any option. If the -deconstruct option appears after all of the input images, all images are deconstructed. -define  key {= value },... add  coder/decoder  specific options This option creates one or more definitions for coders and decoders to use while reading and writing image data. Definitions may be passed to coders and decoders to control options that are specific to certain image formats. If value is missing for a definition, an empty-valued definition of a flag will be created with that name. This is used to control on/off options. Use +define  key ,... to remove definitions previously created. Use +define \"*\" to remove all existing definitions. The following definitions may be created: cineon:colorspace={rgb|cineonlog} Use the cineon:colorspace option when reading a Cineon file to specify the colorspace the Cineon file uses. This overrides the colorspace type implied by the DPX header (if any). dpx:bits-per-sample= value If the dpx:bits-per-sample key is defined, GraphicsMagick will write DPX images with the specified bits per sample, overriding any existing depth value. If this option is not specified, then the value is based on the existing image depth value from the original image file. The DPX standard supports bits per sample values of 1, 8, 10, 12, and 16. Many DPX readers demand a sample size of 10 bits with type A padding (see below). dpx:colorspace={rgb|cineonlog} Use the dpx:colorspace option when reading a DPX file to specify the colorspace the DPX file uses. This overrides the colorspace type implied by the DPX header (if any). dpx:packing-method={packed|a|b|lsbpad|msbpad} DPX samples are output within 32-bit words. They may be tightly packed end-to-end within the words (\"packed\"), padded with null bits to the right of the sample (\"a\" or \"lsbpad), or padded with null bits to the left of the sample (\"b\" or \"msbpad\"). This option only has an effect for sample sizes of 10 or 12 bits. If samples are not packed, the DPX standard recommends type A padding. Many DPX readers demand a sample size of 10 bits with type A padding. dpx:pixel-endian={lsb|msb} Allows the user to specify the endian order of the pixels when reading or writing the DPX files. Sometimes this is useful if the file is (or must be) written incorrectly so that the file header and the pixels use different endianness. dpx:swap-samples={true|false} GraphicsMagick strives to adhere to the DPX standard but certain aspects of the standard can be quite confusing. As a result, some 10-bit DPX files have Red and Blue interchanged, or Cb and Cr interchanged due to an different interpretation of the standard, or getting the wires crossed. The swap-samples option may be supplied when reading or writing in order to read or write using the necessary sample order. jp2:rate= value Specify the compression factor to use while writing JPEG-2000 files. The compression factor is the reciprocal of the compression ratio. The valid range is 0.0 to 1.0, with 1.0 indicating lossless compression. If defined, this value overrides the -quality setting. The default quality setting of 75 results in a rate value of 0.06641. jpeg:block-smoothing={true|false} Enables or disables block smoothing when reading a JPEG file (default enabled). jpeg:dct-method= value Selects the IJG JPEG library DCT implementation to use. The encoding implementations vary in speed and encoding error. The available choices for value are islow, ifast, float, default and fastest. Note that fastest might not necessarily be fastest on your CPU, depending on the choices made when the JPEG library was built and how your CPU behaves. jpeg:fancy-upsampling={true|false} Enables or disables fancy upsampling when reading a JPEG file (default enabled). jpeg:optimize-coding={true|false} Selects if huffman encoding should be used. Huffman encoding is enabled by default, but may be disabled for very large images since it encoding requires that the entire image be buffered in memory. Huffman encoding produces smaller JPEG files at the expense of added compression time and memory consumption. jpeg:preserve-settings If the jpeg:preserve-settings flag is defined, the JPEG encoder will use the same \"quality\" and \"sampling-factor\" settings that were found in the input file, if the input was in JPEG format. These settings are also preserved if the input is a JPEG file and the output is a JNG file. If the colorspace of the output file differs from that of the input file, the quality setting is preserved but the sampling-factors are not. pcl:fit-to-page If the pcl:fit-to-page flag is defined, then the printer is requested to scale the image to fit the page size (width and/or height). pdf:use-cropbox={true|false} If the pdf:use-cropbox flag is set to true, then Ghostscript is requested to apply the PDF crop box. pdf:stop-on-error={true|false} If the pdf:stop-on-error flag is set to true, then Ghostscript is requested to stop processing the PDF when the first error is encountered. Otherwise it will attempt to process all requested pages. ps:imagemask If the ps:imagemask flag is defined, the PS3 and EPS3 coders will create Postscript files that render bilevel images with the Postscript imagemask operator instead of the image operator. tiff:alpha={unspecified|associated|unassociated} Specify the TIFF alpha channel type when reading or writing TIFF files, overriding the normal value. The default alpha channel type for new files is unspecified alpha. Existing alpha settings are preserved when converting from one TIFF file to another. When a TIFF file uses associated alpha, the image pixels are pre-multiplied (i.e. altered) with the alpha channel. Files with \"associated\" alpha appear as if they were alpha composited on a black background when the matte channel is disabled. If the unassociated alpha type is selected, then the alpha channel is saved without altering the pixels. Photoshop recognizes associated alpha as transparency information, if the file is saved with unassociated alpha, the alpha information is loaded as an independent channel. Note that for many years, ImageMagick and GraphicsMagick marked TIFF files as using associated alpha, without properly pre-multiplying the pixels. tiff:fill-order={msb2lsb|lsb2msb} If the tiff:fill-order key is defined, GraphicsMagick will use it to determine the bit fill order used while writing TIFF files. The normal default is \"msb2lsb\", which matches the native bit order of all modern CPUs. The only exception to this is when Group3 or Group4 FAX compression is requested since FAX machines send data in bit-reversed order and therefore RFC 2301 recommends using reverse order. tiff:group-three-options= value If the tiff:group-three-options key is defined, GraphicsMagick will use it to set the group3 options tag when writing group3-compressed TIFF. Please see the TIFF specification for the usage of this tag. The default value is 4. tiff:ignore-tags= tags If the tiff:ignore-tags key is defined, then it is used as a list of comma-delimited integer TIFF tag values to ignore while reading the TIFF file. This is useful in order to be able to read files which which otherwise fail to read due to problems with TIFF tags. Note that some TIFF tags are required in order to be able to read the image data at all. tiff:report-warnings={false|true} If the tiff:report-warnings key is defined and set to true, then TIFF warnings are reported as a warning exception rather than as a coder log message. Such warnings are reported after the image has been read or written. Most TIFF warnings are benign but sometimes they may help deduce problems with the TIFF file, or help detect that the TIFF file requires a special application to read successfully due to the use of proprietary or specialized extensions. tiff:sample-format={unsigned|ieeefp} If the tiff:sample-format key is defined, GraphicsMagick will use it to determine the sample format used while writing TIFF files. The default is \"unsigned\". Specify \"ieeefp\" in order to write floating-point TIFF files with float (32-bit) or double (64-bit) values. Use the tiff:bits-per-sample define to determine the type of floating-point value to use. tiff:max-sample-value= value If the tiff:max-sample-value key is defined, GraphicsMagick will use the assigned value as the maximum floating point value while reading or writing IEEE floating point TIFFs. Otherwise the maximum value is 1.0 or the value obtained from the file's SMaxSampleValue tag (if present). The floating point data is currently not scanned in advance to determine a best maximum sample value so if the range is not 1.0, or the SMaxSampleValue tag is not present, it may be necessary to (intelligently) use this parameter to properly read a file. tiff:min-sample-value= value If the tiff:min-sample-value key is defined, GraphicsMagick will use the assigned value as the minimum floating point value while reading or writing IEEE floating point TIFFs. Otherwise the minimum value is 0.0 or the value obtained from the file's SMinSampleValue tag (if present). tiff:bits-per-sample= value If the tiff:bits-per-sample key is defined, GraphicsMagick will write images with the specified bits per sample, overriding any existing depth value. Value may be any in the range of 1 to 32, or 64 when the default 'unsigned' format is written, or 16/32/24/64 if IEEEFP format is written. Please note that the baseline TIFF 6.0 specification only requires readers to handle certain powers of two, and the values to be handled depend on the nature of the image (e.g. colormapped, grayscale, RGB, CMYK). tiff:samples-per-pixel= value If the tiff:samples-per-pixel key is defined to a value, the TIFF coder will write TIFF images with the defined samples per pixel, overriding any value stored in the image. This option should not normally be used.\ntiff:rows-per-strip= value \nAllows the user to specify the number of rows per TIFF strip. Rounded up to a multiple of 16 when using JPEG compression. Ignored when using tiles. tiff:strip-per-page=true Requests that the image is written in a single TIFF strip. This is normally the default when group3 or group4 compression is requested within reasonable limits. Requesting a single strip for large images may result in failure due to resource consumption in the writer or reader. tiff:tile Enable writing tiled TIFF (rather than stripped) using the default tile size. Tiled TIFF organizes the image as an array of smaller images (tiles) in order to enable random access. tiff:tile-geometry= width x height Specify the tile size to use while writing tiled TIFF. Width and height should be a multiple of 16. If the value is not a multiple of 16, then it will be rounded down. Enables tiled TIFF if it has not already been enabled. GraphicsMagick does not use tiled storage internally so tiles need to be converted back and forth from the internal scanline-oriented storage to tile-oriented storage. Testing with typical RGB images shows that useful square tile size values range from 128x128 to 1024x1024. Large images which require using a disk-based pixel cache benefit from large tile sizes while images which fit in memory work well with smaller tile sizes. tiff:tile-width= width Specify the tile width to use while writing tiled TIFF. The tile height is then defaulted to an appropriate size. Width should be a multiple of 16. If the value is not a multiple of 16, then it will be rounded down. Enables tiled TIFF if it has not already been enabled. tiff:tile-height= height Specify the tile height to use while writing tiled TIFF. The tile width is then defaulted to an appropriate size. Height should be a multiple of 16. If the value is not a multiple of 16, then it will be rounded down. Enables tiled TIFF if it has not already been enabled. webp:lossless={true|false} Enable lossless encoding. webp:method={0-6} Quality/speed trade-off. webp:image-hint={default,graph,photo,picture} Hint for image type. webp:target-size= integer Target size in bytes. webp:target-psnr= float Minimal distortion to try to achieve. webp:segments={1-4} Maximum number of segments to use. webp:sns-strength={0-100} Spatial Noise Shaping. webp:filter-strength={0-100} Filter strength. webp:filter-sharpness={0-7} Filter sharpness. webp:filter-type={0,1} Filtering type. 0 = simple, 1 = strong (only used if filter-strength ??? info \"0 or autofilter is enabled). webp:auto-filter={true|false} Auto adjust filter's strength. webp:alpha-compression= integer Algorithm for encoding the alpha plane (0 = none, 1 = compressed with WebP lossless). Default is 1. webp:alpha-filtering= integer Predictive filtering method for alpha plane. 0: none, 1: fast, 2: best. Default is 1. webp:alpha-quality={0-100} Between 0 (smallest size) and 100 (lossless). Default is 100. webp:pass=[1..10] Number of entropy-analysis passes. webp:show-compressed={true|false} Export the compressed picture back. In-loop filtering is not applied. webp:preprocessing=[0,1,2] 0=none, 1=segment-smooth, 2=pseudo-random dithering webp:partitions=[0-3] log2(number of token partitions) in [0..3]. Default is 0 for easier progressive decoding. webp:partition-limit={0-100} Quality degradation allowed to fit the 512k limit on prediction modes coding (0: no degradation, 100: maximum possible degradation). webp:emulate-jpeg-size={true|false} If true, compression parameters will be remapped to better match the expected output size from JPEG compression. Generally, the output size will be similar but the degradation will be lower. webp:thread-level= integer If non-zero, try and use multi-threaded encoding. webp:low-memory={true|false} If set, reduce memory usage (but increase CPU use) For example, to create a postscript file that will render only the black pixels of a bilevel image, use:     gm convert bilevel.tif -define ps:imagemask eps3:stencil.ps  -delay  1/100ths of a second display the next image after pausing This option is useful for regulating the animation of image sequences Delay/100 seconds must expire before the display of the next image. The default is no delay between each showing of the image sequence. The maximum delay is 65535. You can specify a delay range (e.g. -delay 10-500) which sets the minimum and maximum delay. -density  width x height horizontal and vertical resolution in pixels of the image This option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats such as Postscript, PDF, WMF, and SVG into a raster image. Image resolution provides the unit of measure to apply when rendering to an output device or raster image. The default unit of measure is in dots per inch (DPI). The -units option may be used to select dots per centimeter instead. The default resolution is 72 dots per inch, which is equivalent to one point per pixel (Macintosh and Postscript standard). Computer screens are normally 72 or 96 dots per inch while printers typically support 150, 300, 600, or 1200 dots per inch. To determine the resolution of your display, use a ruler to measure the width of your screen in inches, and divide by the number of horizontal pixels (1024 on a 1024x768 display). If the file format supports it, this option may be used to update the stored image resolution. Note that Photoshop stores and obtains image resolution from a proprietary embedded profile. If this profile is not stripped from the image, then Photoshop will continue to treat the image using its former resolution, ignoring the image resolution specified in the standard file header. The density option is an attribute and does not alter the underlying raster image. It may be used to adjust the rendered size for desktop publishing purposes by adjusting the scale applied to the pixels. To resize the image so that it is the same size at a different resolution, use the -resample option. -depth  value depth of the image This is the number of bits of color to preserve in the image. Any value between 1 and QuantumDepth (build option) may be specified, although 8 or 16 are the most common values. Use this option to specify the depth of raw images whose depth is unknown such as GRAY, RGB, or CMYK, or to change the depth of any image after it has been read. The depth option is applied to the pixels immediately so it may be used as a form of simple compression by discarding the least significant bits. Reducing the depth in advance may speed up color quantization, and help create smaller file sizes when using a compression algorithm like LZW or ZIP. -descend obtain image by descending window hierarchy -despeckle reduce the speckles within an image -displace  horizontal scale x vertical scale shift image pixels as defined by a displacement map With this option, composite image is used as a displacement map. Black, within the displacement map, is a maximum positive displacement. White is a maximum negative displacement and middle gray is neutral. The displacement is scaled to determine the pixel shift. By default, the displacement applies in both the horizontal and vertical directions. However, if you specify mask, composite image is the horizontal X displacement and mask the vertical Y displacement. -display  host:display[.screen] specifies the X server to contact This option is used with convert for obtaining image or font from this X server. See X(1). -dispose  method GIF disposal method The Disposal Method indicates the way in which the graphic is to be treated after being displayed. Here are the valid methods: Undefined       No disposal specified.\nNone            Do not dispose between frames.\nBackground      Overwrite the image area with\n                the background color.\nPrevious        Overwrite the image area with\n                what was there prior to rendering\n                the image.  -dissolve  percent dissolve an image into another by the given percent The opacity of the composite image is multiplied by the given percent, then it is composited over the main image. -dither apply Floyd/Steinberg error diffusion to the image The basic strategy of dithering is to trade intensity resolution for spatial resolution by averaging the intensities of several neighboring pixels. Images which suffer from severe contouring when reducing colors can be improved with this option. The -colors or -monochrome option is required for this option to take effect. Use +dither to turn off dithering and to render PostScript without text or graphic aliasing. Disabling dithering often (but not always) leads to decreased processing time. -draw  string annotate an image with one or more graphic primitives Use this option to annotate an image with one or more graphic primitives. The primitives include shapes, text, transformations, and pixel operations. The shape primitives are point           x,y\nline            x0,y0 x1,y1\nrectangle       x0,y0 x1,y1\nroundRectangle  x0,y0 x1,y1 wc,hc\narc             x0,y0 x1,y1 a0,a1\nellipse         x0,y0 rx,ry a0,a1\ncircle          x0,y0 x1,y1\npolyline        x0,y0  ...  xn,yn\npolygon         x0,y0  ...  xn,yn\nBezier          x0,y0  ...  xn,yn\npath            path specification\nimage           operator x0,y0 w,h filename  The text primitive is text            x0,y0 string  The text gravity primitive is gravity         NorthWest, North, NorthEast, West, Center,\n                East, SouthWest, South, or SouthEast  The text gravity primitive only affects the placement of text and does not interact with the other primitives. It is equivalent to using the -gravity commandline option, except that it is limited in scope to the -draw option in which it appears. The transformation primitives are rotate          degrees\ntranslate       dx,dy\nscale           sx,sy\nskewX           degrees\nskewY           degrees  The pixel operation primitives are color           x0,y0 method\nmatte           x0,y0 method  The shape primitives are drawn in the color specified in the preceding -stroke option. Except for the line and point primitives, they are filled with the color specified in the preceding -fill option. For unfilled shapes, use -fill none\n. Point requires a single coordinate. Line requires a start and end coordinate. Rectangle expects an upper left and lower right coordinate. RoundRectangle has the upper left and lower right coordinates and the width and height of the corners. Circle has a center coordinate and a coordinate for the outer edge. Use Arc to inscribe an elliptical arc within a rectangle. Arcs require a start and end point as well as the degree of rotation (e.g. 130,30 200,100 45,90). Use Ellipse to draw a partial ellipse centered at the given point with the x-axis and y-axis radius and start and end of arc in degrees (e.g. 100,100 100,150 0,360). Finally, polyline and polygon require three or more coordinates to define its boundaries. Coordinates are integers separated by an optional comma. For example, to define a circle centered at 100,100 that extends to 150,150 use: -draw  circle 100,100 150,150   Paths (See Paths) represent an outline of an object which is defined in terms of moveto (set a new current point), lineto (draw a straight line), curveto (draw a curve using a cubic Bezier), arc (elliptical or circular arc) and closepath (close the current shape by drawing a line to the last moveto) elements. Compound paths (i.e., a path with subpaths, each consisting of a single moveto followed by one or more line or curve operations) are possible to allow effects such as \"donut holes\" in objects. Use image to composite an image with another image. Follow the image keyword with the composite operator, image location, image size, and filename: -draw  image Over 100,100 225,225 image.jpg   You can use 0,0 for the image size, which means to use the actual dimensions found in the image header. Otherwise, it will be scaled to the given dimensions. See -compose for a description of the composite operators. Use text to annotate an image with text. Follow the text coordinates with a string. If the string has embedded spaces, enclose it in single or double quotes. Optionally you can include the image filename, type, width, height, or other image attribute by embedding special format character. See -comment for details. For example, -draw  text 100,100  %m:%f %wx%h   annotates the image with MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480. If the first character of string is @, the text is read from a file titled by the remaining characters in the string. Rotate rotates subsequent shape primitives and text primitives about the origin of the main image. If the -region option precedes the -draw option, the origin for transformations is the upper left corner of the region. Translate translates them. Scale scales them. SkewX and SkewY skew them with respect to the origin of the main image or the region. The transformations modify the current affine matrix, which is initialized from the initial affine matrix defined by the -affine option. Transformations are cumulative within the -draw option. The initial affine matrix is not affected; that matrix is only changed by the appearance of another -affine option. If another -draw option appears, the current affine matrix is reinitialized from the initial affine matrix. Use color to change the color of a pixel to the fill color (see -fill). Follow the pixel coordinate with a method: point\nreplace\nfloodfill\nfilltoborder\nreset  Consider the target pixel as that specified by your coordinate. The point method recolors the target pixel. The replace method recolors any pixel that matches the color of the target pixel. Floodfill recolors any pixel that matches the color of the target pixel and is a neighbor, whereas filltoborder recolors any neighbor pixel that is not the border color. Finally, reset recolors all pixels. Use matte to the change the pixel matte value to transparent. Follow the pixel coordinate with a method (see the color primitive for a description of methods). The point method changes the matte value of the target pixel. The replace method changes the matte value of any pixel that matches the color of the target pixel. Floodfill changes the matte value of any pixel that matches the color of the target pixel and is a neighbor, whereas filltoborder changes the matte value of any neighbor pixel that is not the border color (-bordercolor). Finally reset changes the matte value of all pixels. You can set the primitive color, font, and font bounding box color with -fill, -font, and -box respectively. Options are processed in command line order so be sure to use these options before the -draw option. -edge  radius detect edges within an image -emboss  radius emboss an image -encoding  type specify the text encoding Choose from AdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung. -endian  type specify endianness (MSB, LSB, or Native) of image MSB indicates big-endian (e.g. SPARC, Motorola 68K) while LSB indicates little-endian (e.g. Intel 'x86, VAX) byte ordering. Native indicates to use the normal ordering for the current CPU. This option currently only influences the CMYK, DPX, GRAY, RGB, and TIFF, formats. Use +endian to revert to unspecified endianness. -enhance apply a digital filter to enhance a noisy image -equalize perform histogram equalization to the image -extent  width x height {+-} x {+-} y composite image on background color canvas image This option composites the image on a new background color (-background) canvas image of size  width x height . The existing image content is composited at the position specified by geometry x and y offset and/or desired gravity (-gravity) using the current image compose (-compose) method. Image content which falls outside the bounds of the new image dimensions is discarded. For example, this command creates a thumbnail of an image, and centers it on a red color backdrop image, offsetting the canvas ten pixels to the left and five pixels up, with respect to the thumbnail: gm convert infile.jpg -thumbnail 120x80 -background red -gravity center \\\n        -extent 140x100-10-5 outfile.jpg  This command reduces or expands a JPEG image to fit on an 800x600 display: gm convert -size 800x600 input.jpg \\\n        -resize 800x600 -background black \\\n        -compose Copy -gravity center \\\n        -extent 800x600 \\\n        -quality 92 output.jpg  If the aspect ratio of the input image isn't exactly 4:3, then the image is centered on an 800x600 black canvas. -file  filename write annotated difference image to file If -file is specified, then an annotated difference image is generated and written to the specified file. Pixels which differ between the reference and compare images are modified from those in the compare image so that the changed pixels become more obvious. Some images may require use of an alternative highlight style (see -highlight-style) or highlight color (see -highlight-color) before the changes are obvious. -fill  color color to use when filling a graphic primitive Colors are represented in GraphicsMagick in the same form used by SVG. Use \"gm convert -list color\" to list named colors: name               (named color)\n#RGB               (hex numbers, 4 bits each)\n#RRGGBB            (8 bits each)\n#RRRGGGBBB         (12 bits each)\n#RRRRGGGGBBBB      (16 bits each)\n#RGBA              (4 bits each)\n#RRGGBBAA          (8 bits each)\n#RRRGGGBBBAAA      (12 bits each)\n#RRRRGGGGBBBBAAAA  (16 bits each)\nrgb(r,g,b)         (r,g,b are decimal numbers)\nrgba(r,g,b,a)      (r,g,b,a are decimal numbers)  Enclose the color specification in quotation marks to prevent the \"#\" or the parentheses from being interpreted by your shell. For example, gm convert -fill blue ...\ngm convert -fill  #ddddff  ...\ngm convert -fill  rgb(65000,65000,65535)  ...  The shorter forms are scaled up, if necessary by replication. For example, #3af, #33aaff, and #3333aaaaffff are all equivalent. See -draw for further details. -filter  type use this type of filter when resizing an image Use this option to affect the resizing operation of an image (see -geometry). Choose from these filters (ordered by approximate increasing CPU time): Point\nBox\nTriangle\nHermite\nHanning\nHamming\nBlackman\nGaussian\nQuadratic\nCubic\nCatrom\nMitchell\nLanczos\nBessel\nSinc  The default filter is automatically selected to provide the best quality while consuming a reasonable amount of time. The Mitchell filter is used if the image supports a palette, supports a matte channel, or is being enlarged, otherwise the Lanczos filter is used. -flatten flatten a sequence of images In some file formats (e.g. Photoshop's PSD) complex images may be represented by \"layers\" (independent images) which must be composited in order to obtain the final rendition. The -flatten option accomplishes this composition. The sequence of images is replaced by a single image created by compositing each image in turn, while respecting composition operators and page offsets. While -flatten is immediately useful for eliminating layers, it is also useful as a general-purpose composition tool. The sequence of images is terminated by the appearance of any option. If the -flatten option appears after all of the input images, all images are flattened. Also see -mosaic which is similar to -flatten except that it adds a suitably-sized canvas base image. For example, this composites an image on top of a 640x400 transparent black canvas image: gm convert -size 640x300 xc:transparent \\\n        -compose over -page +0-100 \\\n        frame.png -flatten output.png  and this flattens a Photoshop PSD file: gm convert input.psd -flatten output.png  -flip create a \"mirror image\" reflect the scanlines in the vertical direction. -flop create a \"mirror image\" reflect the scanlines in the horizontal direction. -font  name use this font when annotating the image with text You can tag a font to specify whether it is a PostScript, TrueType, or X11 font. For example, Arial.ttf is a TrueType font, ps:helvetica is PostScript, and x:fixed is X11. -foreground  color define the foreground color The color is specified using the format described under the -fill option. -format  type the image format type When used with the mogrify utility, this option will convert any image to the image format you specify. See GraphicsMagick(1) for a list of image format types supported by GraphicsMagick, or see the output of 'gm -list format'. By default the file is written to its original name. However, if the filename extension matches a supported format, the extension is replaced with the image format type specified with -format. For example, if you specify tiff as the format type and the input image filename is image.gif, the output image filename becomes image.tiff. -format  string output formatted image characteristics When used with the identify utility, or the convert utility with output written to the 'info:-' file specification, use this option to print information about the image in a format of your choosing. You can include the image filename, type, width, height, Exif data, or other image attributes by embedding special format characters: %b     file   size  %c     comment  %d     directory  %e     filename   extension  %f     filename  %g     page   dimensions   and   offsets  %h     height  %i     input   filename  %k     number   of   unique   colors  %l     label  %m     magick  %n     number   of   scenes  %o     output   filename  %p     page   number  %q     image   bit   depth  %r     image   type   description  %s     scene   number  %t     top   of   filename  %u     unique   temporary   filename  %w     width  %x     horizontal   resolution  %y     vertical   resolution  % A     transparency   supported  % C     compression   type  % D     GIF   disposal   method  % G     Original   width   and   height  % H     page   height  % M     original   filename   specification  % O     page   offset   ( x , y )  % P     page   dimensions   ( width , height )  % Q     compression   quality  % T     time   delay   ( in   centi - seconds )  % U     resolution   units  % W     page   width  % X     page   horizontal   offset   ( x )  % Y     page   vertical   offset   ( y )  % @     trim   bounding   box  % #     signature  \\ n     newline  \\ r     carriage   return  %%     %   For example, -format  %m:%f %wx%h   displays MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480. If the first character of string is @, the format is read from a file titled by the remaining characters in the string. The values of image type (%p) which may be returned include: Bilevel\nGrayscale\nGrayscaleMatte\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize  You can also use the following special formatting syntax to print Exif information contained in the file: %[EXIF:` tag `]   Where \" tag \" may be one of the following: *  (print all Exif tags, in keyword=data format)\n!  (print all Exif tags, in tag_number format)\n#hhhh (print data for Exif tag #hhhh)\nImageWidth\nImageLength\nBitsPerSample\nCompression\nPhotometricInterpretation\nFillOrder\nDocumentName\nImageDescription\nMake\nModel\nStripOffsets\nOrientation\nSamplesPerPixel\nRowsPerStrip\nStripByteCounts\nXResolution\nYResolution\nPlanarConfiguration\nResolutionUnit\nTransferFunction\nSoftware\nDateTime\nArtist\nWhitePoint\nPrimaryChromaticities\nTransferRange\nJPEGProc\nJPEGInterchangeFormat\nJPEGInterchangeFormatLength\nYCbCrCoefficients\nYCbCrSubSampling\nYCbCrPositioning\nReferenceBlackWhite\nCFARepeatPatternDim\nCFAPattern\nBatteryLevel\nCopyright\nExposureTime\nFNumber\nIPTC/NAA\nExifOffset\nInterColorProfile\nExposureProgram\nSpectralSensitivity\nGPSInfo\nISOSpeedRatings\nOECF\nExifVersion\nDateTimeOriginal\nDateTimeDigitized\nComponentsConfiguration\nCompressedBitsPerPixel\nShutterSpeedValue\nApertureValue\nBrightnessValue\nExposureBiasValue\nMaxApertureValue\nSubjectDistance\nMeteringMode\nLightSource\nFlash\nFocalLength\nMakerNote\nUserComment\nSubSecTime\nSubSecTimeOriginal\nSubSecTimeDigitized\nFlashPixVersion\nColorSpace\nExifImageWidth\nExifImageLength\nInteroperabilityOffset\nFlashEnergy\nSpatialFrequencyResponse\nFocalPlaneXResolution\nFocalPlaneYResolution\nFocalPlaneResolutionUnit\nSubjectLocation\nExposureIndex\nSensingMethod\nFileSource\nSceneType  JPEG specific information (from reading a JPEG file) may be obtained like this: %[JPEG-` tag `]   Where \" tag \" may be one of the following: *                 (all JPEG-related tags, in\n                    keyword=data format)\nQuality           IJG JPEG  quality  estimate\nColorspace        JPEG colorspace numeric ID\nColorspace-Name   JPEG colorspace name\nSampling-factors  JPEG sampling factors  Please note that JPEG has no notion of \"quality\" and that the quality metric used by, and estimated by the software is based on the quality metric established by IJG JPEG 6b. Other encoders (e.g. that used by Adobe Photoshop) use different encoding metrics. Surround the format specification with quotation marks to prevent your shell from misinterpreting any spaces and square brackets. -frame  width x height + outer bevel width + inner bevel width surround the image with an ornamental border See -geometry for details about the geometry specification. The -frame option is not affected by the -gravity option. The color of the border is specified with the -mattecolor command line option. -frame include the X window frame in the imported image -fuzz  distance {%} colors within this Euclidean distance are considered equal A number of algorithms search for a target color. By default the color must be exact. Use this option to match colors that are close (in Euclidean distance) to the target color in RGB 3D space. For example, if you want to automatically trim the edges of an image with -trim but the image was scanned and the target background color may differ by a small amount. This option can account for these differences. The distance can be in absolute intensity units or, by appending \"%\", as a percentage of the maximum possible intensity (255, 65535, or 4294967295). -gamma  value level of gamma correction The same color image displayed on two different workstations may look different due to differences in the display monitor. Use gamma correction to adjust for this color difference. Reasonable values extend from 0.8 to 2.3. Gamma less than 1.0 darkens the image and gamma greater than 1.0 lightens it. Large adjustments to image gamma may result in the loss of some image information if the pixel quantum size is only eight bits (quantum range 0 to 255). You can apply separate gamma values to the red, green, and blue channels of the image with a gamma value list delimited with slashes (e.g., 1.7/2.3/1.2). Use +gamma value to set the image gamma level without actually adjusting the image pixels. This option is useful if the image is of a known gamma but not set as an image attribute (e.g. PNG images). -gaussian  radius {x sigma } blur the image with a Gaussian operator Use the given radius and standard deviation (sigma). -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. The -geometry option is used for a number of different purposes, depending on the utility it is used with. For the X11 commands ('animate', 'display', and 'import'), it specifies the preferred size and location of the Image window. By default, the window size is the image size and the location is chosen by you (or your window manager) when it is mapped. For the 'import', 'convert', 'mogrify' utility commands it may be used to specify the desired size when resizing an image. In this case, symbols representing resize options may be appended to the geometry string to influence how the resize request is treated. See later notes corresponding to usage by particular commands. The following notes apply to when -geometry is used to express a resize request, taking into account the current properties of the image. By default, the width and height are maximum values. That is, the image is expanded or contracted to fit the width and height value while maintaining the aspect ratio of the image. Append a ^ to the geometry so that the image aspect ratio is maintained when the image is resized, but the resulting width or height are treated as minimum values rather than maximum values. Append a ! (exclamation point) to the geometry to force the image size to exactly the size you specify. For example, if you specify 640x480! the image width is set to 640 pixels and height to 480. If only the width is specified, without the trailing 'x', then height is set to width (e.g., -geometry 100 is the same as -geometry 100x100). If only the width is specified but with the trailing 'x', then width assumes the value and the height is chosen to maintain the aspect ratio of the image. Similarly, if only the height is specified prefixed by 'x' (e.g., -geometry x256), the width is chosen to maintain the aspect ratio. To specify a percentage width or height instead, append %. The image size is multiplied by the width and height percentages to obtain the final image dimensions. To increase the size of an image, use a value greater than 100 (e.g. 125%). To decrease an image's size, use a percentage less than 100. Use @ to specify the maximum area in pixels of an image. Use ??? info \"to change the dimensions of the image only if its width or height exceeds the geometry specification.   resizes the image only if both of its dimensions are less than the geometry specification. For example, if you specify '640x480 ' and the image size is 256x256, the image size does not change. However, if the image is 512x512 or 1024x1024, it is resized to 480x480. Enclose the geometry specification in quotation marks to prevent the `  or ??? info \"from being interpreted by your shell as a file redirection. When used with animate and display, offsets are handled in the same manner as in X(1) and the -gravity option is not used. If the x is negative, the offset is measured leftward from the right edge of the screen to the right edge of the image being displayed. Similarly, negative y is measured between the bottom edges. The offsets are not affected by \"%\"; they are always measured in pixels. When used as a composite option, -geometry gives the dimensions of the image and its location with respect to the composite image. If the -gravity option is present with NorthEast, East, or SouthEast gravity, the x represents the distance from the right edge of the image to the right edge of the composite image. Similarly, if the -gravity option is present with SouthWest, South, or SouthEast gravity, y is measured between the bottom edges. Accordingly, a positive offset will never point in the direction outside of the image. The offsets are not affected by \"%\"; they are always measured in pixels. To specify the dimensions of the composite image, use the -resize option. When used as a convert, import or mogrify option, -geometry is synonymous with -resize and specifies the size of the output image. The offsets, if present, are ignored. When used as a montage option, -geometry specifies the image size and border size for each tile; default is 256x256+0+0. Negative offsets (border dimensions) are meaningless. The -gravity option affects the placement of the image within the tile; the default gravity for this purpose is Center. If the \"%\" sign appears in the geometry specification, the tile size is the specified percentage of the original dimensions of the first tile. To specify the dimensions of the montage, use the -resize option. -gravity  type direction primitive gravitates to when annotating the image. Choices are: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast. The direction you choose specifies where to position the text when annotating the image. For example Center gravity forces the text to be centered within the image. By default, the image gravity is NorthWest. See -draw for more details about graphic primitives. Only the text primitive is affected by the -gravity option. The -gravity option is also used in concert with the -geometry option and other options that take  geometry??? info \"as a parameter, such as the -crop option. See -geometry for details of how the -gravity option interacts with the x??? info \"and ` y??? info \"parameters of a geometry specification. When used as an option to composite, -gravity gives the direction that the image gravitates within the composite. When used as an option to montage, -gravity gives the direction that an image gravitates within a tile. The default gravity is Center for this purpose. -green-primary  x , y green chromaticity primary point -hald-clut  clut apply a Hald CLUT to the image A Hald CLUT (\"Color Look-Up Table\") is a special square color image which contains a look-up table for red, green, and blue. The size of the Hald CLUT image is determined by its order. The width (and height) of a Hald CLUT is the cube of the order. For example, a Hald CLUT of order 8 is 512x512 pixels (262,144 colors) and of order 16 is 4096x4096 (16,777,216 colors). A special CLUT is the identity CLUT which which causes no change to the input image. In order to use the Hald CLUT, one takes an identity CLUT and adjusts its colors in some way. The modified CLUT can then be used to transform any number of images in an identical way. GraphicsMagick contains a built-in identity CLUT generator via the IDENTITY coder. For example reading from the file name IDENTITY:8 returns an identity CLUT of order 8. Typical Hald CLUT identity images have an order of between 8 and 16. The default order for the IDENTITY CLUT generator is 8. Interpolation is used so it is not usually necessary for CLUT images to be very large. The PNG file format is ideal for storing Hald CLUT images because it compresses them very well. -help print usage instructions -highlight-color  color pixel annotation color Specifies the color to use when annotating difference pixels. -highlight-style  style pixel annotation style Specifies the pixel difference annotation style used to draw attention to changed pixels. May be one of Assign, Threshold, Tint, or XOR; where Assign replaces the pixel with the highlight color (see -highlight-color), Threshold replaces the pixel with black or white based on the difference in intensity, Tint alpha tints the pixel with the highlight color, and XOR does an XOR between the pixel and the highlight color. -iconGeometry  geometry specify the icon geometry Offsets, if present in the geometry specification, are handled in the same manner as the -geometry option, using X11 style to handle negative offsets. -iconic iconic animation -immutable make image immutable -implode  factor implode image pixels about the center -intent  type use this type of rendering intent when managing the image color Use this option to affect the the color management operation of an image (see -profile). Choose from these intents: Absolute, Perceptual, Relative, Saturation. The default intent is undefined. -interlace  type the type of interlacing scheme Choices are: None, Line, Plane, or Partition. The default is None. This option is used to specify the type of interlacing scheme for raw image formats such as RGB or YUV. None means do not interlace (RGBRGBRGBRGBRGBRGB...), Line uses scanline interlacing (RRR...GGG...BBB...RRR...GGG...BBB...), and Plane uses plane interlacing (RRRRRR...GGGGGG...BBBBBB...). Partition is like plane except the different planes are saved to individual files (e.g. image.R, image.G, and image.B). Use Line to create an interlaced PNG or GIF or progressive JPEG image. -label  name assign a label to an image Use this option to assign a specific label to the image, when writing to an image format that supports labels, such as TIFF, PNG, MIFF, or PostScript. You can include the the image filename, type, width, height, or other image attribute by embedding special format character. A label is not drawn on the image, but is embedded in the image datastream via a \"Label\" tag or similar mechanism. If you want the label to be visible on the image itself, use the -draw option. See -comment for details. For example, -label  %m:%f %wx%h   produces an image label of MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480. If the first character of string is @, the image label is read from a file titled by the remaining characters in the string. If the -label option appears multiple times, only the last label is stored. In PNG images, the label is stored in a tEXt or zTXt chunk with the keyword \"label\". When converting to PostScript, use this option to specify a header string to print above the image. Specify the label font with -font. When creating a montage, by default the label associated with an image is displayed with the corresponding tile in the montage. Use the +label option to suppress this behavior. -lat  width x height {+-} offset {%} perform local adaptive thresholding Perform local adaptive thresholding using the specified width, height, and offset. The offset is a distance in sample space from the mean, as an absolute integer ranging from 0 to the maximum sample value or as a percentage. If the percent option is supplied, then the offset is computed as a percentage of the quantum range. It is strongly recommended to use the percent option so that results are not sensitive to pixel quantum depth. For example, -colorspace gray -lat  10x10-5%   will help clarify a scanned grayscale or color document, producing a bi-level equivalent. -level  black_point {, gamma }{, white_point }{%} adjust the level of image contrast Give one, two or three values delimited with commas: black-point, gamma, white-point (e.g. 10,1.0,250 or 2%,0.5,98%). The black and white points range from 0 to MaxRGB or from 0 to 100%; if the white point is omitted it is set to MaxRGB-black_point. If a \"%\" sign is present anywhere in the string, the black and white points are percentages of MaxRGB. Gamma is an exponent that ranges from 0.1 to 10.; if it is omitted, the default of 1.0 (no gamma correction) is assumed. This interface works similar to Photoshop's \"Image- Adjustments- Levels...\" \"Input Levels\" interface. -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit By default, resource limits are estimated based on the available resources of the system. The resource limits are Disk, maximum total disk space consumed; File, maximum number of file descriptors allowed to be open at once; Map, maximum total number of file bytes which may be memory mapped; Memory, maximum total number of bytes of heap memory used for image storage; Pixels, maximum absolute image size (per image); Width, maximum image pixels width; Height, maximum image pixels height; and Threads, the maximum number of worker threads to use per OpenMP thread team. These resource limits are used to decide if (for a given image) the decoded image (\"pixel cache\") should be stored in heap memory (RAM), in a memory-mapped disk file, or in a disk file accessed via read/write I/O. The number of total pixels in one image, and/or the width/height, may also be limited in order to force the reading, or creation of images larger than the limit (in pixels) to intentionally fail. The disk limit establishes an overall limit since using the disk is the means of last resort. When the disk limit has been reached, no more images may be read. The value argument is an absolute value, but may have standard binary suffix characters applied ('K', 'M', 'G', 'T', 'P', 'E') to apply a scaling to the value (based on a multiplier of 1024). Any additional characters are ignored. For example, '-limit Pixels 10MP' limits the maximum image size to 10 megapixels and '-limit memory 32MB -limit map 64MB' limits memory and memory mapped files to 32 megabytes and 64 megabytes respectively. Resource limits may also be set using environment variables. The environment variables MAGICK_LIMIT_DISK, MAGICK_LIMIT_FILES, MAGICK_LIMIT_MAP, MAGICK_LIMIT_MEMORY, MAGICK_LIMIT_PIXELS, MAGICK_LIMIT_WIDTH, MAGICK_LIMIT_HEIGHT,and OMP_NUM_THREADS may be used to set the limits for disk space, open files, memory mapped size, heap memory, per-image pixels, image width, image height, and threads respectively. Use the option -list resource list the current limits. -linewidth the line width for subsequent draw operations -list  type the type of list Choices are: Color, Delegate, Format, Magic, Module, Resource, or Type. The Module option is only available if GraphicsMagick was built to support loadable modules. This option lists information about the GraphicsMagick configuration. -log  string Specify format for debug log This option specifies the format for the log printed when the -debug option is active. You can display the following components by embedding special format characters: %d     domain  %e     event  %f     function  %l     line  %m     module  %p     process   ID  %r     real   CPU   time  %t     wall   clock   time  %u     user   CPU   time  %%     percent   sign  \\ n     newline  \\ r     carriage   return   For example: gm convert -debug coders -log  %u %m:%l %e  in.gif out.png  The default behavior is to print all of the components. -loop  iterations add Netscape loop extension to your GIF animation A value other than zero forces the animation to repeat itself up to iterations times. -magnify magnify the image The image size is doubled using linear interpolation. -magnify  factor magnify the image The displayed image is magnified by factor. -map  filename choose a particular set of colors from this image [convert or mogrify] By default, color reduction chooses an optimal set of colors that best represent the original image. Alternatively, you can choose a particular set of colors from an image file with this option. Use +map to reduce all images in the image sequence that follows to a single optimal set of colors that best represent all the images. The sequence of images is terminated by the appearance of any option. If the +map option appears after all of the input images, all images are mapped. -map  type display image using this type. [animate or display] Choose from these Standard Colormap types: best\ndefault\ngray\nred\ngreen\nblue  The X server must support the Standard Colormap you choose, otherwise an error occurs. Use list as the type and display searches the list of colormap types in top-to-bottom order until one is located. See xstdcmap(1) for one way of creating Standard Colormaps. -mask  filename Specify a clipping mask The image read from the file is used as a clipping mask. It must have the same dimensions as the image being masked. If the mask image contains an opacity channel, the opacity of each pixel is used to define the mask. Otherwise, the intensity (gray level) of each pixel is used. Unmasked (black) pixels are modified while masked pixels (not black) are protected from alteration. Use +mask to remove the clipping mask. It is not necessary to use -clip to activate the mask; -clip is implied by -mask. -matte store matte channel if the image has one If the image does not have a matte channel, create an opaque one. Use +matte to ignore the matte channel and to avoid writing a matte channel in the output file. -mattecolor  color specify the color to be used with the -frame option The color is specified using the format described under the -fill option. -maximum-error  limit specifies the maximum amount of total image error Specifies the maximum amount of total image error (based on comparison using a specified metric) before an error (\"image difference exceeds limit\") is reported. The error is reported via a non-zero command execution return status. -median  radius apply a median filter to the image -metric  metric comparison metric (MAE, MSE, PAE, PSNR, RMSE) -minify  factor minify the image The image size is halved using linear interpolation. -mode  value mode of operation The available montage modes are frame to place the images in a rectangular grid while adding a decorative frame with dropshadow, unframe to place undecorated images in a rectangular grid, and concatenate to pack the images closely together without any well-defined grid or decoration. -modulate brightness[,saturation[,hue]] vary the brightness, saturation, and hue of an image Specify the percent change in brightness, color saturation, and hue separated by commas. Default argument values are 100 percent, resulting in no change. For example, to increase the color brightness by 20% and decrease the color saturation by 10% and leave the hue unchanged, use: -modulate 120,90. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees. -monitor show progress indication A simple command-line progress indication is shown while the command is running. The process indication shows the operation currently being performed and the percent completed. Commands using X11 may replace the command line progress indication with a graphical one once an image has been displayed. -monochrome transform the image to black and white -morph  frames morphs an image sequence Both the image pixels and size are linearly interpolated to give the appearance of a meta-morphosis from one image to the next. The sequence of images is terminated by the appearance of any option. If the -morph option appears after all of the input images, all images are morphed. -mosaic create a mosaic from an image or an image sequence The -mosaic option provides a flexible way to composite one or more images onto a solid-color canvas image. It works similar to -flatten except that a base canvas image is automatically created with a suitable size given the image size, page dimensions, and page offsets of images to be composited. The color of the base canvas image may be set via the -background option. The default canvas color is 'white', but 'black' or 'transparent' may be more suitable depending on the composition algorithm requested. The -compose option may be used to specify the composition algorithm to use when compositing the subsequent image on the base canvas. The -page option can be used to establish the dimensions of the mosaic and to position the subsequent image within the mosaic. If the -page argument does not specify width and height, then the canvas dimensions are evaluated based on the image sizes and offsets. The sequence of images is terminated by the appearance of any option. If the -mosaic option appears after all of the input images, all images are included in the mosaic. The following is an example of composing an image based on red, green, and blue layers extracted from a sequence of images and pasted on the canvas image at specified offsets: gm convert -background black \\\n        -compose CopyRed   -page +0-100 red.png \\\n        -compose CopyGreen -page +0+40  green.png \\\n        -compose CopyBlue  -page +0+180 blue.png \\\n        -mosaic output.png  -motion-blur  radius {x sigma }{+angle} Simulate motion blur Simulate motion blur by convolving the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. If radius is zero, then a suitable radius is automatically selected based on sigma. The angle specifies the angle that the object is coming from (side which is blurred). -name name an image -negate replace every pixel with its complementary color The red, green, and blue intensities of an image are negated. White becomes black, yellow becomes blue, etc. Use +negate to only negate the grayscale pixels of the image. -noise  radius|type add or reduce noise in an image The principal function of noise peak elimination filter is to smooth the objects within an image without losing edge information and without creating undesired structures. The central idea of the algorithm is to replace a pixel with its next neighbor in value within a pixel window, if this pixel has been found to be noise. A pixel is defined as noise if and only if this pixel is a maximum or minimum within the pixel window. Use radius to specify the width of the neighborhood. Use +noise followed by a noise type to add noise to an image. The noise added modulates the existing image pixels. Choose from these noise types: Uniform\nGaussian\nMultiplicative\nImpulse\nLaplacian\nPoisson\nRandom (uniform distribution)  -noop NOOP (no option) The -noop option can be used to terminate a group of images and reset all options to their default values, when no other option is desired. -normalize transform image to span the full range of color values This is a contrast enhancement technique based on the image histogram. When computing the contrast enhancement values, the histogram edges are truncated so that the majority of the image pixels are considered in the constrast enhancement, and outliers (e.g. random noise or minute details) are ignored. The default is that 0.1 percent of the histogram entries are ignored. The percentage of the histogram to ignore may be specified by using the -set option with the histogram-threshold parameter similar to -set histogram-threshold 0.01 to specify 0.01 percent. Use 0 percent to use the entire histogram, with possibly diminished contrast enhancement. -opaque  color change this color to the pen color within the image The color is specified using the format described under the -fill option. The color is replaced if it is identical to the target color, or close enough to the target color in a 3D space as defined by the Euclidean distance specified by -fuzz. See -fill and -fuzz for more details. -operator channel operator rvalue[%] apply a mathematical, bitwise, or value operator to an image channel Apply a low-level mathematical, bitwise, or value operator to a selected image channel or all image channels. Operations which result in negative results are reset to zero, and operations which overflow the available range are reset to the maximum possible value. Select a channel from: Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, All, or Gray. All only modifies the color channels and does not modify the Opacity channel. Except for the threshold operators, All operates on each channel independently so that operations are on a per-channel basis. Gray treats the color channels as a grayscale intensity and performs the requested operation on the equivalent pixel intensity so the result is a gray image. Select an operator from Add, And, Assign, Depth, Divide, Gamma, Negate, LShift, Log, Max, Min, Multiply, Or, Pow RShift, Subtract, Threshold, Threshold-White, Threshold-White-Negate, Threshold-Black, Threshold-Black-Negate, Xor, Noise-Gaussian, Noise-Impulse, Noise-Laplacian, Noise-Multiplicative, Noise-Poisson, Noise-Random, and Noise-Uniform. Rvalue may be any floating point or integer value. Normally rvalue will be in the range of 0 to MaxRGB, where MaxRGB is the largest quantum value supported by the GraphicsMagick build (255, 65535, or 4294967295) but values outside this range are useful for some arithmetic operations. Arguments to logical or bit-wise operations are rounded to a positive integral value prior to use. If a percent (%) symbol is appended to the argument, then the argument has a range of 0 to 100 percent. The following is a description of the operators: Add\nResult is rvalue added to channel value.\nAnd\nResult is the logical AND of rvalue with channel value.\nAssign\nResult is rvalue.\nDepth\nResult is channel value adjusted so that it may be (approximately) stored in the specified number of bits without additional loss.\nDivide\nResult is channel value divided by rvalue.\nGamma\nResult is channel value gamma adjusted by rvalue.\nLShift\nResult is channel value bitwise left shifted by rvalue bits.\nLog\nResult is computed as log(value*rvalue+1)/log(rvalue+1).\nMax\nResult is assigned to rvalue if rvalue is greater than value.\nMin\nResult is assigned to rvalue if rvalue is less than value.\nMultiply\nResult is channel value multiplied by rvalue.\nNegate\nResult is inverse of channel value (like a film negative). An rvalue must be supplied but is currently not used. Inverting the image twice results in the original image.\nOr\nResult is the logical OR of rvalue with channel value.\nPow\nResult is computed as pow(value,rvalue). Similar to Gamma except that rvalue is not inverted.\nRShift\nResult is channel value bitwise right shifted by rvalue bits.\nSubtract\nResult is channel value minus rvalue.\nThreshold\nResult is maximum (white) if channel value is greater than rvalue, or minimum (black) if it is less than or equal to rvalue. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-white\nResult is maximum (white) if channel value is greater than rvalue and is unchanged if it is less than or equal to rvalue. This can be used to remove apparent noise from the bright parts of an image. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-White-Negate\nResult is set to black if channel value is greater than rvalue and is unchanged if it is less than or equal to rvalue. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-black\nResult is minimum (black) if channel value is less than than rvalue and is unchanged if it is greater than or equal to rvalue. This can be used to remove apparent noise from the dark parts of an image. If all channels are specified, then thresholding is done based on computed pixel intensity.\nThreshold-Black-Negate\nResult is set to white if channel value is less than than rvalue and is unchanged if it is greater than or equal to rvalue. If all channels are specified, then thresholding is done based on computed pixel intensity.\nXor\nResult is the logical XOR of rvalue with channel value. An interesting property of XOR is that performing the same operation twice results in the original value.\nNoise-Gaussian\nResult is the current channel value modulated with gaussian noise according to the intensity specified by rvalue.\nNoise-Impulse\nResult is the current channel value modulated with impulse noise according to the intensity specified by rvalue.\nNoise-Laplacian\nResult is the current channel value modulated with laplacian noise according to the intensity specified by rvalue.\nNoise-Multiplicative\nResult is the current channel value modulated with multiplicative gaussian noise according to the intensity specified by rvalue.\nNoise-Poisson\nResult is the current channel value modulated with poisson noise according to the intensity specified by rvalue.\nNoise-Random\nResult is the current channel value modulated with random (uniform distribution) noise according to the intensity specified by rvalue. The initial noise intensity (rvalue=1.0) is the range of one pixel quantum span.\nNoise-Uniform\nResult is the channel value with uniform noise applied according to the intensity specified by rvalue. As an example, the Assign operator assigns a fixed value to a channel. For example, this command sets the red channel to the mid-range value: gm convert in.bmp -operator red assign  50%  out.bmp  The following applies 50% thresholding to the image and returns a gray image: gm convert in.bmp -operator gray threshold  50%  out.bmp  -ordered-dither  channeltype??? info \" ` ordered dither the image The channel or channels specified in the channeltype argument are reduced to binary, using an ordered dither method. The choices for channeltype are All, Intensity, Red, Green, Blue, Cyan, Magenta, Yellow, Black, and Opacity When channeltype is \"All\", the color samples are dithered into a gray level and then that gray level is stored in the three color channels. Separately, the opacity channel is dithered into a bilevel opacity value which is stored in the opacity channel. When channeltype is \"Intensity\", only the color samples are dithered. When channeltype is \"opacity\" or \"matte\", only the opacity channel is dithered. When a color channel is specified, only that channel is dithered. The choices for N are 2 through 7. The image is divided into NxN pixel tiles. In each tile, some or all pixels are turned to white depending on their intensity. For each N, (N**2)+1 levels of gray can be represented. For N == 2, 3, or 4, the pixels are turned to white in an order that maximizes dispersion (i.e., reduces granularity), while for N == 5, 6, and 7, they are turned to white in an order that creates a roughly circular black blob in the middle of each tile. An attractive \"half-tone\" looking image can be obtained by first rotating the image 45 degrees, performing a 5x5 ordered-dither operation, then rotating it back to the original orientation and cropping to the original image dimensions. If the original image is gamma-encoded, it is adviseable to convert it to linear intensity first, e.g., with the \"-gamma 0.45455\" option. -output-directory  directory output files to directory Use -output-directory to specify a directory under which to write the output files. Normally mogrify overwrites the input files, but with this option the output files may be written to a different directory tree so that the input files are preserved. The algorithm used preserves all of the input path specification in the output path so that the user-specified input path (including any sub-directory part) is appended to the output path. If the input file lacks an extension, then a suitable extension is automatically added to the output file. The user is responsible for creating the output directory specified as an argument, but subdirectories will be created as needed if the -create-directories option is supplied. This option may be used to apply transformations on files from one directory and write the transformed files to a different directory. In conjunction with -create-directories, this option is designed to support transforming whole directory trees of files provided that the relative path of the input file is included as part the list of filenames. -orient  orientation Set the image orientation attribute Sets the image orientation attribute. The image orientation attribute is compatible with the TIFF orientation tag (and the EXIF orientation tag). Accepted values are undefined, TopLeft, TopRight, BottomRight, BottomLeft, LeftTop, RightTop, RightBottom, LeftBottom, and hyphenated versions thereof (e.g. left-bottom). Please note that GraphicsMagick does not include an EXIF editor so if an EXIF profile is written to the output image, the value in the EXIF profile might not match the image. It is possible for an image file to indicate its orientation in several different ways simultaneously. -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas Use this option to specify the dimensions of the PostScript page in dots per inch or a TEXT page in pixels. The choices for a PostScript page are: 11x17         792  1224\nLedger       1224   792\nLegal         612  1008\nLetter        612   792\nLetterSmall   612   792\nArchE        2592  3456\nArchD        1728  2592\nArchC        1296  1728\nArchB         864  1296\nArchA         648   864\nA0           2380  3368\nA1           1684  2380\nA2           1190  1684\nA3            842  1190\nA4            595   842\nA4Small       595   842\nA5            421   595\nA6            297   421\nA7            210   297\nA8            148   210\nA9            105   148\nA10            74   105\nB0           2836  4008\nB1           2004  2836\nB2           1418  2004\nB3           1002  1418\nB4            709  1002\nB5            501   709\nC0           2600  3677\nC1           1837  2600\nC2           1298  1837\nC3            918  1298\nC4            649   918\nC5            459   649\nC6            323   459\nFlsa          612   936\nFlse          612   936\nHalfLetter    396   612  For convenience you can specify the page size by media (e.g. A4, Ledger, etc.). Otherwise, -page behaves much like -geometry (e.g. -page letter+43+43 `). This option is also used to place subimages when writing to a multi-image format that supports offsets, such as GIF89 and MNG. When used for this purpose the offsets are always measured from the top left corner of the canvas and are not affected by the -gravity option. To position a GIF or MNG image, use -page{+-} x {+-}` y??? info \"(e.g. -page +100+200). When writing to a MNG file, a -page option appearing ahead of the first image in the sequence with nonzero width and height defines the width and height values that are written in the MHDR chunk. Otherwise, the MNG width and height are computed from the bounding box that contains all images in the sequence. When writing a GIF89 file, only the bounding box method is used to determine its dimensions. For a PostScript page, the image is sized as in -geometry and positioned relative to the lower left hand corner of the page by {+-} xoffset {+-} y offset . Use -page 612x792 `, for example, to center the image within the page. If the image size exceeds the PostScript page, it is reduced to fit the page. The default gravity for the -page option is NorthWest, i.e., positive x and y offset are measured rightward and downward from the top left corner of the page, unless the -gravity option is present with a value other than NorthWest. The default page dimensions for a TEXT image is 612x792. This option is used in concert with -density. Use +page to remove the page settings for an image. -paint  radius simulate an oil painting Each pixel is replaced by the most frequent color in a circular neighborhood whose width is specified with radius. -pause  seconds pause between animation loops [animate] Pause for the specified number of seconds before repeating the animation. -pause  seconds pause between snapshots [import] Pause for the specified number of seconds before taking the next snapshot. -pen  color (This option has been replaced by the -fill option) -ping efficiently determine image characteristics Use this option to disable reading the image pixels so that image characteristics such as the image dimensions may be obtained very quickly. For identify, use +ping to force reading the image pixels so that the pixel read rate may be included in the displayed information. -pointsize  value pointsize of the PostScript, X11, or TrueType font -preview  type image preview type Use this option to affect the preview operation of an image (e.g. convert file.png -preview Gamma Preview:gamma.png). Choose from these previews: Rotate\nShear\nRoll\nHue\nSaturation\nBrightness\nGamma\nSpiff\nDull\nGrayscale\nQuantize\nDespeckle\nReduceNoise\nAddNoise\nSharpen\nBlur\nThreshold\nEdgeDetect\nSpread\nShade\nRaise\nSegment\nSolarize\nSwirl\nImplode\nWave\nOilPaint\nCharcoalDrawing\nJPEG  The default preview is JPEG. -process  command process a sequence of images using a process module The command argument has the form module=arg1,arg2,arg3,...,argN where module is the name of the module to invoke (e.g. \"analyze\") and arg1,arg2,arg3,...,argN are an arbitrary number of arguments to pass to the process module. The sequence of images is terminated by the appearance of any option. If the -process option appears after all of the input images, all images are processed. -profile  filename add ICM, IPTC, or generic profile to image -profile filename adds an ICM (ICC color management), IPTC (newswire information), or a generic (including Exif) profile to the image\n. Use +profile icm, +profile iptc, or +profile profile_name to remove the respective profile. Multiple profiles may be listed, separated by commas. Profiles may be excluded from subsequent listed matches by preceding their name with an exclamation point. For example, +profile '!icm, ' strips all profiles except for the ICM profile. Use identify -verbose to find out what profiles are in the image file. Use +profile \" \" to remove all profiles. Writing the image to a format that does not support profiles will of course also cause all profiles to be removed. The JPEG and PNG formats will store any profiles that have been read and not removed. In JPEG they are stored in APP1 markers, and in PNG they are stored as hex-coded binary in compressed zTXt chunks, except for the iCC chunk which is stored in the iCCP chunk. To extract a profile, the -profile option is not used. Instead, simply write the file to an image format such as APP1, 8BIM, ICM, or IPTC. For example, to extract the Exif data (which is stored in JPEG files in the APP1 profile), use gm convert cockatoo.jpg exifdata.app1  Note that GraphicsMagick does not attempt to update any profile to reflect changes made to the image, e.g., rotation from portrait to landscape orientation, so it is possible that the preserved profile may contain invalid data. -preserve-timestamp preserve the original timestamps of the file Use this option to preserve the original modification and access timestamps of the file, even if it has been modified. +progress disable progress monitor and busy cursor By default, when an image is displayed, a progress monitor bar is shown in the top left corner of an existing image display window, and the current cursor is replaced with an hourglass cursor. Use +progress to disable the progress monitor and busy cursor during display operations. While the progress monitor is disabled for all operations, the busy cursor continues to be enabled for non-display operations such as image processing. This option is useful for non-interactive display operations, or when a \"clean\" look is desired. -quality  value JPEG/MIFF/PNG/TIFF compression level For the JPEG and MPEG image formats, quality is 0 (lowest image quality and highest compression) to 100 (best quality but least effective compression). The default quality is 75. Use the -sampling-factor option to specify the factors for chroma downsampling. To use the same quality value as that found by the JPEG decoder, use the -define jpeg:preserve-settings flag. For the MIFF image format, and the TIFF format while using ZIP compression, quality/10 is the zlib compression level, which is 0 (worst but fastest compression) to 9 (best but slowest). It has no effect on the image appearance, since the compression is always lossless. For the JPEG-2000 image format, quality is mapped using a non-linear equation to the compression ratio required by the Jasper library. This non-linear equation is intended to loosely approximate the quality provided by the JPEG v1 format. The default quality value 75 results in a request for 16:1 compression. The quality value 100 results in a request for non-lossy compression. For the MNG and PNG image formats, the quality value sets the zlib compression level (quality / 10) and filter-type (quality % 10). Compression levels range from 0 (fastest compression) to 100 (best but slowest). For compression level 0, the Huffman-only strategy is used, which is fastest but not necessarily the worst compression. If filter-type is 4 or less, the specified filter-type is used for all scanlines: 0 :   none  1 :   sub  2 :   up  3 :   average  4 :   Paeth   If filter-type is 5, adaptive filtering is used when quality is greater than 50 and the image does not have a color map, otherwise no filtering is used. If filter-type is 6, adaptive filtering with minimum-sum-of-absolute-values is used. Only if the output is MNG, if filter-type is 7, the LOCO color transformation and adaptive filtering with minimum-sum-of-absolute-values are used. The default is quality is 75, which means nearly the best compression with adaptive filtering. The quality setting has no effect on the appearance of PNG and MNG images, since the compression is always lossless. For further information, see the PNG specification. When writing a JNG image with transparency, two quality values are required, one for the main image and one for the grayscale image that conveys the opacity channel. These are written as a single integer equal to the main image quality plus 1000 times the opacity quality. For example, if you want to use quality 75 for the main image and quality 90 to compress the opacity data, use -quality 90075. For the PNM family of formats (PNM, PGM, and PPM) specify a quality factor of zero in order to obtain the ASCII variant of the format. Note that -compress none used to be used to trigger ASCII output but provided the opposite result of what was expected as compared with other formats. -raise  width x height lighten or darken image edges This will create a 3-D effect. See -geometry for details details about the geometry specification. Offsets are not used. Use -raise to create a raised effect, otherwise use +raise. -random-threshold  channeltype??? info \" ` random threshold the image The channel or channels specified in the ` channeltype??? info \"argument are reduced to binary, using an random-threshold method. The choices for channeltype are All, Intensity, Red, Green, Blue, Cyan, Magenta, Yellow, Black, and Opacity When channeltype is \"All\", the color samples are thresholded into a graylevel and then that gray level is stored in the three color channels. Separately, the opacity channel is thresholded into a bilevel opacity value which is stored in the opacity channel. For each pixel, a new random number is used to establish the threshold to be used. The threshold never exceeds the specified maximum (HIGH) and is never less than the specified minimum (LOW). When channeltype is \"intensity\", only the color samples are thresholded. When channeltype is \"opacity\" or \"matte\", only the opacity channel is thresholded. The other named channels only threshold the associated channel. -recolor  matrix apply a color translation matrix to image channels A user supplied color translation matrix (expressed as a text string) is used to translate/blend the image channels based on weightings in a supplied matrix which may be of order 3 (color channels only), 4 (color channels plus opacity), or 5 (color channels plus opacity and offset). Values in the columns of the matrix (red, green, blue, opacity) are used as multipliers with the existing channel values and added together according to the rows of the matrix. Matrix values are floating point and may be negative. The offset column (column 5) is purely additive and is scaled such that 0.0 to 1.0 represents the maximum quantum range (but values are not limited to this range). The math for the color translation matrix is similar to that used by Adobe Flash except that the offset is scaled to 1.0 (divide Flash offset by 255 for use with GraphicsMagick) so that the results are independent of quantum depth. An identity matrix exists for each matrix order which results in no change to the image. The translation matrix should be based on an alteration of the identity matrix. Identity matrix of order 3 1 0 0\n0 1 0\n0 0 1 which may be formatted into a convenient matrix argument similar to (comma is treated as white space): -recolor \"1 0 0, 0 1 0, 0 0 1\" Identity matrix of order 4 1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1 Identity matrix of order 5. The last row is required to exist for the purpose of parsing, but is otherwise not used. 1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1 As an example, an image wrongly in BGR channel order may be converted to RGB using this matrix (blue- red, red- blue): 0 0 1\n0 1 0\n1 0 0 and an RGB image using standard Rec.709 primaries may be converted to grayscale using this matrix of standard weighting factors: 0.2126 0.7152 0.0722\n0.2126 0.7152 0.0722\n0.2126 0.7152 0.0722 and contrast may be reduced by scaling down by 80% and adding a 10% offset: 0.8 0.0 0.0 0.0 0.1\n0.0 0.8 0.0 0.0 0.1\n0.0 0.0 0.8 0.0 0.1\n0.0 0.0 0.0 0.8 0.1\n0.0 0.0 0.0 0.0 1.0 -red-primary  x , y red chromaticity primary point -region  width x height {+-} x {+-} y apply options to a portion of the image The x and y offsets are treated in the same manner as in -crop\n. -remote perform a X11 remote operation The -remote command sends a command to a \"gm display\" or \"gm animate\" which is already running. The only command recognized at this time is the name of an image file to load. This capability is very useful to load new images without needing to restart GraphicsMagick (e.g. for a slide-show or to use GraphicsMagick as the display engine for a different GUI). Also see the +progress option for a way to disable progress indication for a clean look while loading new images. -render render vector operations Use +render to turn off rendering vector operations. This is useful when saving the result to vector formats such as MVG or SVG. -repage  width x height +xoff+yoff[!] Adjust image page offsets Adjust the current image page canvas and position based on a relative page specification. This option may be used to change the location of a subframe (e.g. part of an animation) prior to composition. If the geometry specification is absolute (includes a '!'), then the offset adjustment is absolute and there is no adjustment to page width and height, otherwise the page width and height values are also adjusted based on the current image dimensions. Use +repage to set the image page offsets to default. -resample  horizontal x vertical Resample image to specified horizontal and vertical resolution Resize the image so that its rendered size remains the same as the original at the specified target resolution. Either the current image resolution units or the previously set with -units are used to interpret the argument. For example, if a 300 DPI image renders at 3 inches by 2 inches on a 300 DPI device, when the image has been resampled to 72 DPI, it will render at 3 inches by 2 inches on a 72 DPI device. Note that only a small number of image formats (e.g. JPEG, PNG, and TIFF) are capable of storing the image resolution. For formats which do not support an image resolution, the original resolution of the image must be specified via -density on the command line prior to specifying the resample resolution. Note that Photoshop stores and obtains image resolution from a proprietary embedded profile. If this profile exists in the image, then Photoshop will continue to treat the image using its former resolution, ignoring the image resolution specified in the standard file header. Some image formats (e.g. PNG) require use of metric or english units so even if the original image used a particular unit system, if it is saved to a different format prior to resampling, then it may be necessary to specify the desired resolution units using -units since the original units may have been lost. In other words, do not assume that the resolution units are restored if the image has been saved to a file. -resize  width x height {%}{@}{!}{ }{ } resize an image This is an alias for the -geometry option and it behaves in the same manner. If the -filter option precedes the -resize option, the specified filter is used. There are some exceptions: When used as a composite option, -resize conveys the preferred size of the output image, while -geometry conveys the size and placement of the composite image within the main image. When used as a montage option, -resize conveys the preferred size of the montage, while -geometry conveys information about the tiles. -roll {+-} x {+-} y roll an image vertically or horizontally See -geometry for details the geometry specification. The x and y offsets are not affected by the -gravity option. A negative x offset rolls the image left-to-right. A negative y offset rolls the image top-to-bottom. -rotate  degrees { }{ } rotate the image Positive angles rotate the image in a clockwise direction while negative angles rotate counter-clockwise. Use ??? info \"to rotate the image only if its width exceeds the height.   rotates the image only if its width is less than the height. For example, if you specify -rotate \"-90 \" and the image size is 480x640, the image is not rotated. However, if the image is 640x480, it is rotated by -90 degrees. If you use ??? info \"or ` , enclose it in quotation marks to prevent it from being misinterpreted as a file redirection. Empty triangles left over from rotating the image are filled with the color defined as background (class backgroundColor). The color is specified using the format described under the -fill option. -sample  geometry scale image using pixel sampling See -geometry for details about the geometry specification. -sample ignores the -filter selection if the -filter option is present. Offsets, if present in the geometry string, are ignored, and the -gravity option has no effect. -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors This option specifies the sampling factors to be used by the DPX, JPEG, MPEG, or YUV encoders for chroma downsampling. The sampling factor must be specified while reading the raw YUV format since it is not preserved in the file header. Industry-standard video subsampling notation such as \"4:2:2\" may also be used to specify the sampling factors. \"4:2:2\" is equivalent to a specification of \"2x1\" The JPEG decoder obtains the original sampling factors (and quality settings) when a JPEG file is read. To re-use the original sampling factors (and quality setting) when JPEG is output, use the -define jpeg:preserve-settings flag. -scale  geometry scale the image. See -geometry for details about the geometry specification. -scale uses a simpler, faster algorithm, and it ignores the -filter selection if the -filter option is present. Offsets, if present in the geometry string, are ignored, and the -gravity option has no effect. -scene  value set scene number This option sets the scene number of an image or the first image in an image sequence. -scenes  value-value range of image scene numbers to read Each image in the range is read with the filename followed by a period (.) and the decimal scene number. You can change this behavior by embedding a %d, %0Nd, %o, %0No, %x, or %0Nx printf format specification in the file name. For example, gm montage -scenes 5-7 image.miff montage.miff  makes a montage of files image.miff.5, image.miff.6, and image.miff.7, and gm animate -scenes 0-12 image%02d.miff  animates files image00.miff, image01.miff, through image12.miff. -screen specify the screen to capture This option indicates that the GetImage request used to obtain the image should be done on the root window, rather than directly on the specified window. In this way, you can obtain pieces of other windows that overlap the specified window, and more importantly, you can capture menus or other popups that are independent windows but appear over the specified window. -set  attribute??? info \" ` set an image attribute Set a named image attribute. The attribute is set on the current (previously specified on command line) image. +set  attribute unset an image attribute Unset a named image attribute. The attribute is removed from the current (previously specified on command line) image. -segment  cluster threshold x smoothing threshold segment an image Segment an image by analyzing the histograms of the color components and identifying units that are homogeneous with the fuzzy c-means technique. Segmentation is a very useful fast and and approximate color quantization algorithm for scanned printed pages or scanned cartoons. It may also be used as a special effect. Specify cluster threshold as the minimum percentage of total pixels in a cluster before it is considered valid. For huge images containing small detail, this may need to be a tiny fraction of a percent (e.g. 0.015) so that important detail is not lost. Smoothing threshold eliminates noise in the second derivative of the histogram. As the value is increased, you can expect a smoother second derivative. The default is 1.5. Add the -verbose option to see a dump of cluster statistics given the parameters used. The statistics may be used as a guide to help fine tune the options. -shade  azimuth x elevation shade the image using a distant light source Specify azimuth and elevation as the position of the light source. Use +shade to return the shading results as a grayscale image. -shadow  radius {x sigma } shadow the montage -shared-memory use shared memory This option specifies whether the utility should attempt to use shared memory for pixmaps. GraphicsMagick must be compiled with shared memory support, and the display must support the MIT-SHM extension. Otherwise, this option is ignored. The default is True. -sharpen  radius {x sigma } sharpen the image Use a Gaussian operator of the given radius and standard deviation (sigma). -shave  width x height {%} shave pixels from the image edges Specify the width of the region to be removed from both sides of the image and the height of the regions to be removed from top and bottom. -shear  x degrees x y degrees shear the image along the X or Y axis Use the specified positive or negative shear angle. Shearing slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x degrees is measured relative to the Y axis, and similarly, for Y direction shears y degrees is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the color defined as background (class backgroundColor). The color is specified using the format described under the -fill option. -silent operate silently -size  width x height {+offset} width and height of the image Use this option to specify the width and height of raw images whose dimensions are unknown such as GRAY, RGB, or CMYK. In addition to width and height, use -size with an offset to skip any header information in the image or tell the number of colors in a MAP image file, (e.g. -size 640x512+256). For Photo CD images, choose from these sizes: 192x128\n384x256\n768x512\n1536x1024\n3072x2048  Finally, use this option to choose a particular resolution layer of a JBIG or JPEG image (e.g. -size 1024x768). -snaps  value number of screen snapshots Use this option to grab more than one image from the X server screen, to create an animation sequence. -solarize  factor negate all pixels above the threshold level Specify factor as the percent threshold of the intensity (0 - 99.9%). This option produces a solarization effect seen when exposing a photographic film to light during the development process. -spread  amount displace image pixels by a random amount Amount defines the size of the neighborhood around each pixel to choose a candidate pixel to swap. -stegano  offset hide watermark within an image Use an offset to start the image hiding some number of pixels from the beginning of the image. Note this offset and the image size. You will need this information to recover the steganographic image (e.g. display -size 320x256+35 stegano:image.png). -stereo composite two images to create a stereo anaglyph The left side of the stereo pair is saved as the red channel of the output image. The right side is saved as the green channel. Red-green stereo glasses are required to properly view the stereo image. -strip remove all profiles and text attributes from the image All embedded profiles and text attributes are stripped from the image. This is useful for images used for the web, or when output files need to be as small as possible Be careful not to use this option to remove author, copyright, and license information that you are required to retain when redistributing an image. -stroke  color color to use when stroking a graphic primitive The color is specified using the format described under the -fill option. See -draw for further details. -strokewidth  value set the stroke width See -draw for further details. -swirl  degrees swirl image pixels about the center Degrees defines the tightness of the swirl. -text-font  name font for writing fixed-width text Specifies the name of the preferred font to use in fixed (typewriter style) formatted text. The default is 14 point Courier. You can tag a font to specify whether it is a PostScript, TrueType, or X11 font. For example, Courier.ttf is a TrueType font and x:fixed is X11. -texture  filename name of texture to tile onto the image background -threshold  value {%} threshold the image Modify the image such that any pixel sample with an intensity value greater than the threshold is assigned the maximum intensity (white), or otherwise is assigned the minimum intensity (black). If a percent prefix is applied, then the threshold is a percentage of the available range. To efficiently create a black and white image from a color image, use gm convert -threshold 50% in.png out.png  The optimum threshold value depends on the nature of the image. In order to threshold individual channels, use the -operator subcommand with it's Threshold, Threshold-White, or Threshold-Black options. -thumbnail  width x height {%}{@}{!}{ }{ } resize an image (quickly) The -thumbnail command resizes the image as quickly as possible, with more concern for speed than resulting image quality. Regardless, resulting image quality should be acceptable for many uses. It is primarily intended to be used to generate smaller versions of the image, but may also be used to enlarge the image. The -thumbnail geometry argument observes the same syntax and rules as it does for -resize. -tile  filename tile image when filling a graphic primitive -tile  geometry layout of images [montage] -title  string assign title to displayed image [animate, display, montage] Use this option to assign a specific title to the image. This is assigned to the image window and is typically displayed in the window title bar. Optionally you can include the image filename, type, width, height, Exif data, or other image attribute by embedding special format characters described under the -format option. For example, -title  %m:%f %wx%h   produces an image title of MIFF:bird.miff 512x480 for an image titled bird.miff and whose width is 512 and height is 480. -transform transform the image This option applies the transformation matrix from a previous -affine option. gm convert -affine 2,2,-2,2,0,0 -transform bird.ppm bird.jpg  -transparent  color make this color transparent within the image The color is specified using the format described under the -fill option. -treedepth  value tree depth for the color reduction algorithm Normally, this integer value is zero or one. A value of zero or one causes the use of an optimal tree depth for the color reduction algorithm An optimal depth generally allows the best representation of the source image with the fastest computational speed and the least amount of memory. However, the default depth is inappropriate for some images. To assure the best representation, try values between 2 and 8 for this parameter. Refer to quantize for more details. The -colors or -monochrome option, or writing to an image format which requires color reduction, is required for this option to take effect. -trim trim an image This option removes any edges that are exactly the same color as the corner pixels. Use -fuzz to make -trim remove edges that are nearly the same color as the corner pixels. -type  type the image type Choose from: Bilevel, Grayscale, Palette, PaletteMatte, TrueColor, TrueColorMatte, ColorSeparation, ColorSeparationMatte, or Optimize. Normally, when a format supports different subformats such as bilevel, grayscale, palette, truecolor, and truecolor+alpha, the encoder will try to choose a suitable subformat based on the nature of the image. The -type option may be used to tailor the output subformat. By default the output subformat is based on readily available image information and is usually similar to the input format. Specify -type Optimize in order to enable inspecting all pixels (if necessary) in order to find the most efficient subformat. Inspecting all of the pixels may be slow for very large images, particularly if they are stored in a disk cache. If an RGB image contains only gray pixels, then every pixel in the image must be inspected in order to decide that the image is actually grayscale! Sometimes a specific subformat is desired. For example, to force a JPEG image to be written in TrueColor RGB format even though only gray pixels are present, use gm convert bird.pgm -type TrueColor bird.jpg  Similarly, using -type TrueColorMatte will force the encoder to write an alpha channel even though the image is opaque, if the output format supports transparency. Some pseudo-formats (e.g. the XC format) will respect the requested type if it occurs previously on the command line. For example, to obtain a DirectClass solid color canvas image rather than PsuedoClass, use gm convert -size 640x480 -type TrueColor xc:red red.miff  Likewise, specify -type Bilevel, Grayscale, TrueColor, or TrueColorMatte prior to reading a Postscript (or PDF file) in order to influence the type of image that Ghostcript returns. Reading performance will be dramatically improved for black/white Postscript if Bilevel is specified, and will be considerably faster if Grayscale is specified. -update  seconds detect when image file is modified and redisplay. Suppose that while you are displaying an image the file that is currently displayed is over-written. display will automatically detect that the input file has been changed and update the displayed image accordingly. -units  type the units of image resolution Choose from: Undefined, PixelsPerInch, or PixelsPerCentimeter. This option is normally used in conjunction with the -density option. -unsharp  radius {x sigma }{+ amount }{+ threshold } sharpen the image with an unsharp mask operator The -unsharp option sharpens an image. The image is convolved with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 to have the method select a suitable radius. The parameters are: radius\nThe radius of the Gaussian, in pixels, not counting the center pixel (default 0).\nsigma\nThe standard deviation of the Gaussian, in pixels (default 1.0).\namount\nThe percentage of the difference between the original and the blur image that is added back into the original (default 1.0).\nthreshold\nThe threshold, as a fraction of MaxRGB, needed to apply the difference amount (default 0.05). -use-pixmap use the pixmap -verbose print detailed information about the image This information is printed: image scene number; image name; image size; the image class (DirectClass or PseudoClass); the total number of unique colors; and the number of seconds to read and transform the image. If the image is DirectClass, the total number of unique colors is not displayed unless -verbose is specified twice since it may take quite a long time to compute, particularly for deep images. If the image is PseudoClass then its pixels are defined by indexes into a colormap. If the image is DirectClass then each pixel includes a complete and independent color specification. If -colors is also specified, the total unique colors in the image and color reduction error values are printed. Refer to quantize for a description of these values. -version print GraphicsMagick version string -view  string FlashPix viewing parameters -virtual-pixel  method specify contents of \"virtual pixels\" This option defines \"virtual pixels\" for use in operations that can access pixels outside the boundaries of an image. Choose from these methods: Constant\nUse the image background color.\nEdge\nExtend the edge pixel toward infinity (default).\nMirror\nMirror the image.\nTile\nTile the image. This option affects operations that use virtual pixels such as -blur, -sharpen, -wave, etc. -visual  type animate images using this X visual type Choose from these visual classes: StaticGray\nGrayScale\nStaticColor\nPseudoColor\nTrueColor\nDirectColor\ndefault\nvisual id  The X server must support the visual you choose, otherwise an error occurs. If a visual is not specified, the visual class that can display the most simultaneous colors on the default screen is chosen. -watermark  brightness x saturation percent brightness and saturation of a watermark -wave  amplitude x wavelength alter an image along a sine wave Specify amplitude and wavelength of the wave. -white-point  x , y chromaticity white point -white-threshold red[,green][,blue][,opacity] pixels above the threshold become white Use -white-threshold to set pixels with values above the specified threshold to maximum value (white). If only one value is supplied, or the red, green, and blue values are identical, then intensity thresholding is used. If the color threshold values are not identical then channel-based thresholding is used, and color distortion will occur. Specify a negative value (e.g. -1) if you want a channel to be ignored but you do want to threshold a channel later in the list. If a percent (%) symbol is appended, then the values are treated as a percentage of maximum range. -window  id make image the background of a window id can be a window id or name. Specify root to select X's root window as the target window. By default the image is tiled onto the background of the target window. If backdrop or -geometry are specified, the image is surrounded by the background color. Refer to X RESOURCES for details. The image will not display on the root window if the image has more unique colors than the target window colormap allows. Use -colors to reduce the number of colors. -window-group specify the window group -write  filename write an intermediate image [convert, composite] The current image is written to the specified filename and then processing continues using that image. The following is an example of how several sizes of an image may be generated in one command (repeat as often as needed): gm convert input.jpg -resize 50% -write input50.jpg \\\n        -resize 25% input25.jpg  -write  filename write the image to a file [display] If filename already exists, you will be prompted as to whether it should be overwritten. By default, the image is written in the format that it was read in as. To specify a particular image format, prefix filename with the image type and a colon (e.g., ps:image) or specify the image type as the filename suffix (e.g., image.ps). Specify file as - for standard output. If file has the extension .Z or .gz, the file size is compressed using compress or gzip respectively. Precede the image file name with | to pipe to a system command. Use -compress to specify the type of image compression. The equivalent X resource for this option is writeFilename (class WriteFilename). See X Resources for details.\nBack to Contents", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_7", 
            "text": "COLUMNS Output screen width. Used when formatting text for the screen. Many Unix systems keep this shell variable up to date, but it may need to be explicitly exported in order for GraphicsMagick to see it. DISPLAY X11 display ID (host, display number, and screen in the form hostname:display.screen). HOME Location of user's home directory. GraphicsMagick searches for configuration files in $HOME/.magick if the directory exists. See MAGICK_CODER_MODULE_PATH, MAGICK_CONFIGURE_PATH, and MAGICK_FILTER_MODULE_PATH if more flexibility is needed. MAGICK_ACCESS_MONITOR When set to TRUE, command line monitor mode (enabled by -monitor) will also show files accessed (including temporary files) and any external commands which are executed. This is useful for debugging, but also illustrates arguments made available to an access handler registered by the MagickSetConfirmAccessHandler() C library function. MAGICK_CODER_STABILITY The minimum coder stability level before it will be used. The available levels are PRIMARY, STABLE, UNSTABLE, and BROKEN. The default minimum level is UNSTABLE, which means that all available working coders will be used. The purpose of this option is to reduce the security exposure (or apparent complexity) due to the huge number of formats supported. Coders at the PRIMARY level are commonly used formats with very well maintained implementations. Coders at the STABLE level are reasonably well maintained but represent less used formats. Coders at the UNSTABLE level either have weak implementations, the file format itself is weak, or the probability the coder will be needed is vanishingly small. Coders at the BROKEN level are known to often not work properly or might not be useful in their current state at all. MAGICK_CODER_MODULE_PATH Search path to use when searching for image format coder modules. This path allows the user to arbitrarily extend the image formats supported by GraphicsMagick by adding loadable modules to an arbitrary location rather than copying them into the GraphicsMagick installation directory. The formatting of the search path is similar to operating system search paths (i.e. colon delimited for Unix, and semi-colon delimited for Microsoft Windows). This user specified search path is used before trying the default search path. MAGICK_CONFIGURE_PATH Search path to use when searching for configuration (.mgk) files. The formatting of the search path is similar to operating system search paths (i.e. colon delimited for Unix, and semi-colon delimited for Microsoft Windows). This user specified search path is used before trying the default search path. MAGICK_DEBUG Debug options (see -debug for details). Setting debug options via an environment variable is currently necessary to see the complete initialization process. MAGICK_FILTER_MODULE_PATH Search path to use when searching for filter process modules (invoked via -process). This path allows the user to arbitrarily extend GraphicsMagick's image processing functionality by adding loadable modules to an arbitrary location rather than copying them into the GraphicsMagick installation directory. The formatting of the search path is similar to operating system search paths (i.e. colon delimited for Unix, and semi-colon delimited for Microsoft Windows). This user specified search path is used before trying the default search path. MAGICK_GHOSTSCRIPT_PATH For Microsoft Windows, specify the path to the Ghostscript installation rather than searching for it via the Windows registry. This helps in case Ghostscript is not installed via the Ghostscript Windows installer or the user wants more control over the Ghostscript used. MAGICK_HOME Path to top of GraphicsMagick installation directory. Only observed by \"uninstalled\" builds of GraphicsMagick which do not have their location hard-coded or set by an installer. MAGICK_MMAP_READ If MAGICK_MMAP_READ is set to TRUE, GraphicsMagick will attempt to memory-map the input file for reading. This usually substantially improves repeated read performance since the file is already in memory after the first time it has been read. However, testing shows that performance may be reduced for files accessed for the first time since data is accessed via page-faults (upon first access) and many operating systems fail to do sequential read-ahead of memory mapped files, and particularly if those files are accessed over a network. If many large input files are read, then enabling this option may harm performance by overloading the operating system's VM system as it then needs to free unmapped pages and map new ones. MAGICK_IO_FSYNC If MAGICK_IO_FSYNC is set to TRUE, then GraphicsMagick will request that the output file is fully flushed and synchronized to disk when it is closed. This incurs a performance penalty, but has the benefit that if the power fails or the system crashes, the file should be valid on disk. If image files are referenced from a database, then this option helps assure that the files referenced by the database are valid. MAGICK_IOBUF_SIZE The amount of I/O buffering (in bytes) to use when reading and writing encoded files. The default is 16384, which is observed to work well for many cases. The best value for a local filesystem is usually the the native filesystem block size (e.g. 4096, 8192, or even 131,072 for ZFS) in order to minimize the number of physical disk I/O operations. I/O performance to files accessed over a network may benefit significantly by tuning this option. Larger values are not necessarily better (they may be slower!), and there is rarely any benefit from using values larger than 32768. Use convert's -verbose option in order to evaluate read and write rates in pixels per second while keeping in mind that the operating system will try to cache files in RAM. MAGICK_LIMIT_DISK Maximum amount of disk space allowed for use by the pixel cache. MAGICK_LIMIT_FILES Maximum number of open files. MAGICK_LIMIT_MAP Maximum size of a memory mapped file allocation. A memory mapped file consumes memory when the file is accessed, although the system may reclaim such memory when needed. MAGICK_LIMIT_MEMORY Maximum amount of memory to allocate from the heap. MAGICK_LIMIT_PIXELS Maximum number of total pixels (image rows times image colums) to allow for any image which is requested to be created or read. This is useful to place a limit on how large an image may be. If the input image file has image dimensions larger than the pixel limit, then the image memory allocation is denied and an error is returned immediately. This is a per-image limit and does not limit the total number of pixels due to multiple image frames/pages (e.g. multi-page document or an animation). MAGICK_LIMIT_WIDTH Maximum pixel width of an image read, or created. MAGICK_LIMIT_HEIGHT Maximum pixel height of an image read, or created. MAGICK_TMPDIR Path to directory where GraphicsMagick should write temporary files. The default is to use the system default, or the location set by TMPDIR. TMPDIR For POSIX-compatible systems (Unix-compatible), the path to the directory where all applications should write temporary files. Overridden by MAGICK_TMPDIR if it is set. TMP or TEMP For Microsoft Windows, the path to the directory where applications should write temporary files. Overridden by MAGICK_TMPDIR if it is set. OMP_NUM_THREADS As per the OpenMP standard, this specifies the number of threads to use in parallel regions. Some compilers default the number of threads to use to the number of processor cores available while others default to just one thread. See the OpenMP specification for other standard adjustments and your compiler's manual for vendor-specific settings.", 
            "title": "\u73af\u5883\u53d8\u91cf"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_8", 
            "text": "GraphicsMagick\u4f7f\u7528\u4e00\u4e9bXML\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff1a  colors.mgk \u989c\u8272\u914d\u7f6e\u6587\u4ef6 ` ?xml version= 1.0 ? \n` colormap \n    ` color   name= AliceBlue   red= 240   green= 248   blue= 255 \n         compliance= SVG, X11, XPM   / \n` /colormap   delegates.mgk \u59d4\u6258\u914d\u7f6e\u6587\u4ef6 log.mgk \u8bb0\u5f55\u914d\u7f6e\u6587\u4ef6 ?xml version= 1.0 ?  magicklog \n     log   events= None   / \n     log   output= stdout   / \n     log   filename= Magick-%d.log   / \n     log   generations= 3   / \n     log   limit= 2000   / \n     log   format= %t %r %u %p %m/%f/%l/%d:\\n  %e    /  /magicklog   modules.mgk \u53ef\u52a0\u8f7d\u7684\u6a21\u5757\u914d\u7f6e\u6587\u4ef6 ?xml version= 1.0 ?  modulemap \n     module   magick= 8BIM   name= META   /  /modulemap   type.mgk \u4e3b\u7c7b\u578b\uff08\u5b57\u4f53\uff09\u914d\u7f6e\u6587\u4ef6      ?xml version= 1.0 ? \n     typemap \n         include   file= type-windows.mgk   / \n         type \n         name= AvantGarde-Book \n         fullname= AvantGarde Book \n         family= AvantGarde \n         foundry= URW \n         weight= 400 \n         style= normal \n         stretch= normal \n         format= type1 \n         metrics= /usr/local/share/ghostscript/fonts/a010013l.afm \n         glyphs= /usr/local/share/ghostscript/fonts/a010013l.pfb \n         / \n     /typemap", 
            "title": "\u914d\u7f6e\u6587\u4ef6"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_9", 
            "text": "John Cristy,  Bob Friesenhahn,  Glenn Randers-Pehrson,  William Radcliff,  Leonard Rosenthol,  Lars Ruben Skyum,  Jaroslav Fojtik,  and many more.", 
            "title": "\u4f5c\u8005"
        }, 
        {
            "location": "/GraphicsMagick/Manual/#_10", 
            "text": "Copyright (C) 2002 - 2017 GraphicsMagick Group. Additional copyrights apply. Please see see http://www.GraphicsMagick.org/Copyright.html for details.", 
            "title": "\u7248\u6743"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/", 
            "text": "\u52a8\u753b\n\n\n\u5185\u5bb9\n\n\n\n\n\u6982\u8981\n\n\n\u63cf\u8ff0\n\n\n\u793a\u4f8b\n\n\n\u9009\u9879\n\n\n\u9f20\u6807\u6309\u94ae\n\n\n\u547d\u4ee4\u7ec4\u4ef6\n\n\n\u5feb\u6377\u952e\n\n\nX Resources\n\n\n\n\n\u6982\u8981\n\n\ngm animate [ options ...] file [ [ options ...] file ...] \n\n\n\u63cf\u8ff0\n\n\nAnimate displays a sequence of images on any workstation display running an X server. animate first determines the hardware capabilities of the workstation. If the number of unique colors in an image is less than or equal to the number the workstation can support, the image is displayed in an X window. Otherwise the number of colors in the image is first reduced to match the color resolution of the workstation before it is displayed.\n\n\nThis means that a continuous-tone 24 bits-per-pixel image can display on a 8 bit pseudo-color device or monochrome device. In most instances the reduced color image closely resembles the original. Alternatively, a monochrome or pseudo-color image sequence can display on a continuous-tone 24 bits-per-pixel device.\n\n\nTo help prevent color flashing on X server visuals that have colormaps, animate creates a single colormap from the image sequence. This can be rather time consuming. You can speed this operation up by reducing the colors in the image before you \"animate\" them. Use mogrify to color reduce the images to a single colormap. See mogrify(1) for details. Alternatively, you can use a Standard Colormap; or a static, direct, or true color visual. You can define a Standard Colormap with xstdcmap. See xstdcmap(1) for details. This method is recommended for colormapped X server because it eliminates the need to compute a global colormap.  \n\n\n\u793a\u4f8b\n\n\nTo animate a set of images of a cockatoo, use:\n\n\ngm animate cockatoo.*\n\n\n\n\n\nTo animate a cockatoo image sequence while using the Standard Colormap best, use:\n\n\nxstdcmap -best\ngm animate -map best cockatoo.*\n\n\n\n\n\nTo animate an image of a cockatoo without a border centered on a backdrop, use: \n\n\ngm animate +borderwidth -backdrop cockatoo.*\n\n\n\n\n\n\u9009\u9879\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-authenticate \nstring\ndecrypt image with this password\n-backdrop\ndisplay the image centered on a backdrop.\n-background \ncolor\nthe background color\n-bordercolor \ncolor\nthe border color\n-borderwidth \ngeometry\nthe border width\n-chop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\nremove pixels from the interior of an image\n-colormap \ntype\ndefine the colormap type\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-delay \n1/100ths of a second\ndisplay the next image after pausing\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dither\napply Floyd/Steinberg error diffusion to the image\n-font \nname\nuse this font when annotating the image with text\n-foreground \ncolor\ndefine the foreground color\n-gamma \nvalue\nlevel of gamma correction\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-help\nprint usage instructions\n-iconGeometry \ngeometry\nspecify the icon geometry\n-iconic\niconic animation\n-interlace \ntype\nthe type of interlacing scheme\n-limit \ntype??? info\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-map \ntype\ndisplay image using this type.\n-matte\nstore matte channel if the image has one\n-mattecolor \ncolor\nspecify the color to be used with the -frame option\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-name\nname an image\n-noop\nNOOP (no option)\n-pause \nseconds\npause between animation loops [animate]\n-remote\nperform a X11 remote operation\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scenes \nvalue-value\nrange of image scene numbers to read\n-shared-memory\nuse shared memory\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-text-font \nname\nfont for writing fixed-width text\n-title \nstring\nassign title to displayed image [animate, display, montage]\n-treedepth \nvalue\ntree depth for the color reduction algorithm\n-trim\ntrim an image\n-type \ntype\nthe image type\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n-visual \ntype\nanimate images using this X visual type\n-window \nid\nmake image the background of a window\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \nAny option you specify on the command line remains in effect for the group of images following it, until the group is terminated by the appearance of any option or -noop. For example, to animate three images, the first with 32 colors, the second with an unlimited number of colors, and the third with only 16 colors, use: \n\n\n    gm animate -colors 32 cockatoo.1 -noop cockatoo.2 -colors 16 cockatoo.3\n\n\n\n\n\nAnimate options can appear on the command line or in your X resources file. See X(1). Options on the command line supersede values specified in your X resources file.\n\n\nImage filenames may appear in any order on the command line if the image format is MIFF (refer to miff(5) and the scene keyword is specified in the image. Otherwise the images will display in the order they appear on the command line.\n\n\n\u9f20\u6807\u6309\u94ae\n\n\nPress any button to map or unmap the Command widget. See the next section for more information about the Command widget.\n\n\n\u547d\u4ee4\u5c0f\u90e8\u4ef6\n\n\nThe Command widget lists a number of sub-menus and commands. They are\n\n\n\n\nAnimate\n\n\nOpen\n\n\nPlay\n\n\nStep\n\n\nRepeat\n\n\nAuto Reverse\n\n\n\n\n\n\nSpeed\n\n\nFaster\n\n\nSlower\n\n\n\n\n\n\nDirection\n\n\nForward\n\n\nReverse\n\n\n\n\n\n\nImage Info\n\n\nHelp\n\n\nQuit\n\n\n\n\nMenu items with a indented triangle have a sub-menu. They are represented above as the indented items. To access a sub-menu item, move the pointer to the appropriate menu and press a button and drag. When you find the desired sub-menu item, release the button and the command is executed. Move the pointer away from the sub-menu if you decide not to execute a particular command.\n\n\n\u952e\u76d8\u52a0\u901f\u5668\n\n\nCtl+O\n\n\nPress to load an image from a file.\n\n\nspace\n\n\nPress to display the next image in the sequence.\n\n\n\n\nPress to speed-up the display of the images. Refer to -delay for more information.\n\n\n\n\nPress to slow the display of the images. Refer to -delay for more information.\n\n\n?\n\n\nPress to display information about the image. Press any key or button to erase the information.\n\n\nThis information is printed: image name; image size; and the total number of unique colors in the image.\n\n\nF1\n\n\nPress to display helpful information about animate(1).\n\n\nCtl-q\n\n\nPress to discard all images and exit program.\n\n\nX resources\n\n\nAnimate options can appear on the command line or in your X resource file. Options on the command line supersede values specified in your X resource file. See X(1) for more information on X resources.\n\n\nAll animate options have a corresponding X resource. In addition, the animate program uses the following X resources:\n\n\nbackground (class Background)\nSpecifies the preferred color to use for the Image window background. The default is #ccc.\nborderColor (class BorderColor)\nSpecifies the preferred color to use for the Image window border. The default is #ccc.\nborderWidth (class BorderWidth)\nSpecifies the width in pixels of the Image window border. The default is 2.\nfont (class Font or FontList)\nSpecifies the name of the preferred font to use in normal formatted text. The default is 14 point Helvetica.\nforeground (class Foreground)\nSpecifies the preferred color to use for text within the Image window. The default is black.\ngeometry (class geometry)\nSpecifies the preferred size and position of the image window. It is not necessarily obeyed by all window managers. Offsets, if present, are handled in X(1) style. A negative x offset is measured from the right edge of the screen to the right edge of the icon, and a negative y offset is measured from the bottom edge of the screen to the bottom edge of the icon.\niconGeometry (class IconGeometry)\nSpecifies the preferred size and position of the application when iconified. It is not necessarily obeyed by all window managers. Offsets, if present, are handled in the same manner as in class Geometry.\niconic (class Iconic)\nThis resource indicates that you would prefer that the application's windows initially not be visible as if the windows had be immediately iconified by you. Window managers may choose not to honor the application's request.\nmatteColor (class MatteColor)\nSpecify the color of windows. It is used for the backgrounds of windows, menus, and notices. A 3D effect is achieved by using highlight and shadow colors derived from this color. Default value: #ddd.\nname (class Name)\nThis resource specifies the name under which resources for the application should be found. This resource is useful in shell aliases to distinguish between invocations of an application, without resorting to creating links to alter the executable file name. The default is the application name.\nsharedMemory (class SharedMemory)\nThis resource specifies whether animate should attempt use shared memory for pixmaps. ImageMagick must be compiled with shared memory support, and the display must support the MIT-SHM extension. Otherwise, this resource is ignored. The default is True.\ntext_font (class textFont)\nSpecifies the name of the preferred font to use in fixed (typewriter style) formatted text. The default is 14 point Courier.\ntitle (class Title)\nThis resource specifies the title to be used for the Image window. This information is sometimes used by a window manager to provide some sort of header identifying the window. The default is the image file name.", 
            "title": "\u52a8\u753b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_1", 
            "text": "", 
            "title": "\u52a8\u753b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_2", 
            "text": "\u6982\u8981  \u63cf\u8ff0  \u793a\u4f8b  \u9009\u9879  \u9f20\u6807\u6309\u94ae  \u547d\u4ee4\u7ec4\u4ef6  \u5feb\u6377\u952e  X Resources", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_3", 
            "text": "gm animate [ options ...] file [ [ options ...] file ...]", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_4", 
            "text": "Animate displays a sequence of images on any workstation display running an X server. animate first determines the hardware capabilities of the workstation. If the number of unique colors in an image is less than or equal to the number the workstation can support, the image is displayed in an X window. Otherwise the number of colors in the image is first reduced to match the color resolution of the workstation before it is displayed.  This means that a continuous-tone 24 bits-per-pixel image can display on a 8 bit pseudo-color device or monochrome device. In most instances the reduced color image closely resembles the original. Alternatively, a monochrome or pseudo-color image sequence can display on a continuous-tone 24 bits-per-pixel device.  To help prevent color flashing on X server visuals that have colormaps, animate creates a single colormap from the image sequence. This can be rather time consuming. You can speed this operation up by reducing the colors in the image before you \"animate\" them. Use mogrify to color reduce the images to a single colormap. See mogrify(1) for details. Alternatively, you can use a Standard Colormap; or a static, direct, or true color visual. You can define a Standard Colormap with xstdcmap. See xstdcmap(1) for details. This method is recommended for colormapped X server because it eliminates the need to compute a global colormap.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_5", 
            "text": "To animate a set of images of a cockatoo, use:  gm animate cockatoo.*  To animate a cockatoo image sequence while using the Standard Colormap best, use:  xstdcmap -best\ngm animate -map best cockatoo.*  To animate an image of a cockatoo without a border centered on a backdrop, use:   gm animate +borderwidth -backdrop cockatoo.*", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_6", 
            "text": "For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -authenticate  string decrypt image with this password -backdrop display the image centered on a backdrop. -background  color the background color -bordercolor  color the border color -borderwidth  geometry the border width -chop  width x height {+-} x {+-} y {%} remove pixels from the interior of an image -colormap  type define the colormap type -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -delay  1/100ths of a second display the next image after pausing -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dither apply Floyd/Steinberg error diffusion to the image -font  name use this font when annotating the image with text -foreground  color define the foreground color -gamma  value level of gamma correction -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -help print usage instructions -iconGeometry  geometry specify the icon geometry -iconic iconic animation -interlace  type the type of interlacing scheme -limit  type??? info ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -map  type display image using this type. -matte store matte channel if the image has one -mattecolor  color specify the color to be used with the -frame option -monitor show progress indication -monochrome transform the image to black and white -name name an image -noop NOOP (no option) -pause  seconds pause between animation loops [animate] -remote perform a X11 remote operation -rotate  degrees { }{ } rotate the image -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scenes  value-value range of image scene numbers to read -shared-memory use shared memory -size  width x height {+offset} width and height of the image -text-font  name font for writing fixed-width text -title  string assign title to displayed image [animate, display, montage] -treedepth  value tree depth for the color reduction algorithm -trim trim an image -type  type the image type -verbose print detailed information about the image -version print GraphicsMagick version string -visual  type animate images using this X visual type -window  id make image the background of a window\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1).  Any option you specify on the command line remains in effect for the group of images following it, until the group is terminated by the appearance of any option or -noop. For example, to animate three images, the first with 32 colors, the second with an unlimited number of colors, and the third with only 16 colors, use:       gm animate -colors 32 cockatoo.1 -noop cockatoo.2 -colors 16 cockatoo.3  Animate options can appear on the command line or in your X resources file. See X(1). Options on the command line supersede values specified in your X resources file.  Image filenames may appear in any order on the command line if the image format is MIFF (refer to miff(5) and the scene keyword is specified in the image. Otherwise the images will display in the order they appear on the command line.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_7", 
            "text": "Press any button to map or unmap the Command widget. See the next section for more information about the Command widget.", 
            "title": "\u9f20\u6807\u6309\u94ae"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_8", 
            "text": "The Command widget lists a number of sub-menus and commands. They are   Animate  Open  Play  Step  Repeat  Auto Reverse    Speed  Faster  Slower    Direction  Forward  Reverse    Image Info  Help  Quit   Menu items with a indented triangle have a sub-menu. They are represented above as the indented items. To access a sub-menu item, move the pointer to the appropriate menu and press a button and drag. When you find the desired sub-menu item, release the button and the command is executed. Move the pointer away from the sub-menu if you decide not to execute a particular command.", 
            "title": "\u547d\u4ee4\u5c0f\u90e8\u4ef6"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#_9", 
            "text": "Ctl+O  Press to load an image from a file.  space  Press to display the next image in the sequence.   Press to speed-up the display of the images. Refer to -delay for more information.   Press to slow the display of the images. Refer to -delay for more information.  ?  Press to display information about the image. Press any key or button to erase the information.  This information is printed: image name; image size; and the total number of unique colors in the image.  F1  Press to display helpful information about animate(1).  Ctl-q  Press to discard all images and exit program.", 
            "title": "\u952e\u76d8\u52a0\u901f\u5668"
        }, 
        {
            "location": "/GraphicsMagick/Manual/animate/#x-resources", 
            "text": "Animate options can appear on the command line or in your X resource file. Options on the command line supersede values specified in your X resource file. See X(1) for more information on X resources.  All animate options have a corresponding X resource. In addition, the animate program uses the following X resources:  background (class Background) Specifies the preferred color to use for the Image window background. The default is #ccc. borderColor (class BorderColor) Specifies the preferred color to use for the Image window border. The default is #ccc. borderWidth (class BorderWidth) Specifies the width in pixels of the Image window border. The default is 2. font (class Font or FontList) Specifies the name of the preferred font to use in normal formatted text. The default is 14 point Helvetica. foreground (class Foreground) Specifies the preferred color to use for text within the Image window. The default is black. geometry (class geometry) Specifies the preferred size and position of the image window. It is not necessarily obeyed by all window managers. Offsets, if present, are handled in X(1) style. A negative x offset is measured from the right edge of the screen to the right edge of the icon, and a negative y offset is measured from the bottom edge of the screen to the bottom edge of the icon. iconGeometry (class IconGeometry) Specifies the preferred size and position of the application when iconified. It is not necessarily obeyed by all window managers. Offsets, if present, are handled in the same manner as in class Geometry. iconic (class Iconic) This resource indicates that you would prefer that the application's windows initially not be visible as if the windows had be immediately iconified by you. Window managers may choose not to honor the application's request. matteColor (class MatteColor) Specify the color of windows. It is used for the backgrounds of windows, menus, and notices. A 3D effect is achieved by using highlight and shadow colors derived from this color. Default value: #ddd. name (class Name) This resource specifies the name under which resources for the application should be found. This resource is useful in shell aliases to distinguish between invocations of an application, without resorting to creating links to alter the executable file name. The default is the application name. sharedMemory (class SharedMemory) This resource specifies whether animate should attempt use shared memory for pixmaps. ImageMagick must be compiled with shared memory support, and the display must support the MIT-SHM extension. Otherwise, this resource is ignored. The default is True. text_font (class textFont) Specifies the name of the preferred font to use in fixed (typewriter style) formatted text. The default is 14 point Courier. title (class Title) This resource specifies the title to be used for the Image window. This information is sometimes used by a window manager to provide some sort of header identifying the window. The default is the image file name.", 
            "title": "X resources"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/", 
            "text": "\u6279\u91cf\u5904\u7406\n\n\n\u540d\u79f0\n\n\nbatch - execute multiple gm commands as a script\n\n\n\u5185\u5bb9\n\n\n\n\n\u6982\u8981\n\n\n\u63cf\u8ff0\n\n\n\u793a\u4f8b\n\n\n\u9009\u9879\n\n\n\n\n\u6982\u8981\n\n\ngm batch [ options ... ] [ script ]\n\n\n\u63cf\u8ff0\n\n\nbatch executes an arbitary number of the utility commands (e.g. convert) in the form of a simple linear batch script in order to improve execution efficiency, and/or to allow use as a subordinate co-process under the control of an arbitrary script or program.\n\n\n\u793a\u4f8b\n\n\nTo drive 'gm batch' using a shell script (or a program written in any language), have the script/program send commands to 'gm batch' via its standard input. Specify that standard input should be used by using '-' as the file name. The following example converts all files matching '*.jpg' to TIFF format while rotating each file by 90 degrees and stripping all embedded profiles. The shell script syntax is standard Unix shell:\n\n\n  \nfor\n file in *.jpg\n  \ndo\n\n    \noutfile\n=\n`\nbasename \n$file\n .jpg\n`\n.tiff\n    \necho\n convert -verbose \n$file\n -rotate \n90\n \n\\\n\n    +profile \n*\n \n$outfile\n\n  \ndone\n \n|\n gm batch -echo on -feedback on -\n\n\n\n\nWe can accomplish the same as the previous example by putting all the commands in a text file and then specifying the name of the text file as the script to execute:\n\n\n  \nfor\n file in *.jpg\n  \ndo\n\n    \noutfile\n=\n`\nbasename \n$file\n .jpg\n`\n.tiff\n    \necho\n convert -verbose \n$file\n -rotate \n90\n \n\\\n\n    +profile \n*\n \n$outfile\n\n  \ndone\n \n script.txt\n  gm batch -echo on -feedback on script.txt\n\n\n\n\n\u9009\u9879\n\n\nOptions are processed from left to right and must appear before any filename argument.\n\n\n-echo on|off\n  \ncommand\n \necho\n on or off\n\n\nSpecify on to enable echoing commands to standard output as they are read or off to disable. The default is off.\n-escape unix|windows\nParse using unix or windows syntax\nCommands must be parsed from the input stream and escaping needs to be used to protect spaces or quoting characters in the input. Specify unix to use unix-style command line parsing or windows for Microsoft Windows command shell style parsing. The default depends on if the software is compiled for Microsoft Windows or for a Unix-type system (including Cygwin on Microsoft Windows). It is recommended to use unix syntax because it is more powerful and more portable.\n-fail text\ntext to print if a command fails\nWhen feedback is enabled, this specifies the text to print when the command fails. The default text is FAIL.\n-feedback on|off\nenable error feedback\nPrint text (see -pass and -fail options) feedback after each command to indicate the result, the default is off.\n-help\nPrints batch command help.\n-pass text\ntext to print if a command passes\nWhen feedback is enabled, this specifies the text to print when the command passes. The default text is PASS.\n-prompt text\nPrompt text to use for command line\nIf no filename argument was specified, a simple command prompt appears where you may enter GraphicsMagick commands. The default prompt is GM\n. Use this option to change the prompt to something else.\n-stop-on-error on|off\nSpecify if command processing stops on error\nNormally command processing continues if a command encounters an error. Specify -stop-on-error on to cause processing to quit immediately on error.", 
            "title": "\u6279\u91cf"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_1", 
            "text": "", 
            "title": "\u6279\u91cf\u5904\u7406"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_2", 
            "text": "batch - execute multiple gm commands as a script", 
            "title": "\u540d\u79f0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_3", 
            "text": "\u6982\u8981  \u63cf\u8ff0  \u793a\u4f8b  \u9009\u9879", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_4", 
            "text": "gm batch [ options ... ] [ script ]", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_5", 
            "text": "batch executes an arbitary number of the utility commands (e.g. convert) in the form of a simple linear batch script in order to improve execution efficiency, and/or to allow use as a subordinate co-process under the control of an arbitrary script or program.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_6", 
            "text": "To drive 'gm batch' using a shell script (or a program written in any language), have the script/program send commands to 'gm batch' via its standard input. Specify that standard input should be used by using '-' as the file name. The following example converts all files matching '*.jpg' to TIFF format while rotating each file by 90 degrees and stripping all embedded profiles. The shell script syntax is standard Unix shell:     for  file in *.jpg\n   do \n     outfile = ` basename  $file  .jpg ` .tiff\n     echo  convert -verbose  $file  -rotate  90   \\ \n    +profile  *   $outfile \n   done   |  gm batch -echo on -feedback on -  We can accomplish the same as the previous example by putting all the commands in a text file and then specifying the name of the text file as the script to execute:     for  file in *.jpg\n   do \n     outfile = ` basename  $file  .jpg ` .tiff\n     echo  convert -verbose  $file  -rotate  90   \\ \n    +profile  *   $outfile \n   done    script.txt\n  gm batch -echo on -feedback on script.txt", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/batch/#_7", 
            "text": "Options are processed from left to right and must appear before any filename argument.  -echo on|off    command   echo  on or off \nSpecify on to enable echoing commands to standard output as they are read or off to disable. The default is off. -escape unix|windows Parse using unix or windows syntax\nCommands must be parsed from the input stream and escaping needs to be used to protect spaces or quoting characters in the input. Specify unix to use unix-style command line parsing or windows for Microsoft Windows command shell style parsing. The default depends on if the software is compiled for Microsoft Windows or for a Unix-type system (including Cygwin on Microsoft Windows). It is recommended to use unix syntax because it is more powerful and more portable. -fail text text to print if a command fails\nWhen feedback is enabled, this specifies the text to print when the command fails. The default text is FAIL. -feedback on|off enable error feedback\nPrint text (see -pass and -fail options) feedback after each command to indicate the result, the default is off. -help Prints batch command help. -pass text text to print if a command passes\nWhen feedback is enabled, this specifies the text to print when the command passes. The default text is PASS. -prompt text Prompt text to use for command line\nIf no filename argument was specified, a simple command prompt appears where you may enter GraphicsMagick commands. The default prompt is GM . Use this option to change the prompt to something else. -stop-on-error on|off Specify if command processing stops on error\nNormally command processing continues if a command encounters an error. Specify -stop-on-error on to cause processing to quit immediately on error.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/", 
            "text": "\u57fa\u51c6\u6d4b\u8bd5\n\n\n\u547d\u540d\n\n\nbenchmark - benchmark the execution of a gm command\n\n\n\u5185\u5bb9\n\n\n\n\n\u6982\u8981\n\n\n\u63cf\u8ff0\n\n\n\u793a\u4f8b\n\n\n\u9009\u9879\n\n\n\n\n\u6982\u8981\n\n\ngm benchmark \n[\n options ... \n]\n \ncommand\n\n\n\n\n\n\u63cf\u8ff0\n\n\nbenchmark executes an arbitrary gm utility command (e.g. convert) for one or more loops, and/or a specified execution time, and reports many execution metrics. For builds using OpenMP, a mode is provided to execute the benchmark with an increasing number of threads and provide a report of speedup and multi-thread execution efficiency. If benchmark is used to execute a command without any additional benchmark options, then the command is run once.\n\n\n\u793a\u4f8b\n\n\nTo obtain benchmark information for a single execution of a command:\n\n\n    % gm benchmark convert input.ppm -gaussian 0x1 output.ppm\n    Results: \n32\n threads \n1\n iter \n6\n.20s user \n0\n.41s total \n2\n.439 iter/s \n0\n.161 iter/cpu\n\n\nTo obtain benchmark information from 100 iterations of the command:\n\n\n    % gm benchmark -iterations \n100\n convert input.ppm -gaussian 0x1 output.ppm\n    Results: \n32\n threads \n100\n iter \n625\n.40s user \n31\n.74s total \n3\n.151 iter/s \n0\n.160 iter/cpu\n\n\n\n\nTo obtain benchmark information by iterating the command until a specified amount of time (in seconds) has been consumed:\n\n\n    % gm benchmark -duration \n30\n convert input.ppm -gaussian 0x1 output.ppm\n    Results: \n32\n threads \n91\n iter \n587\n.33s user \n30\n.30s total \n3\n.003 iter/s \n0\n.155 iter/cpu\n\n\n\n\nTo obtain a full performance report with an increasing number of threads (1-32 threads, stepping the number of threads by four each time):\n\n\n  % gm benchmark -duration \n3\n -stepthreads \n4\n convert input.ppm -gaussian 0x2 output.ppm\n  Results: \n1\n threads \n1\n iter \n8\n.84s user \n8\n.84s total \n0\n.113 iter/s \n0\n.113 iter/cpu \n1\n.00 speedup \n1\n.000 karp-flatt\n  Results: \n4\n threads \n2\n iter \n18\n.37s user \n4\n.89s total \n0\n.409 iter/s \n0\n.109 iter/cpu \n3\n.62 speedup \n0\n.035 karp-flatt\n  Results: \n8\n threads \n3\n iter \n29\n.81s user \n4\n.09s total \n0\n.733 iter/s \n0\n.101 iter/cpu \n6\n.48 speedup \n0\n.033 karp-flatt\n  Results: \n12\n threads \n3\n iter \n30\n.81s user \n3\n.14s total \n0\n.955 iter/s \n0\n.097 iter/cpu \n8\n.45 speedup \n0\n.038 karp-flatt\n  Results: \n16\n threads \n3\n iter \n35\n.02s user \n3\n.01s total \n0\n.997 iter/s \n0\n.086 iter/cpu \n8\n.81 speedup \n0\n.054 karp-flatt\n  Results: \n20\n threads \n4\n iter \n52\n.92s user \n3\n.53s total \n1\n.133 iter/s \n0\n.076 iter/cpu \n10\n.02 speedup \n0\n.052 karp-flatt\n  Results: \n24\n threads \n4\n iter \n60\n.66s user \n3\n.39s total \n1\n.180 iter/s \n0\n.066 iter/cpu \n10\n.43 speedup \n0\n.057 karp-flatt\n  Results: \n28\n threads \n4\n iter \n73\n.10s user \n3\n.35s total \n1\n.194 iter/s \n0\n.055 iter/cpu \n10\n.56 speedup \n0\n.061 karp-flatt\n  Results: \n32\n threads \n4\n iter \n82\n.10s user \n3\n.09s total \n1\n.294 iter/s \n0\n.049 iter/cpu \n11\n.44 speedup \n0\n.058 karp-flatt\n\n\n\n\nHere is the interpretation of the output:\n\n\n\n\nthreads\n - number of threads used.\n\n\niter\n - number of command iterations executed.\n\n\nuser\n - total user time consumed.\n\n\ntotal\n - total elapsed time consumed.\n\n\niter/s\n - number of command iterations per second.\n\n\niter/cpu\n - amount of CPU time consumed per iteration.\n\n\nspeedup\n - speedup compared with one thread.\n\n\nkarp-flatt\n - Karp-Flatt measure of speedup efficiency.\n\n\n\n\nPlease note that the reported \"speedup\" is based on the execution time of just one thread. A preliminary warm-up pass is used before timing the first loop in order to ensure that the CPU is brought out of power-saving modes and that system caches are warmed up. Most modern CPUs provide a \"turbo\" mode where the CPU clock speed is increased (e.g. by a factor of two) when only one or two cores are active. If the CPU grows excessively hot (due to insufficient cooling), then it may dial back its clock rates as a form of thermal management. These factors result in an under-reporting of speedup compared to if \"turbo\" mode was disabled and the CPU does not need to worry about thermal management. The powertop utility available under Linux and Solaris provides a way to observe CPU core clock rates while a benchmark is running.\n\n\n\u9009\u9879\n\n\nOptions are processed from left to right and must appear before any argument.\n\n\n-duration duration\nduration to run benchmark\nSpecify the number of seconds to run the benchmark. The command is executed repeatedly until the specified amount of time has elapsed.\n-help\nPrints benchmark command help.\n-iterations loops\nnumber of command iterations\nSpecify the number of iterations to run the benchmark. The command is executed repeatedly until the specified number of iterations has been reached.\n-rawcsv\nPrint results in CSV format\nPrint results in a comma-separated value (CSV) format which is easy to parse for plotting or importing into a spreadsheet or database. The values reported are threads, iterations, user_time, and elapsed_time.\n-stepthreads step\nexecute a per-thread benchmark ramp\nExecute a per-thread benchmark ramp, incrementing the number of threads at each step by the specified value. The maximum number of threads is taken from the standard OMP_NUM_THREADS environment variable.", 
            "title": "\u57fa\u51c6"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_1", 
            "text": "", 
            "title": "\u57fa\u51c6\u6d4b\u8bd5"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_2", 
            "text": "benchmark - benchmark the execution of a gm command", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_3", 
            "text": "\u6982\u8981  \u63cf\u8ff0  \u793a\u4f8b  \u9009\u9879", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_4", 
            "text": "gm benchmark  [  options ...  ]   command", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_5", 
            "text": "benchmark executes an arbitrary gm utility command (e.g. convert) for one or more loops, and/or a specified execution time, and reports many execution metrics. For builds using OpenMP, a mode is provided to execute the benchmark with an increasing number of threads and provide a report of speedup and multi-thread execution efficiency. If benchmark is used to execute a command without any additional benchmark options, then the command is run once.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_6", 
            "text": "To obtain benchmark information for a single execution of a command:      % gm benchmark convert input.ppm -gaussian 0x1 output.ppm\n    Results:  32  threads  1  iter  6 .20s user  0 .41s total  2 .439 iter/s  0 .161 iter/cpu \nTo obtain benchmark information from 100 iterations of the command:      % gm benchmark -iterations  100  convert input.ppm -gaussian 0x1 output.ppm\n    Results:  32  threads  100  iter  625 .40s user  31 .74s total  3 .151 iter/s  0 .160 iter/cpu  To obtain benchmark information by iterating the command until a specified amount of time (in seconds) has been consumed:      % gm benchmark -duration  30  convert input.ppm -gaussian 0x1 output.ppm\n    Results:  32  threads  91  iter  587 .33s user  30 .30s total  3 .003 iter/s  0 .155 iter/cpu  To obtain a full performance report with an increasing number of threads (1-32 threads, stepping the number of threads by four each time):    % gm benchmark -duration  3  -stepthreads  4  convert input.ppm -gaussian 0x2 output.ppm\n  Results:  1  threads  1  iter  8 .84s user  8 .84s total  0 .113 iter/s  0 .113 iter/cpu  1 .00 speedup  1 .000 karp-flatt\n  Results:  4  threads  2  iter  18 .37s user  4 .89s total  0 .409 iter/s  0 .109 iter/cpu  3 .62 speedup  0 .035 karp-flatt\n  Results:  8  threads  3  iter  29 .81s user  4 .09s total  0 .733 iter/s  0 .101 iter/cpu  6 .48 speedup  0 .033 karp-flatt\n  Results:  12  threads  3  iter  30 .81s user  3 .14s total  0 .955 iter/s  0 .097 iter/cpu  8 .45 speedup  0 .038 karp-flatt\n  Results:  16  threads  3  iter  35 .02s user  3 .01s total  0 .997 iter/s  0 .086 iter/cpu  8 .81 speedup  0 .054 karp-flatt\n  Results:  20  threads  4  iter  52 .92s user  3 .53s total  1 .133 iter/s  0 .076 iter/cpu  10 .02 speedup  0 .052 karp-flatt\n  Results:  24  threads  4  iter  60 .66s user  3 .39s total  1 .180 iter/s  0 .066 iter/cpu  10 .43 speedup  0 .057 karp-flatt\n  Results:  28  threads  4  iter  73 .10s user  3 .35s total  1 .194 iter/s  0 .055 iter/cpu  10 .56 speedup  0 .061 karp-flatt\n  Results:  32  threads  4  iter  82 .10s user  3 .09s total  1 .294 iter/s  0 .049 iter/cpu  11 .44 speedup  0 .058 karp-flatt  Here is the interpretation of the output:   threads  - number of threads used.  iter  - number of command iterations executed.  user  - total user time consumed.  total  - total elapsed time consumed.  iter/s  - number of command iterations per second.  iter/cpu  - amount of CPU time consumed per iteration.  speedup  - speedup compared with one thread.  karp-flatt  - Karp-Flatt measure of speedup efficiency.   Please note that the reported \"speedup\" is based on the execution time of just one thread. A preliminary warm-up pass is used before timing the first loop in order to ensure that the CPU is brought out of power-saving modes and that system caches are warmed up. Most modern CPUs provide a \"turbo\" mode where the CPU clock speed is increased (e.g. by a factor of two) when only one or two cores are active. If the CPU grows excessively hot (due to insufficient cooling), then it may dial back its clock rates as a form of thermal management. These factors result in an under-reporting of speedup compared to if \"turbo\" mode was disabled and the CPU does not need to worry about thermal management. The powertop utility available under Linux and Solaris provides a way to observe CPU core clock rates while a benchmark is running.", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/benchmark/#_7", 
            "text": "Options are processed from left to right and must appear before any argument.  -duration duration duration to run benchmark Specify the number of seconds to run the benchmark. The command is executed repeatedly until the specified amount of time has elapsed. -help Prints benchmark command help. -iterations loops number of command iterations Specify the number of iterations to run the benchmark. The command is executed repeatedly until the specified number of iterations has been reached. -rawcsv Print results in CSV format Print results in a comma-separated value (CSV) format which is easy to parse for plotting or importing into a spreadsheet or database. The values reported are threads, iterations, user_time, and elapsed_time. -stepthreads step execute a per-thread benchmark ramp Execute a per-thread benchmark ramp, incrementing the number of threads at each step by the specified value. The maximum number of threads is taken from the standard OMP_NUM_THREADS environment variable.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/", 
            "text": "\u6bd4\u8f83\n\n\n\u547d\u540d\n\n\ncompare - \u6bd4\u8f83\u4e24\u5f20\u56fe.\n\n\n\u83dc\u5355\n\n\n\n\n\u6982\u8981\n\n\n\u63cf\u8ff0\n\n\n\u793a\u4f8b\n\n\n\u9009\u9879\n\n\n\n\n\u6982\u8981\n\n\ngm compare \n[\n options ... \n]\n reference-image \n[\n options ... \n]\n compare-image \n[\n options ... \n]\n\n\n\n\n\n\u63cf\u8ff0\n\n\ncompare compares two similar images using a specified statistical method (see -metric) and/or by writing a difference image (-file), with the altered pixels annotated using a specified method (see -highlight-style) and color (see -highlight-color).\n\n\nReference-image is the original image and compare-image is the (possibly) altered version, which should have the same dimensions as reference-image.\n\n\n\u793a\u4f8b\n\n\nTo compare two images using Mean Square Error (MSE) statistical analysis use:\n\n\n    compare -metric mse original.miff compare.miff\n\n\n\n\nTo create an annotated difference image use:\n\n\n    compare -highlight-style assign -highlight-color purple -file diff.miff original.miff compare.miff\n\n\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect only for the image that follows. All options are reset to their default values after each image is read.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-authenticate \nstring\n\u4f7f\u7528\u5bc6\u7801\u89e3\u5bc6\u56fe\u7247\n-colorspace \nvalue\n\u8272\u9699\u7c7b\u578b\n-debug \nevents\n\u542f\u7528\u8c03\u8bd5\u6253\u5370\u8f93\u51fa\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\n\u56fe\u50cf\u6df1\u5ea6\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-file \nfilename\nwrite annotated difference image to file\n-help\nprint usage instructions\n-highlight-color \ncolor\npixel annotation color\n-highlight-style \nstyle\npixel annotation style\n-interlace \ntype\nthe type of interlacing scheme\n-limit \ntype\n \nvalue\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-matte\nstore matte channel if the image has one\n-maximum-error \nlimit\nspecifies the maximum amount of total image error\n-metric \nmetric\n\u6bd4\u8f83\u89c4 (MAE, MSE, PAE, PSNR, RMSE)\n-monitor\n\u663e\u793a\u8fdb\u5ea6\u63d0\u793a\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-size \nwidth\nx\nheight\n{+offset}\n\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\n-type \ntype\n\u56fe\u50cf\u7c7b\u578b\n-verbose\n\u6253\u5370\u56fe\u7247\u8be6\u60c5\n-version\n\u6253\u5370 GraphicsMagick \u7248\u672c\u5b57\u7b26\n\u67e5\u770b\u9009\u9879\u8be6\u60c5, \u67e5\u770b GraphicsMagick(1) \u9009\u9879.", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_1", 
            "text": "", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_2", 
            "text": "compare - \u6bd4\u8f83\u4e24\u5f20\u56fe.", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_3", 
            "text": "\u6982\u8981  \u63cf\u8ff0  \u793a\u4f8b  \u9009\u9879", 
            "title": "\u83dc\u5355"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_4", 
            "text": "gm compare  [  options ...  ]  reference-image  [  options ...  ]  compare-image  [  options ...  ]", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_5", 
            "text": "compare compares two similar images using a specified statistical method (see -metric) and/or by writing a difference image (-file), with the altered pixels annotated using a specified method (see -highlight-style) and color (see -highlight-color).  Reference-image is the original image and compare-image is the (possibly) altered version, which should have the same dimensions as reference-image.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_6", 
            "text": "To compare two images using Mean Square Error (MSE) statistical analysis use:      compare -metric mse original.miff compare.miff  To create an annotated difference image use:      compare -highlight-style assign -highlight-color purple -file diff.miff original.miff compare.miff", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/compare/#_7", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect only for the image that follows. All options are reset to their default values after each image is read.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -authenticate  string \u4f7f\u7528\u5bc6\u7801\u89e3\u5bc6\u56fe\u7247 -colorspace  value \u8272\u9699\u7c7b\u578b -debug  events \u542f\u7528\u8c03\u8bd5\u6253\u5370\u8f93\u51fa -define  key {= value },... add coder/decoder specific options -density  width x height horizontal and vertical resolution in pixels of the image -depth  value \u56fe\u50cf\u6df1\u5ea6 -display  host:display[.screen] specifies the X server to contact -endian  type specify endianness (MSB, LSB, or Native) of image -file  filename write annotated difference image to file -help print usage instructions -highlight-color  color pixel annotation color -highlight-style  style pixel annotation style -interlace  type the type of interlacing scheme -limit  type   value Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -matte store matte channel if the image has one -maximum-error  limit specifies the maximum amount of total image error -metric  metric \u6bd4\u8f83\u89c4 (MAE, MSE, PAE, PSNR, RMSE) -monitor \u663e\u793a\u8fdb\u5ea6\u63d0\u793a -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -size  width x height {+offset} \u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6 -type  type \u56fe\u50cf\u7c7b\u578b -verbose \u6253\u5370\u56fe\u7247\u8be6\u60c5 -version \u6253\u5370 GraphicsMagick \u7248\u672c\u5b57\u7b26 \u67e5\u770b\u9009\u9879\u8be6\u60c5, \u67e5\u770b GraphicsMagick(1) \u9009\u9879.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/", 
            "text": "\u5408\u5e76\n\n\n\u547d\u540d\n\n\ncomposite - composite images together.\n\n\n\u5185\u5bb9\n\n\n\n\n\u6982\u8981\n\n\n\u63cf\u8ff0\n\n\n\u4e3e\u4f8b\n\n\n\u9009\u9879\n\n\n\n\n\u6982\u8981\n\n\ngm composite \n[\n options ... \n]\n change-image base-image \n[\n mask-image \n]\n output-image \n\n\n\n\n\u63cf\u8ff0\n\n\ncomposite composites (combines) images to create new images.\n\n\nbase-image is the base image and change-image contains the changes. ouput-image is the result, and normally has the same dimensions as base-image.\n\n\nThe optional mask-image can be used to provide opacity information for change-image when it has none or if you want a different mask. A mask image is typically grayscale and the same size as base-image. If mask-image is not grayscale, it is converted to grayscale and the resulting intensities are used as opacity information.\n\n\n\u4e3e\u4f8b\n\n\nTo composite an image of a cockatoo with a perch, use:\n\n\ngm composite cockatoo.miff perch.ras composite.miff\n\n\n\n\n\nTo compute the difference between images in a series, use:\n\n\ngm composite -compose difference series.2 series.1 difference.miff\n\n\n\n\n\nTo composite an image of a cockatoo with a perch starting at location (100,150), use:\n\n\ngm composite -geometry +100+150 cockatoo.miff perch.ras composite.miff\n\n\n\n\n\nTo tile a logo across your image of a cockatoo, use\n\n\ngm convert +shade 30x60 cockatoo.miff mask.miff\ngm composite -compose bumpmap -tile logo.png\n          cockatoo.miff mask.miff composite.miff\n\n\n\n\n\nTo composite a red, green, and blue color plane into a single composite image, try\n\n\ngm composite -compose CopyGreen green.png red.png red-green.png\ngm composite -compose CopyBlue blue.png red-green.png composite.png\n\n\n\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect only for the image that follows. All options are reset to their default values after each image is read.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-authenticate \nstring\ndecrypt image with this password\n-background \ncolor\nthe background color\n-blue-primary \nx\n,\ny\nblue chromaticity primary point\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-comment \nstring\nannotate an image with a comment\n-compose \noperator\nthe type of image composition\n-compress \ntype\nthe type of image compression\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-displace \nhorizontal scale\nx\nvertical scale\nshift image pixels as defined by a displacement map\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dissolve \npercent\ndissolve an image into another by the given percent\n-dither\napply Floyd/Steinberg error diffusion to the image\n-encoding \ntype\nspecify the text encoding\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-filter \ntype\nuse this type of filter when resizing an image\n-font \nname\nuse this font when annotating the image with text\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-gravity \ntype\ndirection primitive gravitates to when annotating the image.\n-green-primary \nx\n,\ny\ngreen chromaticity primary point\n-help\nprint usage instructions\n-interlace \ntype\nthe type of interlacing scheme\n-label \nname\nassign a label to an image\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-matte\nstore matte channel if the image has one\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-negate\nreplace every pixel with its complementary color\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\n-profile \nfilename\nadd ICM, IPTC, or generic profile to image\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\n-recolor \nmatrix\napply a color translation matrix to image channels\n-red-primary \nx\n,\ny\nred chromaticity primary point\n-render\nrender vector operations\n-repage \nwidth\nx\nheight\n+xoff+yoff[!]\nAdjust image page offsets\n-resize \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scene \nvalue\nset scene number\n-set \nattribute??? info \"\n`\nset an image attribute\n+set \nattribute\nunset an image attribute\n-sharpen \nradius\n{x\nsigma\n}\nsharpen the image\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-stegano \noffset\nhide watermark within an image\n-stereo\ncomposite two images to create a stereo anaglyph\n-strip\nremove all profiles and text attributes from the image\n-thumbnail \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image (quickly)\n-treedepth \nvalue\ntree depth for the color reduction algorithm\n-trim\ntrim an image\n-type \ntype\nthe image type\n-units \ntype\nthe units of image resolution\n-unsharp \nradius\n{x\nsigma\n}{+\namount\n}{+\nthreshold\n}\nsharpen the image with an unsharp mask operator\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n-watermark \nbrightness\nx\nsaturation\npercent brightness and saturation of a watermark\n-white-point \nx\n,\ny\nchromaticity white point\n-write \nfilename\nwrite an intermediate image [convert, composite]\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u5408\u5e76"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_1", 
            "text": "", 
            "title": "\u5408\u5e76"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_2", 
            "text": "composite - composite images together.", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_3", 
            "text": "\u6982\u8981  \u63cf\u8ff0  \u4e3e\u4f8b  \u9009\u9879", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_4", 
            "text": "gm composite  [  options ...  ]  change-image base-image  [  mask-image  ]  output-image", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_5", 
            "text": "composite composites (combines) images to create new images.  base-image is the base image and change-image contains the changes. ouput-image is the result, and normally has the same dimensions as base-image.  The optional mask-image can be used to provide opacity information for change-image when it has none or if you want a different mask. A mask image is typically grayscale and the same size as base-image. If mask-image is not grayscale, it is converted to grayscale and the resulting intensities are used as opacity information.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_6", 
            "text": "To composite an image of a cockatoo with a perch, use:  gm composite cockatoo.miff perch.ras composite.miff  To compute the difference between images in a series, use:  gm composite -compose difference series.2 series.1 difference.miff  To composite an image of a cockatoo with a perch starting at location (100,150), use:  gm composite -geometry +100+150 cockatoo.miff perch.ras composite.miff  To tile a logo across your image of a cockatoo, use  gm convert +shade 30x60 cockatoo.miff mask.miff\ngm composite -compose bumpmap -tile logo.png\n          cockatoo.miff mask.miff composite.miff  To composite a red, green, and blue color plane into a single composite image, try  gm composite -compose CopyGreen green.png red.png red-green.png\ngm composite -compose CopyBlue blue.png red-green.png composite.png", 
            "title": "\u4e3e\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/composite/#_7", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect only for the image that follows. All options are reset to their default values after each image is read.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -authenticate  string decrypt image with this password -background  color the background color -blue-primary  x , y blue chromaticity primary point -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -comment  string annotate an image with a comment -compose  operator the type of image composition -compress  type the type of image compression -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -displace  horizontal scale x vertical scale shift image pixels as defined by a displacement map -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dissolve  percent dissolve an image into another by the given percent -dither apply Floyd/Steinberg error diffusion to the image -encoding  type specify the text encoding -endian  type specify endianness (MSB, LSB, or Native) of image -filter  type use this type of filter when resizing an image -font  name use this font when annotating the image with text -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -gravity  type direction primitive gravitates to when annotating the image. -green-primary  x , y green chromaticity primary point -help print usage instructions -interlace  type the type of interlacing scheme -label  name assign a label to an image -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -matte store matte channel if the image has one -monitor show progress indication -monochrome transform the image to black and white -negate replace every pixel with its complementary color -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas -profile  filename add ICM, IPTC, or generic profile to image -quality  value JPEG/MIFF/PNG/TIFF compression level -recolor  matrix apply a color translation matrix to image channels -red-primary  x , y red chromaticity primary point -render render vector operations -repage  width x height +xoff+yoff[!] Adjust image page offsets -resize  width x height {%}{@}{!}{ }{ } resize an image -rotate  degrees { }{ } rotate the image -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scene  value set scene number -set  attribute??? info \" ` set an image attribute +set  attribute unset an image attribute -sharpen  radius {x sigma } sharpen the image -size  width x height {+offset} width and height of the image -stegano  offset hide watermark within an image -stereo composite two images to create a stereo anaglyph -strip remove all profiles and text attributes from the image -thumbnail  width x height {%}{@}{!}{ }{ } resize an image (quickly) -treedepth  value tree depth for the color reduction algorithm -trim trim an image -type  type the image type -units  type the units of image resolution -unsharp  radius {x sigma }{+ amount }{+ threshold } sharpen the image with an unsharp mask operator -verbose print detailed information about the image -version print GraphicsMagick version string -watermark  brightness x saturation percent brightness and saturation of a watermark -white-point  x , y chromaticity white point -write  filename write an intermediate image [convert, composite] For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/", 
            "text": "\u811a\u672c\u8bed\u8a00\n\n\n\u547d\u540d\n\n\nconjure - process a Magick Scripting Language (MSL) script\n\n\n\u5185\u5bb9\n\n\nSynopsis\nDescription\nOptions\nMagick Scripting Language\n\n\n\u6982\u8981\n\n\ngm conjure [ options ] script.msl [ [ options ] script.msl ] \n\n\n\u63cf\u8ff0\n\n\nThe Magick scripting language (MSL) will primarily benefit those that want to accomplish custom image processing tasks but do not wish to program, or those that do not have access to a Perl interpreter or a compiler. The interpreter is called conjure and here is an example script:\n\n\n    \n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n    \nimage\n \nsize=\n400x400\n \n\n      \nread\n \nfilename=\nimage.gif\n \n/\n\n      \nget\n \nwidth=\nbase-width\n \nheight=\nbase-height\n \n/\n\n      \nresize\n \ngeometry=\n%[dimensions]\n \n/\n\n      \nget\n \nwidth=\nwidth\n \nheight=\nheight\n \n/\n\n      \nprint\n \noutput=\n\n        \nImage sized from %[base-width]x%[base-height]\n\n\n         to %[width]x%[height].\\n\n \n/\n\n      \nwrite\n \nfilename=\nimage.png\n \n/\n\n    \n/image\n\n\n\n\n\ninvoked with\n\n\n    gm conjure -dimensions 400x400 incantation.msl\n\n\n\n\nAll operations will closely follow the key/value pairs defined in PerlMagick, unless otherwise noted.\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect until it is explicitly changed by specifying the option again with a different effect, or if it is changed by a statement in the scripting language.\n\n\nYou can define your own keyword/value pairs on the command line. The script can then use this information when setting values by including %[keyword] in the string. For example, if you included \"-dimensions 400x400\" on the command line, as illustrated above, then any string containing \"%[dimensions]\" would have 400x400 substituted. The \"%[string]\" can be used either an entire string, such as geometry=\"%[dimensions]\" or as a part of a string such as filename=\"%[basename].png\".\n\n\nThe keyword can be any string except for the following reserved strings (in any upper, lower, or mixed case variant): debug, help, and verbose, whose usage is described below.\n\n\nThe value can be any string. If either the keyword or the value contains white space or any symbols that have special meanings to your shell such as \"#\", \"|\", or \"%\", enclose the string in quotation marks or use \"\\\" to escape the white space and special symbols.\n\n\nKeywords and values are case dependent. \"Key\", \"key\", and \"KEY\" would be three different keywords.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-help\nprint usage instructions\n-log \nstring\nSpecify format for debug log\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n\u9b54\u6cd5\u811a\u672c\u8bed\u8a00\n\n\nThe Magick Scripting Language (MSL) presently defines the following elements and their attributes:\n\n\nimage\n\nbackground, color, id, size\nDefine a new image object. \n/image\n destroys it. Because of this, if you wish to reference multiple \nsubimages\n (aka pages or layers), you can embed one image element inside of another. For example:\n    \nimage\n\n    \nread\n \nfilename=\ninput.png\n \n/\n\n    \nget\n \nwidth=\nbase-width\n \nheight=\nbase-height\n \n/\n\n    \nimage\n \nheight=\nbase-height\n \nwidth=\nbase-width\n\n    \nimage\n \n/\n\n    \nwrite\n \nfilename=\noutput.mng\n \n/\n\n    \n/image\n\n    \nimage\n \nsize=\n400x400\n \n/\n\n\ngroup\n\nDefine a new group of image objects. By default, images are only valid for the life of their \nimage\nelement.\n    \nimage\n   -- creates the image\n    .....     -- do stuff with it\n    \n/image\n  -- dispose of the image\nHowever, in a group, all images in that group will stay around for the life of the group:\n    \ngroup\n                           -- start a group\n        \nimage\n                       -- create an image\n        ....                          -- do stuff\n        \n/image\n                      -- NOOP\n        \nimage\n                       -- create another image\n        ....                          -- do more stuff\n        \n/image\n                      -- NOOP\n        \nwrite\n \nfilename=\nimage.mng\n \n/\n  -- output\n    \n/group\n                          -- dispose of both images\n\nread\n\nfilename\nRead a new image from a disk file.\n    \nread\n \nfilename=\nimage.gif\n \n/\n\nTo read two images use\n    \nread\n \nfilename=\nimage.gif\n \n/\n\n    \nread\n \nfilename=\nimage.png /\n\n\nwrite\n\n\nfilename\n\n\nWrite the image(s) to disk, either as a single multiple-image file or multiple ones if necessary.\n\n\n     \nwrite filename=image.tiff\n \n/\n\n\nget\n\nGet any attribute recognized by PerlMagick\ns GetAttribute() and stores it as an image attribute for later use. Currently only width and height are supported.\n    \nget\n \nwidth=\nbase-width\n \nheight=\nbase-height\n \n/\n\n    \nprint\n \noutput=\nImage size is %[base-width]x%[base-height].\\n\n \n/\n\n\nset\n\nbackground, bordercolor, clip-mask, colorspace, density, magick, mattecolor, opacity. Set an attribute recognized by PerlMagick\ns GetAttribute().\n\nprofile\n\n[profilename]\nRead one or more IPTC, ICC or generic profiles from file and assign to image\n    \nprofile\n \niptc=\nprofile.iptc\n \ngeneric=\ngeneric.dat\n \n/\n\nTo remove a specified profile use \n!\n as the filename eg\n    \nprofile\n \nicm=\n!\n \niptc=\nprofile.iptc\n \n/\n\n\nborder\n\nfill, geometry, height, width\n\nblur\n\nradius, sigma\n\ncharcoal\n\nradius, sigma\n\nchop\n\ngeometry, height, width, x, y\n\ncrop\n\ngeometry, height, width, x, y\n\ncomposite\n\ncompose, geometry, gravity, image, x, y\n    \n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n    \ngroup\n\n        \nimage\n \nid=\nimage_01\n\n            \nread\n \nfilename=\ncloud3.gif\n/\n\n            \nresize\n \ngeometry=\n250x90\n/\n\n        \n/image\n\n        \nimage\n \nid=\nimage_02\n\n            \nread\n \nfilename=\ncloud4.gif\n/\n\n            \nresize\n \ngeometry=\n190x100\n/\n\n        \n/image\n\n        \nimage\n\n            \nread\n \nfilename=\nbackground.jpg\n/\n\n            \ncomposite\n \nimage=\nimage_01\n \ngeometry=\n+740+470\n/\n\n            \ncomposite\n \nimage=\nimage_02\n \ngeometry=\n+390+415\n/\n\n        \n/image\n\n        \nwrite\n \nfilename=\nresult.png\n/\n\n    \n/group\n\n\ndespeckle\n\n\nemboss\n\nradius, sigma\n\nenhance\n\n\nequalize\n\n\nedge\n\nradius\n\nflip\n\n\nflop\n\n\nframe\n\nfill, geometry, height, width, x, y, inner, outer\n\nflatten\n\n\nget\n\nheight, width\n\ngamma\n\nred, green, blue\n\nimage\n\nbackground, color, id, size\n\nimplode\n\namount\n\nmagnify\n\n\nminify\n\n\nmedianfilter\n\nradius\n\nnormalize\n\n\noilpaint\n\nradius\n\nprint\n\noutput\n\nprofile\n\n[profilename]\n\nread\n\n\nresize\n\nblur, filter, geometry, height, width\n\nroll\n\ngeometry, x, y\n\nrotate\n\ndegrees\n\nreducenoise\n\nradius\n\nsample\n\ngeometry, height, width\n\nscale\n\ngeometry, height, width\n\nsharpen\n\nradius, sigma\n\nshave\n\ngeometry, height, width\n\nshear\n\nx, y\n\nsolarize\n\nthreshold\n\nspread\n\nradius\n\nstegano\n\nimage\n\nstereo\n\nimage\n\nswirl\n\ndegrees\n\ntexture\n\nimage\n\nthreshold\n\nthreshold\n\ntransparent\n\ncolor\n\ntrim", 
            "title": "\u811a\u672c"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_1", 
            "text": "", 
            "title": "\u811a\u672c\u8bed\u8a00"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_2", 
            "text": "conjure - process a Magick Scripting Language (MSL) script", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_3", 
            "text": "Synopsis\nDescription\nOptions\nMagick Scripting Language", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_4", 
            "text": "gm conjure [ options ] script.msl [ [ options ] script.msl ]", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_5", 
            "text": "The Magick scripting language (MSL) will primarily benefit those that want to accomplish custom image processing tasks but do not wish to program, or those that do not have access to a Perl interpreter or a compiler. The interpreter is called conjure and here is an example script:       ?xml version= 1.0  encoding= UTF-8 ? \n     image   size= 400x400   \n       read   filename= image.gif   / \n       get   width= base-width   height= base-height   / \n       resize   geometry= %[dimensions]   / \n       get   width= width   height= height   / \n       print   output= \n         Image sized from %[base-width]x%[base-height]           to %[width]x%[height].\\n   / \n       write   filename= image.png   / \n     /image   invoked with      gm conjure -dimensions 400x400 incantation.msl  All operations will closely follow the key/value pairs defined in PerlMagick, unless otherwise noted.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_6", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect until it is explicitly changed by specifying the option again with a different effect, or if it is changed by a statement in the scripting language.  You can define your own keyword/value pairs on the command line. The script can then use this information when setting values by including %[keyword] in the string. For example, if you included \"-dimensions 400x400\" on the command line, as illustrated above, then any string containing \"%[dimensions]\" would have 400x400 substituted. The \"%[string]\" can be used either an entire string, such as geometry=\"%[dimensions]\" or as a part of a string such as filename=\"%[basename].png\".  The keyword can be any string except for the following reserved strings (in any upper, lower, or mixed case variant): debug, help, and verbose, whose usage is described below.  The value can be any string. If either the keyword or the value contains white space or any symbols that have special meanings to your shell such as \"#\", \"|\", or \"%\", enclose the string in quotation marks or use \"\\\" to escape the white space and special symbols.  Keywords and values are case dependent. \"Key\", \"key\", and \"KEY\" would be three different keywords.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -help print usage instructions -log  string Specify format for debug log -verbose print detailed information about the image -version print GraphicsMagick version string", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/conjure/#_7", 
            "text": "The Magick Scripting Language (MSL) presently defines the following elements and their attributes:  image \nbackground, color, id, size\nDefine a new image object.  /image  destroys it. Because of this, if you wish to reference multiple  subimages  (aka pages or layers), you can embed one image element inside of another. For example:\n     image \n     read   filename= input.png   / \n     get   width= base-width   height= base-height   / \n     image   height= base-height   width= base-width \n     image   / \n     write   filename= output.mng   / \n     /image \n     image   size= 400x400   /  group \nDefine a new group of image objects. By default, images are only valid for the life of their  image element.\n     image    -- creates the image\n    .....     -- do stuff with it\n     /image   -- dispose of the image\nHowever, in a group, all images in that group will stay around for the life of the group:\n     group                            -- start a group\n         image                        -- create an image\n        ....                          -- do stuff\n         /image                       -- NOOP\n         image                        -- create another image\n        ....                          -- do more stuff\n         /image                       -- NOOP\n         write   filename= image.mng   /   -- output\n     /group                           -- dispose of both images read \nfilename\nRead a new image from a disk file.\n     read   filename= image.gif   / \nTo read two images use\n     read   filename= image.gif   / \n     read   filename= image.png /  write  filename  Write the image(s) to disk, either as a single multiple-image file or multiple ones if necessary.        write filename=image.tiff   /  get \nGet any attribute recognized by PerlMagick s GetAttribute() and stores it as an image attribute for later use. Currently only width and height are supported.\n     get   width= base-width   height= base-height   / \n     print   output= Image size is %[base-width]x%[base-height].\\n   /  set \nbackground, bordercolor, clip-mask, colorspace, density, magick, mattecolor, opacity. Set an attribute recognized by PerlMagick s GetAttribute(). profile \n[profilename]\nRead one or more IPTC, ICC or generic profiles from file and assign to image\n     profile   iptc= profile.iptc   generic= generic.dat   / \nTo remove a specified profile use  !  as the filename eg\n     profile   icm= !   iptc= profile.iptc   /  border \nfill, geometry, height, width blur \nradius, sigma charcoal \nradius, sigma chop \ngeometry, height, width, x, y crop \ngeometry, height, width, x, y composite \ncompose, geometry, gravity, image, x, y\n     ?xml version= 1.0  encoding= UTF-8 ? \n     group \n         image   id= image_01 \n             read   filename= cloud3.gif / \n             resize   geometry= 250x90 / \n         /image \n         image   id= image_02 \n             read   filename= cloud4.gif / \n             resize   geometry= 190x100 / \n         /image \n         image \n             read   filename= background.jpg / \n             composite   image= image_01   geometry= +740+470 / \n             composite   image= image_02   geometry= +390+415 / \n         /image \n         write   filename= result.png / \n     /group  despeckle  emboss \nradius, sigma enhance  equalize  edge \nradius flip  flop  frame \nfill, geometry, height, width, x, y, inner, outer flatten  get \nheight, width gamma \nred, green, blue image \nbackground, color, id, size implode \namount magnify  minify  medianfilter \nradius normalize  oilpaint \nradius print \noutput profile \n[profilename] read  resize \nblur, filter, geometry, height, width roll \ngeometry, x, y rotate \ndegrees reducenoise \nradius sample \ngeometry, height, width scale \ngeometry, height, width sharpen \nradius, sigma shave \ngeometry, height, width shear \nx, y solarize \nthreshold spread \nradius stegano \nimage stereo \nimage swirl \ndegrees texture \nimage threshold \nthreshold transparent \ncolor trim", 
            "title": "\u9b54\u6cd5\u811a\u672c\u8bed\u8a00"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/", 
            "text": "\u8f6c\u6362\n\n\n\u547d\u540d\n\n\nconvert - convert an image or sequence of images \n\n\n\u5185\u5bb9\n\n\nSynopsis\nDescription\nExamples\nOptions\n\n\n\u6982\u8981\n\n\ngm convert [ options ... ] input_file [ options ... ] output_file \n\n\n\u63cf\u8ff0\n\n\nConvert converts an input file using one image format to an output file with a differing image format. In addition, various types of image processing can be performed on the converted image during the conversion process. Convert recognizes the image formats listed in GraphicsMagick(1). \n\n\nBack to Contents  \n\n\n\u793a\u4f8b\n\n\nTo make a thumbnail of a JPEG image, use:\n\n\ngm convert -size 120x120 cockatoo.jpg -resize 120x120 +profile \n*\n thumbnail.jpg\n\n\n\n\n\nIn this example, '-size 120x120' gives a hint to the JPEG decoder that the image is going to be downscaled to 120x120, allowing it to run faster by avoiding returning full-resolution images to GraphicsMagick for the subsequent resizing operation. The '-resize 120x120' specifies the desired dimensions of the output image. It will be scaled so its largest dimension is 120 pixels. The '+profile \"*\"' removes any ICM, EXIF, IPTC, or other profiles that might be present in the input and aren't needed in the thumbnail.\nTo convert a MIFF image of a cockatoo to a SUN raster image, use:\n\n\ngm convert cockatoo.miff sun:cockatoo.ras\n\n\n\n\n\nTo convert a multi-page PostScript document to individual FAX pages, use:\n\n\ngm convert -monochrome document.ps fax:page\n\n\n\n\n\nTo convert a TIFF image to a PostScript A4 page with the image in the lower left-hand corner, use:\n\n\ngm convert -page A4+0+0 image.tiff document.ps\n\n\n\n\n\nTo convert a raw Gray image with a 128 byte header to a portable graymap, use:\n\n\ngm convert -depth 8 -size 768x512+128 gray:raw image.pgm\n\n\n\n\n\nIn this example, \"raw\" is the input file. Its format is \"gray\" and it has the dimensions and number of header bytes specified by the -size option and the sample depth specified by the -depth option. The output file is \"image.pgm\". The suffix \".pgm\" specifies its format.\n\n\nTo convert a Photo CD image to a TIFF image, use:\n\n\ngm convert -size 1536x1024 img0009.pcd image.tiff\ngm convert img0009.pcd[4] image.tiff\n\n\n\n\n\nTo create a visual image directory of all your JPEG images, use:\n\n\ngm convert \nvid:*.jpg\n directory.miff\n\n\n\n\n\nTo annotate an image with blue text using font 12x24 at position (100,100), use:\n\n\ngm convert -font helvetica -fill blue -draw \ntext 100,100 Cockatoo\n\n        bird.jpg bird.miff\n\n\n\n\n\nTo tile a 640x480 image with a JPEG texture with bumps use:\n\n\ngm convert -size 640x480 tile:bumps.jpg tiled.png\n\n\n\n\n\nTo surround an icon with an ornamental border to use with Mosaic(1), use:\n\n\ngm convert -mattecolor \n#697B8F\n -frame 6x6 bird.jpg icon.png\n\n\n\n\n\nTo create a MNG animation from a DNA molecule sequence, use:\n\n\ngm convert -delay 20 dna.* dna.mng\n\n\n\n\n\nBack to Contents  \n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect for the set of images that follows, until the set is terminated by the appearance of any option or -noop. Some options only affect the decoding of images and others only the encoding. The latter can appear after the final group of input images.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-adjoin\njoin images into a single multi-image file\n-affine \nmatrix\ndrawing transform matrix\n-antialias\nremove pixel aliasing\n-append\nappend a set of images\n-asc-cdl \nspec\napply ASC CDL color transform\n-authenticate \nstring\ndecrypt image with this password\n-auto-orient\norient (rotate) image so it is upright\n-average\naverage a set of images\n-background \ncolor\nthe background color\n-black-threshold red[,green][,blue][,opacity]\npixels below the threshold become black\n-blue-primary \nx\n,\ny\nblue chromaticity primary point\n-blur \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\n-border \nwidth\nx\nheight\nsurround the image with a border of color\n-bordercolor \ncolor\nthe border color\n-box \ncolor\nset the color of the annotation bounding box\n-channel \ntype\nthe type of channel\n-charcoal \nfactor\nsimulate a charcoal drawing\n-chop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\nremove pixels from the interior of an image\n-clip\napply the clipping path, if one is present\n-coalesce\nmerge a sequence of images\n-colorize \nvalue\ncolorize the image with the pen color\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-comment \nstring\nannotate an image with a comment\n-compose \noperator\nthe type of image composition\n-compress \ntype\nthe type of image compression\n-contrast\nenhance or reduce the image contrast\n-convolve \nkernel\nconvolve image with the specified convolution kernel\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\n-cycle \namount\ndisplace image colormap by amount\n-debug \nevents\nenable debug printout\n-deconstruct\nbreak down an image sequence into constituent parts\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-delay \n1/100ths of a second\ndisplay the next image after pausing\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-despeckle\nreduce the speckles within an image\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dither\napply Floyd/Steinberg error diffusion to the image\n-draw \nstring\nannotate an image with one or more graphic primitives\n-edge \nradius\ndetect edges within an image\n-emboss \nradius\nemboss an image\n-encoding \ntype\nspecify the text encoding\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-enhance\napply a digital filter to enhance a noisy image\n-equalize\nperform histogram equalization to the image\n-extent \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\ncomposite image on background color canvas image\n-fill \ncolor\ncolor to use when filling a graphic primitive\n-filter \ntype\nuse this type of filter when resizing an image\n-flatten\nflatten a sequence of images\n-flip\ncreate a \"mirror image\"\n-flop\ncreate a \"mirror image\"\n-font \nname\nuse this font when annotating the image with text\n-format \nstring\noutput formatted image characteristics\n-frame \nwidth\nx\nheight\n+\nouter bevel width\n+\ninner bevel width\nsurround the image with an ornamental border\n-fuzz \ndistance\n{%}\ncolors within this Euclidean distance are considered equal\n-gamma \nvalue\nlevel of gamma correction\n-gaussian \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-gravity \ntype\ndirection primitive gravitates to when annotating the image.\n-green-primary \nx\n,\ny\ngreen chromaticity primary point\n-hald-clut \nclut\napply a Hald CLUT to the image\n-help\nprint usage instructions\n-implode \nfactor\nimplode image pixels about the center\n-intent \ntype\nuse this type of rendering intent when managing the image color\n-interlace \ntype\nthe type of interlacing scheme\n-label \nname\nassign a label to an image\n-lat \nwidth\nx\nheight\n{+-}\noffset\n{%}\nperform local adaptive thresholding\n-level \nblack_point\n{,\ngamma\n}{,\nwhite_point\n}{%}\nadjust the level of image contrast\n-limit \ntype\n \nvalue\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-list \ntype\nthe type of list\n-log \nstring\nSpecify format for debug log\n-loop \niterations\nadd Netscape loop extension to your GIF animation\n-magnify\nmagnify the image\n-map \nfilename\nchoose a particular set of colors from this image\n-mask \nfilename\nSpecify a clipping mask\n-matte\nstore matte channel if the image has one\n-mattecolor \ncolor\nspecify the color to be used with the -frame option\n-median \nradius\napply a median filter to the image\n-minify \nfactor\nminify the image\n-modulate brightness[,saturation[,hue]]\nvary the brightness, saturation, and hue of an image\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-morph \nframes\nmorphs an image sequence\n-mosaic\ncreate a mosaic from an image or an image sequence\n-motion-blur \nradius\n{x\nsigma\n}{+angle}\nSimulate motion blur\n-negate\nreplace every pixel with its complementary color\n-noise \nradius|type\nadd or reduce noise in an image\n-noop\nNOOP (no option)\n-normalize\ntransform image to span the full range of color values\n-opaque \ncolor\nhange this color to the pen color within the image\n-operator channel operator rvalue[%]\napply a mathematical, bitwise, or value operator to an image channel\n-ordered-dither \nchanneltype\n \nNxN\nordered dither the image\n-orient \norientation\nSet the image orientation attribute\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\n-paint \nradius\nsimulate an oil painting\n-pen \ncolor\n(This option has been replaced by the -fill option)\n-ping\nefficiently determine image characteristics\n-pointsize \nvalue\npointsize of the PostScript, X11, or TrueType font\n-preview \ntype\nimage preview type\n-process \ncommand\nprocess a sequence of images using a process module\n-profile \nfilename\nadd ICM, IPTC, or generic profile to image\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\n-raise \nwidth\nx\nheight\nlighten or darken image edges\n-random-threshold \nchanneltype\n \nLOWxHIGH\nrandom threshold the image\n-recolor \nmatrix\napply a color translation matrix to image channels\n-red-primary \nx\n,\ny\nred chromaticity primary point\n-region \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\napply options to a portion of the image\n-render\nrender vector operations\n-repage \nwidth\nx\nheight\n+xoff+yoff[!]\nAdjust image page offsets\n-resample \nhorizontal\nx\nvertical\nResample image to specified horizontal and vertical resolution\n-resize \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image\n-roll {+-}\nx\n{+-}\ny\nroll an image vertically or horizontally\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sample \ngeometry\nscale image using pixel sampling\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scale \ngeometry\nscale the image.\n-scene \nvalue\nset scene number\n-set \nattribute\n \nvalue\nset an image attribute\n +set \nattribute\nunset an image attribute\n-segment \ncluster threshold\nx\nsmoothing threshold\nsegment an image\n-shade \nazimuth\nx\nelevation\nshade the image using a distant light source\n-sharpen \nradius\n{x\nsigma\n}\nsharpen the image\n-shave \nwidth\nx\nheight\n{%}\nshave pixels from the image edges\n-shear \nx degrees\nx\ny degrees\nshear the image along the X or Y axis\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-solarize \nfactor\nnegate all pixels above the threshold level\n-spread \namount\ndisplace image pixels by a random amount\n-strip\nremove all profiles and text attributes from the image\n-stroke \ncolor\ncolor to use when stroking a graphic primitive\n-strokewidth \nvalue\nset the stroke width\n-swirl \ndegrees\nswirl image pixels about the center\n-texture \nfilename\nname of texture to tile onto the image background\n-threshold \nvalue\n{%}\nthreshold the image\n-thumbnail \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image (quickly)\n-tile \nfilename\ntile image when filling a graphic primitive\n-transform\ntransform the image\n-transparent \ncolor\nmake this color transparent within the image\n-treedepth \nvalue\ntree depth for the color reduction algorithm\n-trim\ntrim an image\n-type \ntype\nthe image type\n-units \ntype\nthe units of image resolution\n-unsharp \nradius\n{x\nsigma\n}{+\namount\n}{+\nthreshold\n}\nsharpen the image with an unsharp mask operator\n-use-pixmap\nuse the pixmap\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n-view \nstring\nFlashPix viewing parameters\n-virtual-pixel \nmethod\nspecify contents of \"virtual pixels\"\n-wave \namplitude\nx\nwavelength\nalter an image along a sine wave\n-white-point \nx\n,\ny\nchromaticity white point\n-white-threshold red[,green][,blue][,opacity]\npixels above the threshold become white\n-write \nfilename\nwrite an intermediate image [convert, composite]\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u8f6c\u6362"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_1", 
            "text": "", 
            "title": "\u8f6c\u6362"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_2", 
            "text": "convert - convert an image or sequence of images", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_3", 
            "text": "Synopsis\nDescription\nExamples\nOptions", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_4", 
            "text": "gm convert [ options ... ] input_file [ options ... ] output_file", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_5", 
            "text": "Convert converts an input file using one image format to an output file with a differing image format. In addition, various types of image processing can be performed on the converted image during the conversion process. Convert recognizes the image formats listed in GraphicsMagick(1).   Back to Contents", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_6", 
            "text": "To make a thumbnail of a JPEG image, use:  gm convert -size 120x120 cockatoo.jpg -resize 120x120 +profile  *  thumbnail.jpg  In this example, '-size 120x120' gives a hint to the JPEG decoder that the image is going to be downscaled to 120x120, allowing it to run faster by avoiding returning full-resolution images to GraphicsMagick for the subsequent resizing operation. The '-resize 120x120' specifies the desired dimensions of the output image. It will be scaled so its largest dimension is 120 pixels. The '+profile \"*\"' removes any ICM, EXIF, IPTC, or other profiles that might be present in the input and aren't needed in the thumbnail.\nTo convert a MIFF image of a cockatoo to a SUN raster image, use:  gm convert cockatoo.miff sun:cockatoo.ras  To convert a multi-page PostScript document to individual FAX pages, use:  gm convert -monochrome document.ps fax:page  To convert a TIFF image to a PostScript A4 page with the image in the lower left-hand corner, use:  gm convert -page A4+0+0 image.tiff document.ps  To convert a raw Gray image with a 128 byte header to a portable graymap, use:  gm convert -depth 8 -size 768x512+128 gray:raw image.pgm  In this example, \"raw\" is the input file. Its format is \"gray\" and it has the dimensions and number of header bytes specified by the -size option and the sample depth specified by the -depth option. The output file is \"image.pgm\". The suffix \".pgm\" specifies its format.  To convert a Photo CD image to a TIFF image, use:  gm convert -size 1536x1024 img0009.pcd image.tiff\ngm convert img0009.pcd[4] image.tiff  To create a visual image directory of all your JPEG images, use:  gm convert  vid:*.jpg  directory.miff  To annotate an image with blue text using font 12x24 at position (100,100), use:  gm convert -font helvetica -fill blue -draw  text 100,100 Cockatoo \n        bird.jpg bird.miff  To tile a 640x480 image with a JPEG texture with bumps use:  gm convert -size 640x480 tile:bumps.jpg tiled.png  To surround an icon with an ornamental border to use with Mosaic(1), use:  gm convert -mattecolor  #697B8F  -frame 6x6 bird.jpg icon.png  To create a MNG animation from a DNA molecule sequence, use:  gm convert -delay 20 dna.* dna.mng  Back to Contents", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/convert/#_7", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect for the set of images that follows, until the set is terminated by the appearance of any option or -noop. Some options only affect the decoding of images and others only the encoding. The latter can appear after the final group of input images.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -adjoin join images into a single multi-image file -affine  matrix drawing transform matrix -antialias remove pixel aliasing -append append a set of images -asc-cdl  spec apply ASC CDL color transform -authenticate  string decrypt image with this password -auto-orient orient (rotate) image so it is upright -average average a set of images -background  color the background color -black-threshold red[,green][,blue][,opacity] pixels below the threshold become black -blue-primary  x , y blue chromaticity primary point -blur  radius {x sigma } blur the image with a Gaussian operator -border  width x height surround the image with a border of color -bordercolor  color the border color -box  color set the color of the annotation bounding box -channel  type the type of channel -charcoal  factor simulate a charcoal drawing -chop  width x height {+-} x {+-} y {%} remove pixels from the interior of an image -clip apply the clipping path, if one is present -coalesce merge a sequence of images -colorize  value colorize the image with the pen color -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -comment  string annotate an image with a comment -compose  operator the type of image composition -compress  type the type of image compression -contrast enhance or reduce the image contrast -convolve  kernel convolve image with the specified convolution kernel -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image -cycle  amount displace image colormap by amount -debug  events enable debug printout -deconstruct break down an image sequence into constituent parts -define  key {= value },... add coder/decoder specific options -delay  1/100ths of a second display the next image after pausing -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -despeckle reduce the speckles within an image -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dither apply Floyd/Steinberg error diffusion to the image -draw  string annotate an image with one or more graphic primitives -edge  radius detect edges within an image -emboss  radius emboss an image -encoding  type specify the text encoding -endian  type specify endianness (MSB, LSB, or Native) of image -enhance apply a digital filter to enhance a noisy image -equalize perform histogram equalization to the image -extent  width x height {+-} x {+-} y composite image on background color canvas image -fill  color color to use when filling a graphic primitive -filter  type use this type of filter when resizing an image -flatten flatten a sequence of images -flip create a \"mirror image\" -flop create a \"mirror image\" -font  name use this font when annotating the image with text -format  string output formatted image characteristics -frame  width x height + outer bevel width + inner bevel width surround the image with an ornamental border -fuzz  distance {%} colors within this Euclidean distance are considered equal -gamma  value level of gamma correction -gaussian  radius {x sigma } blur the image with a Gaussian operator -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -gravity  type direction primitive gravitates to when annotating the image. -green-primary  x , y green chromaticity primary point -hald-clut  clut apply a Hald CLUT to the image -help print usage instructions -implode  factor implode image pixels about the center -intent  type use this type of rendering intent when managing the image color -interlace  type the type of interlacing scheme -label  name assign a label to an image -lat  width x height {+-} offset {%} perform local adaptive thresholding -level  black_point {, gamma }{, white_point }{%} adjust the level of image contrast -limit  type   value Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -list  type the type of list -log  string Specify format for debug log -loop  iterations add Netscape loop extension to your GIF animation -magnify magnify the image -map  filename choose a particular set of colors from this image -mask  filename Specify a clipping mask -matte store matte channel if the image has one -mattecolor  color specify the color to be used with the -frame option -median  radius apply a median filter to the image -minify  factor minify the image -modulate brightness[,saturation[,hue]] vary the brightness, saturation, and hue of an image -monitor show progress indication -monochrome transform the image to black and white -morph  frames morphs an image sequence -mosaic create a mosaic from an image or an image sequence -motion-blur  radius {x sigma }{+angle} Simulate motion blur -negate replace every pixel with its complementary color -noise  radius|type add or reduce noise in an image -noop NOOP (no option) -normalize transform image to span the full range of color values -opaque  color hange this color to the pen color within the image -operator channel operator rvalue[%] apply a mathematical, bitwise, or value operator to an image channel -ordered-dither  channeltype   NxN ordered dither the image -orient  orientation Set the image orientation attribute -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas -paint  radius simulate an oil painting -pen  color (This option has been replaced by the -fill option) -ping efficiently determine image characteristics -pointsize  value pointsize of the PostScript, X11, or TrueType font -preview  type image preview type -process  command process a sequence of images using a process module -profile  filename add ICM, IPTC, or generic profile to image -quality  value JPEG/MIFF/PNG/TIFF compression level -raise  width x height lighten or darken image edges -random-threshold  channeltype   LOWxHIGH random threshold the image -recolor  matrix apply a color translation matrix to image channels -red-primary  x , y red chromaticity primary point -region  width x height {+-} x {+-} y apply options to a portion of the image -render render vector operations -repage  width x height +xoff+yoff[!] Adjust image page offsets -resample  horizontal x vertical Resample image to specified horizontal and vertical resolution -resize  width x height {%}{@}{!}{ }{ } resize an image -roll {+-} x {+-} y roll an image vertically or horizontally -rotate  degrees { }{ } rotate the image -sample  geometry scale image using pixel sampling -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scale  geometry scale the image. -scene  value set scene number -set  attribute   value set an image attribute  +set  attribute unset an image attribute -segment  cluster threshold x smoothing threshold segment an image -shade  azimuth x elevation shade the image using a distant light source -sharpen  radius {x sigma } sharpen the image -shave  width x height {%} shave pixels from the image edges -shear  x degrees x y degrees shear the image along the X or Y axis -size  width x height {+offset} width and height of the image -solarize  factor negate all pixels above the threshold level -spread  amount displace image pixels by a random amount -strip remove all profiles and text attributes from the image -stroke  color color to use when stroking a graphic primitive -strokewidth  value set the stroke width -swirl  degrees swirl image pixels about the center -texture  filename name of texture to tile onto the image background -threshold  value {%} threshold the image -thumbnail  width x height {%}{@}{!}{ }{ } resize an image (quickly) -tile  filename tile image when filling a graphic primitive -transform transform the image -transparent  color make this color transparent within the image -treedepth  value tree depth for the color reduction algorithm -trim trim an image -type  type the image type -units  type the units of image resolution -unsharp  radius {x sigma }{+ amount }{+ threshold } sharpen the image with an unsharp mask operator -use-pixmap use the pixmap -verbose print detailed information about the image -version print GraphicsMagick version string -view  string FlashPix viewing parameters -virtual-pixel  method specify contents of \"virtual pixels\" -wave  amplitude x wavelength alter an image along a sine wave -white-point  x , y chromaticity white point -white-threshold red[,green][,blue][,opacity] pixels above the threshold become white -write  filename write an intermediate image [convert, composite] For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/", 
            "text": "\u663e\u793a\n\n\n\u547d\u540d\n\n\ndisplay - display an image on any workstation running X \n\n\n\u5185\u5bb9\n\n\n\n\nSynopsis\n\n\nDescription\n\n\nExamples\n\n\nOptions\n\n\nMouse Buttons\n\n\nCommand Widget\n\n\nKeyboard Accelerators\n\n\nX Resources\n\n\nImage Loading\n\n\nVisual Image Directory\n\n\nImage Cutting\n\n\nImage Copying\n\n\nImage Pasting\n\n\nImage Cropping\n\n\nImage Chopping\n\n\nImage Rotation\n\n\nImage Segmentation\n\n\nImage Annotation\n\n\nImage Compositing\n\n\nColor Editing\n\n\nMatte (Transparent Channel) Editing\n\n\nImage Drawing\n\n\nRegion of Interest\n\n\nImage Panning\n\n\nUser Preferences\n\n\n\n\n\u6982\u8981\n\n\ngm display [ options ...] file [options...]file\n\n\n\u63cf\u8ff0\n\n\nDisplay is a machine architecture independent image processing and display program. It can display an image on any workstation screen running an X server. Display can read and write many of the more popular image formats (e.g. JPEG, TIFF, PNM, Photo CD, etc.).\n\n\nWith display, you can perform these functions on an image:\n\n\n\n\nload an image from a file\n\n\ndisplay the next image\n\n\ndisplay the former image\n\n\ndisplay a sequence of images as a slide show\n\n\nwrite the image to a file\n\n\nprint the image to a PostScript printer\n\n\ndelete the image file\n\n\ncreate a Visual Image Directory\n\n\nselect the image to display by its thumbnail rather than name\n\n\nundo last image transformation\n\n\ncopy a region of the image\n\n\npaste a region to the image\n\n\nrestore the image to its original size\n\n\nrefresh the image\n\n\nhalf the image size\n\n\ndouble the image size\n\n\nresize the image\n\n\ncrop the image\n\n\ncut the image\n\n\nflop image in the horizontal direction\n\n\nflip image in the vertical direction\n\n\nrotate the image 90 degrees clockwise\n\n\nrotate the image 90 degrees counter-clockwise\n\n\nrotate the image\n\n\nshear the image\n\n\nroll the image\n\n\ntrim the image edges\n\n\ninvert the colors of the image\n\n\nvary the color brightness\n\n\nvary the color saturation\n\n\nvary the image hue\n\n\ngamma correct the image\n\n\nsharpen the image contrast\n\n\ndull the image contrast\n\n\nperform histogram equalization on the image\n\n\nperform histogram normalization on the image\n\n\nnegate the image colors\n\n\nconvert the image to grayscale\n\n\nset the maximum number of unique colors in the image\n\n\nreduce the speckles within an image\n\n\neliminate peak noise from an image\n\n\ndetect edges within the image\n\n\nemboss an image\n\n\nsegment the image by color\n\n\nsimulate an oil painting\n\n\nsimulate a charcoal drawing\n\n\nannotate the image with text\n\n\ndraw on the image\n\n\nedit an image pixel color\n\n\nedit the image matte information\n\n\ncomposite an image with another\n\n\nadd a border to the image\n\n\nsurround image with an ornamental border\n\n\napply image processing techniques to a region of interest\n\n\ndisplay information about the image\n\n\nzoom a portion of the image\n\n\nshow a histogram of the image\n\n\ndisplay image to background of a window\n\n\nset user preferences\n\n\ndisplay information about this program\n\n\ndiscard all images and exit program\n\n\nchange the level of magnification\n\n\ndisplay images specified by a World Wide Web (WWW) uniform resource locator (URL)\n\n\n\n\n\u793a\u4f8b\n\n\nTo scale an image of a cockatoo to exactly 640 pixels in width and 480 pixels in height and position the window at location (200,200), use:\n\n\ngm display -geometry 640x480+200+200! cockatoo.miff\n\n\n\n\n\nTo display an image of a cockatoo without a border centered on a backdrop, use:\n\n\ngm display +borderwidth -backdrop cockatoo.miff\n\n\n\n\n\nTo tile a slate texture onto the root window, use:\n\n\ngm display -size 1280x1024 -window root slate.png\n\n\n\n\n\nTo display a visual image directory of all your JPEG images, use:\n\n\ngm\n \ndisplay\n \nvid:- .jpg\n\n\n\n\n\n\nTo display a MAP image that is 640 pixels in width and 480 pixels in height with 256 colors, use:\n\n\ngm display -size 640x480+256 cockatoo.map\n\n\n\n\n\nTo display an image of a cockatoo specified with a World Wide Web (WWW) uniform resource locator (URL), use:\n\n\ngm display ftp://wizards.dupont.com/images/cockatoo.jpg\n\n\n\n\n\nTo display histogram of an image, use:\n\n\ngm\n \ngm\n \nconvert\n \nfile\n.\njpg\n \nHISTOGRAM\n:-\n \n|\n \ngm\n \ndisplay\n \n-\n\n\n\n\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect until it is explicitly changed by specifying the option again with a different effect. For example to display three images, the first with 32 colors, the second with an unlimited number of colors, and the third with only 16 colors, use:\n\n\ngm display -colors 32 cockatoo.miff -noop duck.miff -colors 16 macaw.miff\n\n\n\n\n\nDisplay options can appear on the command line or in your X resources file. See X(1). Options on the command line supersede values specified in your X resources file.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-authenticate \nstring\ndecrypt image with this password\n-backdrop\ndisplay the image centered on a backdrop.\n-background \ncolor\nthe background color\n-border \nwidth\nx\nheight\nsurround the image with a border of color\n-bordercolor \ncolor\nthe border color\n-borderwidth \ngeometry\nthe border width\n-colormap \ntype\ndefine the colormap type\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-comment \nstring\nannotate an image with a comment\n-compress \ntype\nthe type of image compression\n??? info \"-contrast\n\n\nenhance or reduce the image contrast\n\n\n\n\n\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-delay \n1/100ths of a second\ndisplay the next image after pausing\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-despeckle\nreduce the speckles within an image\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dither\napply Floyd/Steinberg error diffusion to the image\n-edge \nradius\ndetect edges within an image\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-enhance\napply a digital filter to enhance a noisy image\n-filter \ntype\nuse this type of filter when resizing an image\n-flip\ncreate a \"mirror image\"\n-flop\ncreate a \"mirror image\"\n-font \nname\nuse this font when annotating the image with text\n-foreground \ncolor\ndefine the foreground color\n-frame \nwidth\nx\nheight\n+\nouter bevel width\n+\ninner bevel width\nsurround the image with an ornamental border\n-gamma \nvalue\nlevel of gamma correction\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-help\nprint usage instructions\n-iconGeometry \ngeometry\nspecify the icon geometry\n-iconic\niconic animation\n-immutable\nmake image immutable\n-interlace \ntype\nthe type of interlacing scheme\n-label \nname\nassign a label to an image\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-magnify \nfactor\nmagnify the image\n-map \ntype\ndisplay image using this type.\n-matte\nstore matte channel if the image has one\n-mattecolor \ncolor\nspecify the color to be used with the -frame option\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-name\nname an image\n-negate\nreplace every pixel with its complementary color\n-noop\nNOOP (no option)\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\n+progress\ndisable progress monitor and busy cursor\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\n-raise \nwidth\nx\nheight\nlighten or darken image edges\n-remote\nperform a X11 remote operation\n-roll {+-}\nx\n{+-}\ny\nroll an image vertically or horizontally\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sample \ngeometry\nscale image using pixel sampling\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scenes \nvalue-value\nrange of image scene numbers to read\n-set \nattribute??? info \"\n`\nset an image attribute\n+set \nattribute\nunset an image attribute\n-segment \ncluster threshold\nx\nsmoothing threshold\nsegment an image\n-shared-memory\nuse shared memory\n-sharpen \nradius\n{x\nsigma\n}\nsharpen the image\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-text-font \nname\nfont for writing fixed-width text\n-texture \nfilename\nname of texture to tile onto the image background\n-title \nstring\nassign title to displayed image [animate, display, montage]\n-treedepth \nvalue\ntree depth for the color reduction algorithm\n-trim\ntrim an image\n-type \ntype\nthe image type\n-update \nseconds\ndetect when image file is modified and redisplay.\n-use-pixmap\nuse the pixmap\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n-visual \ntype\nanimate images using this X visual type\n-window \nid\nmake image the background of a window\n-window-group\nspecify the window group\n-write \nfilename\nwrite the image to a file [display]\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n\u9f20\u6807\u6309\u94ae\n\n\nThe effects of each button press is described below. Three buttons are required. If you have a two button mouse, button 1 and 3 are returned. Press ALT and button 3 to simulate button 2.\n\n\n1\nPress this button to map or unmap the Command widget . See the next section for more information about the Command widget.\n2\nPress and drag to define a region of the image to magnify.\n3\nPress and drag to choose from a select set of display(1) commands. This button behaves differently if the image being displayed is a visual image directory. Choose a particular tile of the directory and press this button and drag to select a command from a pop-up menu. Choose from these menu items:\n\n\nOpen\n\n\nNext\n\n\nFormer\n\n\nDelete\n\n\nUpdate\n\n\n\n\nIf you choose Open, the image represented by the tile is displayed. To return to the visual image directory, choose Next from the Command widget (refer to Command Widget). Next and Former moves to the next or former image respectively. Choose Delete to delete a particular image tile. Finally, choose Update to synchronize all the image tiles with their respective images. See montage and miff for more details.\n\n\n\u547d\u4ee4\u5c0f\u90e8\u4ef6\n\n\nThe Command widget lists a number of sub-menus and commands. They are\n\n\n\n\nFile\n\n\nOpen...\n\n\nNext\n\n\nFormer\n\n\nSelect...\n\n\nSave...\n\n\nPrint...\n\n\nDelete...\n\n\nCanvas...\n\n\nVisual Directory...\n\n\nQuit\n\n\n\n\n\n\nEdit\n\n\nUndo\n\n\nRedo\n\n\nCut\n\n\nCopy\n\n\nPaste\n\n\n\n\n\n\nView\n\n\nHalf Size\n\n\nOriginal Size\n\n\nDouble Size\n\n\nResize...\n\n\nApply\n\n\nRefresh\n\n\nRestore\n\n\n\n\n\n\nTransform\n\n\nCrop\n\n\nChop\n\n\nFlop\n\n\nFlip\n\n\nRotate Right\n\n\nRotate Left\n\n\nRotate...\n\n\nShear...\n\n\nRoll...\n\n\nTrim Edges\n\n\n\n\n\n\nEnhance\n\n\nHue...\n\n\nSaturation...\n\n\nBrightness...\n\n\nGamma...\n\n\nSpiff...\n\n\nDull\n\n\nEqualize\n\n\nNormalize\n\n\nNegate\n\n\nGRAYscale\n\n\nQuantize...\n\n\n\n\n\n\nEffects\n\n\nDespeckle\n\n\nEmboss\n\n\nReduce Noise\n\n\nAdd Noise\n\n\nSharpen...\n\n\nBlur...\n\n\nThreshold...\n\n\nEdge Detect...\n\n\nSpread...\n\n\nShade...\n\n\nRaise...\n\n\nSegment...\n\n\n\n\n\n\nF/X\n\n\nSolarize...\n\n\nSwirl...\n\n\nImplode...\n\n\nWave...\n\n\nOil Paint...\n\n\nCharcoal Draw...\n\n\n\n\n\n\nImage Edit\n\n\nAnnotate...\n\n\nDraw...\n\n\nColor...\n\n\nMatte...\n\n\nComposite...\n\n\nAdd Border...\n\n\nAdd Frame...\n\n\nComment...\n\n\nLaunch...\n\n\nRegion of Interest...\n\n\n\n\n\n\nMiscellany\n\n\nImage Info\n\n\nZoom Image\n\n\nShow Preview...\n\n\nShow Histogram\n\n\nShow Matte\n\n\nBackground...\n\n\nSlide Show\n\n\nPreferences...\n\n\n\n\n\n\nHelp\n\n\nOverview\n\n\nBrowse Documentation\n\n\nAbout Display\n\n\n\n\n\n\n\n\nMenu items with a indented triangle have a sub-menu. They are represented above as the indented items. To access a sub-menu item, move the pointer to the appropriate menu and press button 1 and drag. When you find the desired sub-menu item, release the button and the command is executed. Move the pointer away from the sub-menu if you decide not to execute a particular command.\n\n\n\u952e\u76d8\u52a0\u901f\u5668\u00b6\n\n\nAccelerators are one or two key presses that effect a particular command. The keyboard accelerators that display understands is:\n\n\n\n\n\n\n\n\n\u5feb\u6377\u952e\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nCtl+O\n\n\nPress to load an image from a file.\n\n\n\n\n\n\nspace\n\n\nPress to display the next image. If the image is a multi-paged document such as a PostScript document, you can skip ahead several pages by preceding this command with a number. For example to display the fourth page beyond the current page, press 4space.\n\n\n\n\n\n\nbackspace\n\n\nPress to display the former image. If the image is a multi-paged document such as a PostScript document, you can skip behind several pages by preceding this command with a number. For example to display the fourth page preceding the current page, press 4n.\n\n\n\n\n\n\nCtl-S\n\n\nPress to save the image to a file.\n\n\n\n\n\n\nCtl-P\n\n\nPress to print the image to a PostScript printer.\n\n\n\n\n\n\nCtl-D\n\n\nPress to delete an image file.\n\n\n\n\n\n\nCtl-N\n\n\nPress to create a blank canvas.\n\n\n\n\n\n\nCtl-Q\n\n\nPress to discard all images and exit program.\n\n\n\n\n\n\nCtl+Z\n\n\nPress to undo last image transformation.\n\n\n\n\n\n\nCtl+R\n\n\nPress to redo last image transformation.\n\n\n\n\n\n\nCtl-X\n\n\nPress to cut a region of the image.\n\n\n\n\n\n\nCtl-C\n\n\nPress to copy a region of the image.\n\n\n\n\n\n\nCtl-V\n\n\nPress to paste a region to the image.\n\n\n\n\n\n\n\n\nPress to halve the image size.\n\n\n\n\n\n\n.\n\n\nPress to return to the original image size.\n\n\n\n\n\n\n??? info \"\n\n\nPress to double the image size.\n\n\n\n\n\n\n%\n\n\nPress to resize the image to a width and height you specify.\n\n\n\n\n\n\nCmd-A\n\n\nPress to make any image transformations permanent. By default, any image size transformations are applied to the original image to create the image displayed on the X server.  However, the transformations are not permanent (i.e. the original image does not change size only the X image does). For example, if you press \"\n\" the X image will appear to double in size, but the original image will in fact remain the same size.  To force the original image to double in size, press \"\n\" followed by \"Cmd-A\".\n\n\n\n\n\n\n@\n\n\nPress to refresh the image window.\n\n\n\n\n\n\nC\n\n\nPress to crop the image.\n\n\n\n\n\n\n[\n\n\nPress to chop the image.\n\n\n\n\n\n\nH\n\n\nPress to flop image in the horizontal direction.\n\n\n\n\n\n\nV\n\n\nPress to flip image in the vertical direction.\n\n\n\n\n\n\n/\n\n\nPress to rotate the image 90 degrees clockwise.\n\n\n\n\n\n\n\\\n\n\nPress to rotate the image 90 degrees counter-clockwise.\n\n\n\n\n\n\n-\n\n\nPress to rotate the image the number of degrees you specify.\n\n\n\n\n\n\nS\n\n\nPress to shear the image the number of degrees you specify.\n\n\n\n\n\n\nR\n\n\nPress to roll the image.\n\n\n\n\n\n\nT\n\n\nPress to trim the image edges.\n\n\n\n\n\n\nShft-H\n\n\nPress to vary the color hue.\n\n\n\n\n\n\nShft-S\n\n\nPress to vary the color saturation.\n\n\n\n\n\n\nShft-L\n\n\nPress to vary the image brightness.\n\n\n\n\n\n\nShft-G\n\n\nPress to gamma correct the image.\n\n\n\n\n\n\nShft-C\n\n\nPress to spiff up the image contrast.\n\n\n\n\n\n\nShft-Z\n\n\nPress to dull the image contrast.\n\n\n\n\n\n\n=\n\n\nPress to perform histogram equalization on the image.\n\n\n\n\n\n\nShft-N\n\n\nPress to perform histogram normalization on the image.\n\n\n\n\n\n\nShft-~\n\n\nPress to negate the colors of the image.\n\n\n\n\n\n\n.\n\n\nPress to convert the image colors to gray.\n\n\n\n\n\n\nShft-#\n\n\nPress to set the maximum number of unique colors in the image.\n\n\n\n\n\n\nF2\n\n\nPress to reduce the speckles in an image.\n\n\n\n\n\n\nF2\n\n\nPress to emboss an image.\n\n\n\n\n\n\nF4\n\n\nPress to eliminate peak noise from an image.\n\n\n\n\n\n\nF5\n\n\nPress to add noise to an image.\n\n\n\n\n\n\nF6\n\n\nPress to sharpen an image.\n\n\n\n\n\n\nF7\n\n\nPress to blur image an image.\n\n\n\n\n\n\nF8\n\n\nPress to threshold the image.\n\n\n\n\n\n\nF9\n\n\nPress to detect edges within an image.\n\n\n\n\n\n\nF10\n\n\nPress to displace pixels by a random amount.\n\n\n\n\n\n\nF11\n\n\nPress to shade the image using a distant light source.\n\n\n\n\n\n\nF12\n\n\nPress to lighten or darken image edges to create a 3-D effect.\n\n\n\n\n\n\nF13\n\n\nPress to segment the image by color.\n\n\n\n\n\n\nMeta-S\n\n\nPress to swirl image pixels about the center.\n\n\n\n\n\n\nMeta-I\n\n\nPress to implode image pixels about the center.\n\n\n\n\n\n\nMeta-W\n\n\nPress to alter an image along a sine wave.\n\n\n\n\n\n\nMeta-P\n\n\nPress to simulate an oil painting.\n\n\n\n\n\n\nMeta-C\n\n\nPress to simulate a charcoal drawing.\n\n\n\n\n\n\nAlt-X\n\n\nPress to composite the image with another.\n\n\n\n\n\n\nAlt-A\n\n\nPress to annotate the image with text.\n\n\n\n\n\n\nAlt-D\n\n\nPress to draw a line on the image.\n\n\n\n\n\n\nAlt-P\n\n\nPress to edit an image pixel color.\n\n\n\n\n\n\nAlt-M\n\n\nPress to edit the image matte information.\n\n\n\n\n\n\nAlt-X\n\n\nPress to composite the image with another.\n\n\n\n\n\n\nAlt-A\n\n\nPress to add a border to the image.\n\n\n\n\n\n\nAlt-F\n\n\nPress to add a ornamental frame to the image.\n\n\n\n\n\n\nAlt-Shft-!\n\n\nPress to add an image comment.\n\n\n\n\n\n\nCtl-A\n\n\nPress to apply image processing techniques to a region of interest.\n\n\n\n\n\n\nShft-?\n\n\nPress to display information about the image.\n\n\n\n\n\n\nShft-+\n\n\nPress to map the zoom image window.\n\n\n\n\n\n\nShft-P\n\n\nPress to preview an image enhancement, effect, or f/x.\n\n\n\n\n\n\nF1\n\n\nPress to display helpful information about the \"display\" utility.\n\n\n\n\n\n\nFind\n\n\nPress to browse documentation about GraphicsMagick.\n\n\n\n\n\n\n1-9\n\n\nPress to change the level of magnification.\n\n\n\n\n\n\n\n\nUse the arrow keys to move the image one pixel up, down, left, or right within the magnify window. Be sure to first map the magnify window by pressing button 2.\n\n\nPress ALT and one of the arrow keys to trim off one pixel from any side of the image.\n\n\nX Resources\n\n\nDisplay options can appear on the command line or in your X resource file. Options on the command line supersede values specified in your X resource file. See X(1) for more information on X resources.\n\n\nMost display options have a corresponding X resource. In addition, display uses the following X resources:\n\n\nbackground (class Background)\nSpecifies the preferred color to use for the Image window background. The default is #ccc.\n??? info \"borderColor (class BorderColor)\n\n\nSpecifies the preferred color to use for the Image window border. The default is #ccc.\n\n\n\n\n\nborderWidth (class BorderWidth)\nSpecifies the width in pixels of the image window border. The default is 2.\nbrowseCommand (class browseCommand)\nSpecifies the name of the preferred browser when displaying GraphicsMagick documentation. The default is netscape %s.\nconfirmExit (class ConfirmExit)\nDisplay pops up a dialog box to confirm exiting the program when exiting the program. Set this resource to False to exit without a confirmation.\ndisplayGamma (class DisplayGamma)\nSpecifies the gamma of the X server.\nYou can apply separate gamma values to the red, green, and blue channels of the image with a gamma value list delineated with slashes (i.e. 1.7/2.3/1.2).\nThe default is 2.2.\ndisplayWarnings (class DisplayWarnings)\nDisplay pops up a dialog box whenever a warning message occurs. Set this resource to False to ignore warning messages.\nfont (class FontList)\nSpecifies the name of the preferred font to use in normal formatted text. The default is 14 point Helvetica.\nfont[1-9] (class Font[1-9])\nSpecifies the name of the preferred font to use when annotating the image window with text. The default fonts are fixed, variable, 5x8, 6x10, 7x13bold, 8x13bold, 9x15bold, 10x20, and 12x24.\nforeground (class Foreground)\nSpecifies the preferred color to use for text within the image window. The default is black.\ngammaCorrect (class gammaCorrect)\nThis resource, if true, will lighten or darken an image of known gamma to match the gamma of the display (see resource displayGamma). The default is True.\ngeometry (class Geometry)\nSpecifies the preferred size and position of the image window. It is not necessarily obeyed by all window managers.\nOffsets, if present, are handled in X(1) style. A negative x offset is measured from the right edge of the screen to the right edge of the icon, and a negative y offset is measured from the bottom edge of the screen to the bottom edge of the icon.\niconGeometry (class IconGeometry)\nSpecifies the preferred size and position of the application when iconified. It is not necessarily obeyed by all window managers.\nOffsets, if present, are handled in the same manner as in class Geometry.\niconic (class Iconic)\nThis resource indicates that you would prefer that the application's windows initially not be visible as if the windows had be immediately iconified by you. Window managers may choose not to honor the application's request.\nmagnify (class Magnify)\nspecifies an integral factor by which the image should be enlarged. The default is 3.\nThis value only affects the magnification window which is invoked with button number 3 after the image is displayed.\nmatteColor (class MatteColor)\nSpecify the color of windows. It is used for the backgrounds of windows, menus, and notices. A 3D effect is achieved by using highlight and shadow colors derived from this color. Default value: #697B8F.\nname (class Name)\nThis resource specifies the name under which resources for the application should be found. This resource is useful in shell aliases to distinguish between invocations of an application, without resorting to creating links to alter the executable file name. The default is the application name.\npen[1-9] (class Pen[1-9])\nSpecifies the color of the preferred font to use when annotating the image window with text. The default colors are black, blue, green, cyan, gray, red, magenta, yellow, and white.\nprintCommand (class PrintCommand)\nThis command is executed whenever Print is issued. In general, it is the command to print PostScript to your printer. Default value: lp -c -s %i.\nsharedMemory (class SharedMemory)\nThis resource specifies whether display should attempt use shared memory for pixmaps. GraphicsMagick must be compiled with shared memory support, and the display must support the MIT-SHM extension. Otherwise, this resource is ignored. The default is True.\ntextFont (class textFont)\nSpecifies the name of the preferred font to use in fixed (typewriter style) formatted text. The default is 14 point Courier.\ntitle (class Title)\nThis resource specifies the title to be used for the image window. This information is sometimes used by a window manager to provide a header identifying the window. The default is the image file name.\nundoCache (class UndoCache)\nSpecifies, in mega-bytes, the amount of memory in the undo edit cache. Each time you modify the image it is saved in the undo edit cache as long as memory is available. You can subsequently undo one or more of these transformations. The default is 16 Megabytes.\nusePixmap (class UsePixmap)\nImages are maintained as a XImage by default. Set this resource to True to utilize a server Pixmap instead. This option is useful if your image exceeds the dimensions of your server screen and you intend to pan the image. Panning is much faster with Pixmaps than with a XImage. Pixmaps are considered a precious resource, use them with discretion.\nTo set the geometry of the Magnify or Pan or window, use the geometry resource. For example, to set the Pan window geometry to 256x256, use:\n\n\ngm display.pan.geometry: 256x256\n\n\n\n\n\n\u56fe\u50cf\u52a0\u8f7d\n\n\nTo select an image to display, choose Open of the File sub-menu from the Command widget. A file browser is displayed. To choose a particular image file, move the pointer to the filename and press any button. The filename is copied to the text window. Next, press Open or press the RETURN key. Alternatively, you can type the image file name directly into the text window. To descend directories, choose a directory name and press the button twice quickly. A scrollbar allows a large list of filenames to be moved through the viewing area if it exceeds the size of the list area.\n\n\nYou can trim the list of file names by using shell globbing characters. For example, type - .jpg to list only files that end with .jpg.\n\n\nTo select your image from the X server screen instead of from a file, Choose Grab of the Open widget.\n\n\nBack to Contents  \n\n\n\u89c6\u89c9\u56fe\u50cf\u76ee\u5f55\n\n\nTo create a Visual Image Directory, choose Visual Directory of the File sub-menu from the Command widget . A file browser is displayed. To create a Visual Image Directory from all the images in the current directory, press Directory or press the RETURN key. Alternatively, you can select a set of image names by using shell globbing characters. For example, type - .jpg to include only files that end with .jpg. To descend directories, choose a directory name and press the button twice quickly. A scrollbar allows a large list of filenames to be moved through the viewing area if it exceeds the size of the list area.\n\n\nAfter you select a set of files, they are turned into thumbnails and tiled onto a single image. Now move the pointer to a particular thumbnail and press button 3 and drag. Finally, select Open. The image represented by the thumbnail is displayed at its full size. Choose Next from the File sub-menu of the Command widget to return to the Visual Image Directory.\n\n\n\u56fe\u50cf\u526a\u5207\u5230\u526a\u8d34\u677f\n\n\nNote that cut information for image window is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GRAYScale, PseudoColor). Correct cutting behavior may require a TrueColor or DirectColor visual or a Standard Colormap.\n\n\nTo begin, press choose Cut of the Edit sub-menu from the Command widget. Alternatively, press F3 in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in cut mode. In cut mode, the Command widget has these options:\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nTo define a cut region, press button 1 and drag. The cut region is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the cut region, release the button. You are now in rectify mode. In rectify mode, the Command widget has these options:\n\n\n\n\nCut\n\n\nHelp\n\n\nDismiss\n\n\n\n\nYou can make adjustments by moving the pointer to one of the cut rectangle corners, pressing a button, and dragging. Finally, press Cut to commit your copy region. To exit without cutting the image, press Dismiss.\n\n\nBack to Contents  \n\n\n\u56fe\u50cf\u62f7\u8d1d\n\n\nTo begin, press choose Copy of the Edit sub-menu from the Command widget. Alternatively, press F4 in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in copy mode. In copy mode, the Command widget has these options:\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nTo define a copy region, press button 1 and drag. The copy region is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the copy region, release the button. You are now in rectify mode. In rectify mode, the Command widget has these options:\n\n\n\n\nCopy\n\n\nHelp\n\n\nDismiss\n\n\n\n\nYou can make adjustments by moving the pointer to one of the copy rectangle corners, pressing a button, and dragging. Finally, press Copy to commit your copy region. To exit without copying the image, press Dismiss.\n\n\n\u56fe\u7247\u7c98\u8d34\n\n\nTo begin, press choose Paste of the Edit sub-menu from the Command widget. Alternatively, press F5 in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in Paste mode. To exit immediately, press Dismiss. In Paste mode, the Command widget has these options:\n\n\n\n\nOperators\n\n\nover\n\n\nin\n\n\nout\n\n\natop\n\n\nxor\n\n\nplus\n\n\nminus\n\n\nadd\n\n\nsubtract\n\n\ndifference\n\n\nmultiply\n\n\nbumpmap\n\n\nreplace\n\n\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nChoose a composite operation from the Operators sub-menu of the Command widget. How each operator behaves is described below. image window is the image currently displayed on your X server and image is the image obtained with the File Browser widget.\n\n\nover\nThe result is the union of the two image shapes, with image obscuring image window in the region of overlap.\nin\nThe result is simply image cut by the shape of image window. None of the image data of image window is in the result.\nout\nThe resulting image is image with the shape of image window cut out.\natop\nThe result is the same shape as image window, with image obscuring image window where the image shapes overlap. Note this differs from over because the portion of image outside image window's shape does not appear in the result.\nxor\nThe result is the image data from both image and image window that is outside the overlap region. The overlap region is blank.\nplus\nThe result is just the sum of the image data. Output values are cropped to the maximum value (no overflow). This operation is independent of the matte channels.\nminus\nThe result of image - image window, with underflow cropped to zero. The matte channel is ignored (set to opaque, full coverage).\nadd\nThe result of image + image window, with overflow wrapping around (mod MaxRGB+1).\nsubtract\nThe result of image - image window, with underflow wrapping around (mod MaxRGB+1). The add and subtract operators can be used to perform reversible transformations.\ndifference\nThe result of abs(image - image window). This is useful for comparing two very similar images.\nmultiply\nThe result of image -  image window. This is useful for the creation of drop-shadows.\nbumpmap\nThe result of image window shaded by window.\nreplace\nThe resulting image is image window replaced with image. Here the matte information is ignored.\nThe image compositor requires a matte, or alpha channel in the image for some operations. This extra channel usually defines a mask which represents a sort of a cookie-cutter for the image. This is the case when matte is 255 (full coverage) for pixels inside the shape, zero outside, and between zero and 255 on the boundary. If image does not have a matte channel, it is initialized with 0 for any pixel matching in color to pixel location (0,0), otherwise 255. See Matte Editing for a method of defining a matte channel.\n\n\nNote that matte information for image window is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GrayScale, PseudoColor). Correct compositing behavior may require a TrueColor or DirectColor visual or a Standard Colormap.\n\n\nChoosing a composite operator is optional. The default operator is replace. However, you must choose a location to composite your image and press button 1. Press and hold the button before releasing and an outline of the image will appear to help you identify your location.\n\n\nThe actual colors of the pasted image is saved. However, the color that appears in image window may be different. For example, on a monochrome screen image window will appear black or white even though your pasted image may have many colors. If the image is saved to a file it is written with the correct colors. To assure the correct colors are saved in the final image, any PseudoClass image is promoted to DirectClass. To force a PseudoClass image to remain PseudoClass, use -colors.\n\n\n\u56fe\u50cf\u88c1\u526a\n\n\nTo begin, press choose Crop of the Transform submenu from the Command widget. Alternatively, press C in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in crop mode. In crop mode, the Command widget has these options:\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nTo define a cropping region, press button 1 and drag. The cropping region is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the cropping region, release the button. You are now in rectify mode. In rectify mode, the Command widget has these options:\n\n\n\n\nCrop\n\n\nHelp\n\n\nDismiss\n\n\n\n\nYou can make adjustments by moving the pointer to one of the cropping rectangle corners, pressing a button, and dragging. Finally, press Crop to commit your cropping region. To exit without cropping the image, press Dismiss.\n\n\n\u56fe\u50cf\u5207\n\n\nAn image is chopped interactively. There is no command line argument to chop an image. To begin, choose Chop of the Transform sub-menu from the Command widget. Alternatively, press [ in the Image window.\n\n\nYou are now in Chop mode. To exit immediately, press Dismiss. In Chop mode, the Command widget has these options:\n\n\n\n\nDirection\n\n\nhorizontal\n\n\nvertical\n\n\nHelp\n\n\nDismiss\n\n\n\n\nIf the you choose the horizontal direction (this is the default), the area of the image between the two horizontal endpoints of the chop line is removed. Otherwise, the area of the image between the two vertical endpoints of the chop line is removed.\n\n\nSelect a location within the image window to begin your chop, press and hold any button. Next, move the pointer to another location in the image. As you move a line will connect the initial location and the pointer. When you release the button, the area within the image to chop is determined by which direction you choose from the Command widget.\n\n\nTo cancel the image chopping, move the pointer back to the starting point of the line and release the button.\n\n\n\u56fe\u50cf\u65cb\u8f6c\n\n\nPress the / key to rotate the image 90 degrees or \\ to rotate -90 degrees. To interactively choose the degree of rotation, choose Rotate... of the Transform submenu from the Command Widget. Alternatively, press -  in the image window.\n\n\nA small horizontal line is drawn next to the pointer. You are now in rotate mode. To exit immediately, press Dismiss. In rotate mode, the Command widget has these options:\n\n\n\n\nPixel Color\n\n\nblack\n\n\nblue\n\n\ncyan\n\n\ngreen\n\n\ngray\n\n\nred\n\n\nmagenta\n\n\nyellow\n\n\nwhite\n\n\nBrowser...\n\n\n\n\n\n\nDirection\n\n\nhorizontal\n\n\nvertical\n\n\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nChoose a background color from the Pixel Color sub-menu. Additional background colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9.\n\n\nIf you choose the color browser and press Grab, you can select the background color by moving the pointer to the desired color on the screen and press any button.\n\n\nChoose a point in the image window and press this button and hold. Next, move the pointer to another location in the image. As you move a line connects the initial location and the pointer. When you release the button, the degree of image rotation is determined by the slope of the line you just drew. The slope is relative to the direction you choose from the Direction sub-menu of the Command widget.\n\n\nTo cancel the image rotation, move the pointer back to the starting point of the line and release the button.\n\n\n\u56fe\u50cf\u5206\u5272\n\n\nChoose Effects-\n`Segment to segment an image by analyzing the histograms of the color components and identifying units that are homogeneous with the fuzzy c-means technique. The scale-space filter analyzes the histograms of the three color components of the image and identifies a set of classes. The extents of each class is used to coarsely segment the image with thresholding. The color associated with each class is determined by the mean color of all pixels within the extents of a particular class. Finally, any unclassified pixels are assigned to the closest class with the fuzzy c-means technique.\n\n\nThe fuzzy c-Means algorithm can be summarized as follows:\n\n\n\n\nBuild a histogram, one for each color component of the image.\n\n\nFor each histogram, successively apply the scale-space filter and build an interval tree of zero crossings in the second derivative at each scale. Analyze this scale-space \"fingerprint\" to determine which peaks or valleys in the histogram are most predominant.\n\n\nThe fingerprint defines intervals on the axis of the histogram. Each interval contains either a minima or a maxima in the original signal. If each color component lies within the maxima interval, that pixel is considered \"classified\" and is assigned an unique class number.\n\n\nAny pixel that fails to be classified in the above thresholding pass is classified using the fuzzy c-Means technique. It is assigned to one of the classes discovered in the histogram analysis phase.\n\n\n\n\nThe fuzzy c-Means technique attempts to cluster a pixel by finding the local minima of the generalized within group sum of squared error objective function. A pixel is assigned to the closest class of which the fuzzy membership has a maximum value.\n\n\nFor additional information see:\n\n\nYoung Won Lim\n, \nSang Uk Lee\n, \"On The Color Image Segmentation Algorithm Based on the Thresholding and the Fuzzy c-Means Techniques\", Pattern Recognition, Volume 23, Number 9, pages 935-952, 1990.\n\n\n\u56fe\u50cf\u6ce8\u91ca\n\n\nAn image is annotated interactively. There is no command line argument to annotate an image. To begin, choose Annotate of the Image Edit sub-menu from the Command widget. Alternatively, press a in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in annotate mode. To exit immediately, press Dismiss. In annotate mode, the Command widget has these options:\n\n\nFont Name\nfixed\nvariable\n5x8\n6x10\n7x13bold\n8x13bold\n9x15bold\n10x20\n12x24\nBrowser...\nFont Color\nblack\nblue\ncyan\ngreen\ngray\nred\nmagenta\nyellow\nwhite\ntransparent\nBrowser...\nBox Color\nblack\nblue\ncyan\ngreen\ngray\nred\nmagenta\nyellow\nwhite\ntransparent\nBrowser...\nRotate Text\n-90\n-45\n-30\n0\n30\n45\n90\n180\nDialog...\nHelp\nDismiss\nChoose a font name from the Font Name sub-menu. Additional font names can be specified with the font browser. You can change the menu names by setting the X resources font1 through font9.\n\n\nChoose a font color from the Font Color sub-menu. Additional font colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9.\n\n\nIf you select the color browser and press Grab, you can choose the font color by moving the pointer to the desired color on the screen and press any button.\n\n\nIf you choose to rotate the text, choose Rotate Text from the menu and select an angle. Typically you will only want to rotate one line of text at a time. Depending on the angle you choose, subsequent lines may end up overwriting each other.\n\n\nChoosing a font and its color is optional. The default font is fixed and the default color is black. However, you must choose a location to begin entering text and press a button. An underscore character will appear at the location of the pointer. The cursor changes to a pencil to indicate you are in text mode. To exit immediately, press Dismiss.\n\n\nIn text mode, any key presses will display the character at the location of the underscore and advance the underscore cursor. Enter your text and once completed press Apply to finish your image annotation. To correct errors press BACK SPACE. To delete an entire line of text, press DELETE. Any text that exceeds the boundaries of the image window is automatically continued onto the next line.\n\n\nThe actual color you request for the font is saved in the image. However, the color that appears in your Image window may be different. For example, on a monochrome screen the text will appear black or white even if you choose the color red as the font color. However, the image saved to a file with -write is written with red lettering. To assure the correct color text in the final image, any PseudoClass image is promoted to DirectClass (see miff(5)). To force a PseudoClass image to remain PseudoClass, use -colors.\n\n\nBack to Contents  \n\n\n\u56fe\u50cf\u5408\u6210\n\n\nAn image composite is created interactively. There is no command line argument to composite an image. To begin, choose Composite of the Image Edit from the Command widget. Alternatively, press x in the Image window.\n\n\nFirst a popup window is displayed requesting you to enter an image name. Press Composite, Grab or type a file name. Press Cancel if you choose not to create a composite image. When you choose Grab, move the pointer to the desired window and press any button.\n\n\nIf the Composite image does not have any matte information, you are informed and the file browser is displayed again. Enter the name of a mask image. The image is typically grayscale and the same size as the composite image. If the image is not grayscale, it is converted to grayscale and the resulting intensities are used as matte information.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in composite mode. To exit immediately, press Dismiss. In composite mode, the Command widget has these options:\n\n\n\n\nOperators\n\n\nover\n\n\nin\n\n\nout\n\n\natop\n\n\nxor\n\n\nplus\n\n\nminus\n\n\nadd\n\n\nsubtract\n\n\ndifference\n\n\nbumpmap\n\n\nreplace\n\n\nBlend\n\n\nDisplace\n\n\nHelp\n\n\nDismiss\n\n\n\n\nChoose a composite operation from the Operators sub-menu of the Command widget. How each operator behaves is described below. image window is the image currently displayed on your X server and image is the image obtained\n\n\nover\nThe result is the union of the two image shapes, with image obscuring image window in the region of overlap.\nin\nThe result is simply image cut by the shape of image window. None of the image data of image window is in the result.\nout\nThe resulting image is image with the shape of image window cut out.\natop\nThe result is the same shape as image window, with image obscuring image window where the image shapes overlap. Note this differs from over because the portion of image outside image window's shape does not appear in the result.\nxor\nThe result is the image data from both image and image window that is outside the overlap region. The overlap region is blank.\nplus\nThe result is just the sum of the image data. Output values are cropped to 255 (no overflow). This operation is independent of the matte channels.\nminus\nThe result of image - image window, with underflow cropped to zero. The matte channel is ignored (set to 255, full coverage).\nadd\nThe result of image + image window, with overflow wrapping around (mod 256).\nsubtract\nThe result of image - image window, with underflow wrapping around (mod 256). The add and subtract operators can be used to perform reversible transformations.\ndifference\nThe result of abs(image - image window). This is useful for comparing two very similar images.\nbumpmap\nThe result of image window shaded by window.\nreplace\nThe resulting image is image window replaced with image. Here the matte information is ignored.\nThe image compositor requires a matte, or alpha channel in the image for some operations. This extra channel usually defines a mask which represents a sort of a cookie-cutter for the image. This is the case when matte is 255 (full coverage) for pixels inside the shape, zero outside, and between zero and 255 on the boundary. If image does not have a matte channel, it is initialized with 0 for any pixel matching in color to pixel location (0,0), otherwise 255. See Matte Editing for a method of defining a matte channel.\n\n\nIf you choose blend, the composite operator becomes over. The image matte channel percent transparency is initialized to factor. The image window is initialized to (100-factor). Where factor is the value you specify in the Dialog widget.\n\n\nDisplace shifts the image pixels as defined by a displacement map. With this option, image is used as a displacement map. Black, within the displacement map, is a maximum positive displacement. White is a maximum negative displacement and middle gray is neutral. The displacement is scaled to determine the pixel shift. By default, the displacement applies in both the horizontal and vertical directions. However, if you specify mask, image is the horizontal X displacement and mask the vertical Y displacement.\n\n\nNote that matte information for image window is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GrayScale, PseudoColor). Correct compositing behavior may require a TrueColor or DirectColor visual or a Standard Colormap.\n\n\nChoosing a composite operator is optional. The default operator is replace. However, you must choose a location to composite your image and press button 1. Press and hold the button before releasing and an outline of the image will appear to help you identify your location.\n\n\nThe actual colors of the composite image is saved. However, the color that appears in image window may be different. For example, on a monochrome screen Image window will appear black or white even though your composited image may have many colors. If the image is saved to a file it is written with the correct colors. To assure the correct colors are saved in the final image, any PseudoClass image is promoted to DirectClass (see miff). To force a PseudoClass image to remain PseudoClass, use -colors.\n\n\n\u989c\u8272\u7f16\u8f91\n\n\nChanging the the color of a set of pixels is performed interactively. There is no command line argument to edit a pixel. To begin, choose Color from the Image Edit submenu of the Command widget. Alternatively, press c in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in color edit mode. To exit immediately, press Dismiss. In color edit mode, the Command widget has these options:\n\n\n\n\nMethod\n\n\npoint\n\n\nreplace\n\n\nfloodfill\n\n\nreset\n\n\n\n\n\n\nPixel Color\n\n\nblack\n\n\nblue\n\n\ncyan\n\n\ngreen\n\n\ngray\n\n\nred\n\n\nmagenta\n\n\nyellow\n\n\nwhite\n\n\nBrowser...\n\n\n\n\n\n\nBorder Color\n\n\nblack\n\n\nblue\n\n\ncyan\n\n\ngreen\n\n\ngray\n\n\nred\n\n\nmagenta\n\n\nyellow\n\n\nwhite\n\n\nBrowser...\n\n\n\n\n\n\nFuzz\n\n\n0\n\n\n2\n\n\n4\n\n\n8\n\n\n16\n\n\nDialog...\n\n\n\n\n\n\nUndo\n\n\nHelp\n\n\nDismiss\n\n\n\n\nChoose a color editing method from the Method sub-menu of the Command widget. The point method recolors any pixel selected with the pointer unless the button is released. The replace method recolors any pixel that matches the color of the pixel you select with a button press. Floodfill recolors any pixel that matches the color of the pixel you select with a button press and is a neighbor. Whereas filltoborder changes the matte value of any neighbor pixel that is not the border color. Finally reset changes the entire image to the designated color.\n\n\nNext, choose a pixel color from the Pixel Color sub-menu. Additional pixel colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9.\n\n\nNow press button 1 to select a pixel within the Image window to change its color. Additional pixels may be recolored as prescribed by the method you choose. additional pixels by increasing the Delta value.\n\n\nIf the Magnify widget is mapped, it can be helpful in positioning your pointer within the image (refer to button 2). Alternatively you can select a pixel to recolor from within the Magnify widget. Move the pointer to the Magnify widget and position the pixel with the cursor control keys. Finally, press a button to recolor the selected pixel (or pixels).\n\n\nThe actual color you request for the pixels is saved in the image. However, the color that appears in your Image window may be different. For example, on a monochrome screen the pixel will appear black or white even if you choose the color red as the pixel color. However, the image saved to a file with -write is written with red pixels. To assure the correct color text in the final image, any PseudoClass image is promoted to DirectClass To force a PseudoClass image to remain PseudoClass, use -colors.\n\n\nMatte Editing\n\n\nMatte information within an image is useful for some operations such as image compositing. This extra channel usually defines a mask which represents a sort of a cookie-cutter for the image. This is the case when matte is 255 (full coverage) for pixels inside the shape, zero outside, and between zero and 255 on the boundary.\n\n\nSetting the matte information in an image is done interactively. There is no command line argument to edit a pixel. To begin, and choose Matte of the Image Edit sub-menu from the Command widget.\n\n\nAlternatively, press m in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in matte edit mode. To exit immediately, press Dismiss. In matte edit mode, the Command widget has these options:\n\n\n\n\nMethod\n\n\npoint\n\n\nreplace\n\n\nfloodfill\n\n\nreset\n\n\n\n\n\n\nBorder Color\n\n\nblack\n\n\nblue\n\n\ncyan\n\n\ngreen\n\n\ngray\n\n\nred\n\n\nmagenta\n\n\nyellow\n\n\nwhite\n\n\nBrowser...\n\n\n\n\n\n\nFuzz\n\n\n0\n\n\n2\n\n\n4\n\n\n8\n\n\n16\n\n\nDialog...\n\n\n\n\n\n\nMatte\n\n\nUndo\n\n\nHelp\n\n\nDismiss\n\n\n\n\nChoose a matte editing method from the Method sub-menu of the Command widget. The point method changes the matte value of the any pixel selected with the pointer until the button is released. The replace method changes the matte value of any pixel that matches the color of the pixel you select with a button press. Floodfill changes the matte value of any pixel that matches the color of the pixel you select with a button press and is a neighbor. Whereas filltoborder recolors any neighbor pixel that is not the border color. Finally reset changes the entire image to the designated matte value.\nChoose Matte Value and a dialog appears requesting a matte value. Enter a value between 0 and 255. This value is assigned as the matte value of the selected pixel or pixels.\n\n\nNow, press any button to select a pixel within the Image window to change its matte value. You can change the matte value of additional pixels by increasing the Delta value. The Delta value is first added then subtracted from the red, green, and blue of the target color. Any pixels within the range also have their matte value updated.\n\n\nIf the Magnify widget is mapped, it can be helpful in positioning your pointer within the image (refer to button 2). Alternatively you can select a pixel to change the matte value from within the Magnify widget. Move the pointer to the Magnify widget and position the pixel with the cursor control keys. Finally, press a button to change the matte value of the selected pixel (or pixels).\n\n\nMatte information is only valid in a DirectClass image. Therefore, any PseudoClass image is promoted to DirectClass. Note that matte information for PseudoClass is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GrayScale, PseudoColor) unless you immediately save your image to a file (refer to Write). Correct matte editing behavior may require a TrueColor or DirectColor visual or a Standard Colormap.\n\n\n\u56fe\u5f62\u7ed8\u5236\n\n\nAn image is drawn upon interactively. There is no command line argument to draw on an image. To begin, choose Draw of the Image Edit sub-menu from the Command widget. Alternatively, press d in the image window.\n\n\nThe cursor changes to a crosshair to indicate you are in draw mode. To exit immediately, press Dismiss. In draw mode, the Command widget has these options:\n\n\n\n\nPrimitive\n\n\npoint\n\n\nline\n\n\nrectangle\n\n\nfill rectangle\n\n\ncircle\n\n\nfill circle\n\n\nellipse\n\n\nfill ellipse\n\n\npolygon\n\n\nfill polygon\n\n\n\n\n\n\nColor\n\n\nblack\n\n\nblue\n\n\ncyan\n\n\ngreen\n\n\ngray\n\n\nred\n\n\nmagenta\n\n\nyellow\n\n\nwhite\n\n\ntransparent\n\n\nBrowser...\n\n\n\n\n\n\nStipple\n\n\nBrick\n\n\nDiagonal\n\n\nScales\n\n\nVertical\n\n\nWavy\n\n\nTranslucent\n\n\nOpaque\n\n\nOpen...\n\n\n\n\n\n\nWidth\n\n\n1\n\n\n2\n\n\n4\n\n\n8\n\n\n16\n\n\nDialog...\n\n\n\n\n\n\nUndo\n\n\nHelp\n\n\nDismiss\n\n\n\n\nChoose a drawing primitive from the Primitive sub-menu.\n\n\nNext, choose a color from the Color sub-menu. Additional colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9. The transparent color updates the image matte channel and is useful for image compositing.\n\n\nIf you choose the color browser and press Grab, you can select the primitive color by moving the pointer to the desired color on the screen and press any button. The transparent color updates the image matte channel and is useful for image compositing.\n\n\nChoose a stipple, if appropriate, from the Stipple sub-menu. Additional stipples can be specified with the file browser. Stipples obtained from the file browser must be on disk in the X11 bitmap format.\n\n\nChoose a line width, if appropriate, from the Width sub-menu. To choose a specific width select the Dialog widget.\n\n\nChoose a point in the image window and press button 1 and hold. Next, move the pointer to another location in the image. As you move, a line connects the initial location and the pointer. When you release the button, the image is updated with the primitive you just drew. For polygons, the image is updated when you press and release the button without moving the pointer.\n\n\nTo cancel image drawing, move the pointer back to the starting point of the line and release the button.\n\n\n\u5174\u8da3\u533a\u57df\n\n\nTo begin, press choose Region of Interest of the Pixel Transform sub-menu from the Command widget. Alternatively, press R in the image window.\n\n\nA small window appears showing the location of the cursor in the image window. You are now in region of interest mode. In region of interest mode, the Command widget has these options:\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nTo define a region of interest, press button 1 and drag. The region of interest is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the region of interest, release the button. You are now in apply mode. In apply mode the Command widget has these options:\n\n\n\n\nFile\n\n\nSave...\n\n\nPrint...\n\n\n\n\n\n\nEdit\n\n\nUndo\n\n\nRedo\n\n\n\n\n\n\nTransform\n\n\nFlip\n\n\nFlop\n\n\nRotate Right\n\n\nRotate Left\n\n\n\n\n\n\nEnhance\n\n\nHue...\n\n\nSaturation...\n\n\nBrightness...\n\n\nGamma...\n\n\nSpiff\n\n\nDull\n\n\nEqualize\n\n\nNormalize\n\n\nNegate\n\n\nGRAYscale\n\n\nQuantize...\n\n\n\n\n\n\nEffects\n\n\nDespeckle\n\n\nEmboss\n\n\nReduce Noise\n\n\nAdd Noise\n\n\nSharpen...\n\n\nBlur...\n\n\nThreshold...\n\n\nEdge Detect...\n\n\nSpread...\n\n\nShade...\n\n\nRaise...\n\n\nSegment...\n\n\n\n\n\n\nF/X\n\n\nSolarize...\n\n\nSwirl...\n\n\nImplode...\n\n\nWave...\n\n\nOil Paint\n\n\nCharcoal Draw...\n\n\n\n\n\n\nMiscellany\n\n\nImage Info\n\n\nZoom Image\n\n\nShow Preview...\n\n\nShow Histogram\n\n\nShow Matte\n\n\n\n\n\n\nHelp\n\n\nDismiss\n\n\n\n\nYou can make adjustments to the region of interest by moving the pointer to one of the rectangle corners, pressing a button, and dragging. Finally, choose an image processing technique from the Command widget. You can choose more than one image processing technique to apply to an area. Alternatively, you can move the region of interest before applying another image processing technique. To exit, press Dismiss.\n\n\n\u56fe\u50cf\u5e73\u79fb\n\n\nWhen an image exceeds the width or height of the X server screen, display maps a small panning icon. The rectangle within the panning icon shows the area that is currently displayed in the the image window. To pan about the image, press any button and drag the pointer within the panning icon. The pan rectangle moves with the pointer and the image window is updated to reflect the location of the rectangle within the panning icon. When you have selected the area of the image you wish to view, release the button.\n\n\nUse the arrow keys to pan the image one pixel up, down, left, or right within the image window.\n\n\nThe panning icon is withdrawn if the image becomes smaller than the dimensions of the X server screen.\n\n\n\u7528\u6237\u504f\u597d\n\n\nPreferences affect the default behavior of display(1). The preferences are either true or false and are stored in your home directory as .displayrc:\n\n\ndisplay image centered on a backdrop\nThis backdrop covers the entire workstation screen and is useful for hiding other X window activity while viewing the image. The color of the backdrop is specified as the background color. Refer to X Resources for details.\nconfirm on program exit\nAsk for a confirmation before exiting the display(1) program.\ncorrect image for display gamma\nIf the image has a known gamma, the gamma is corrected to match that of the X server (see the X Resource displayGamma).\ndisplay warning messages\nDisplay any warning messages.\napply Floyd/Steinberg error diffusion to image\nThe basic strategy of dithering is to trade intensity resolution for spatial resolution by averaging the intensities of several neighboring pixels. Images which suffer from severe contouring when reducing colors can be improved with this preference.\nuse a shared colormap for colormapped X visuals\nThis option only applies when the default X server visual is PseudoColor or GRAYScale. Refer to -visual for more details. By default, a shared colormap is allocated. The image shares colors with other X clients. Some image colors could be approximated, therefore your image may look very different than intended. Otherwise the image colors appear exactly as they are defined. However, other clients may go technicolor when the image colormap is installed.\ndisplay images as an X server pixmap\nImages are maintained as a XImage by default. Set this resource to True to utilize a server Pixmap instead. This option is useful if your image exceeds the dimensions of your server screen and you intend to pan the image. Panning is much faster with Pixmaps than with a XImage. Pixmaps are considered a precious resource, use them with discretion.", 
            "title": "\u663e\u793a"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_1", 
            "text": "", 
            "title": "\u663e\u793a"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_2", 
            "text": "display - display an image on any workstation running X", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_3", 
            "text": "Synopsis  Description  Examples  Options  Mouse Buttons  Command Widget  Keyboard Accelerators  X Resources  Image Loading  Visual Image Directory  Image Cutting  Image Copying  Image Pasting  Image Cropping  Image Chopping  Image Rotation  Image Segmentation  Image Annotation  Image Compositing  Color Editing  Matte (Transparent Channel) Editing  Image Drawing  Region of Interest  Image Panning  User Preferences", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_4", 
            "text": "gm display [ options ...] file [options...]file", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_5", 
            "text": "Display is a machine architecture independent image processing and display program. It can display an image on any workstation screen running an X server. Display can read and write many of the more popular image formats (e.g. JPEG, TIFF, PNM, Photo CD, etc.).  With display, you can perform these functions on an image:   load an image from a file  display the next image  display the former image  display a sequence of images as a slide show  write the image to a file  print the image to a PostScript printer  delete the image file  create a Visual Image Directory  select the image to display by its thumbnail rather than name  undo last image transformation  copy a region of the image  paste a region to the image  restore the image to its original size  refresh the image  half the image size  double the image size  resize the image  crop the image  cut the image  flop image in the horizontal direction  flip image in the vertical direction  rotate the image 90 degrees clockwise  rotate the image 90 degrees counter-clockwise  rotate the image  shear the image  roll the image  trim the image edges  invert the colors of the image  vary the color brightness  vary the color saturation  vary the image hue  gamma correct the image  sharpen the image contrast  dull the image contrast  perform histogram equalization on the image  perform histogram normalization on the image  negate the image colors  convert the image to grayscale  set the maximum number of unique colors in the image  reduce the speckles within an image  eliminate peak noise from an image  detect edges within the image  emboss an image  segment the image by color  simulate an oil painting  simulate a charcoal drawing  annotate the image with text  draw on the image  edit an image pixel color  edit the image matte information  composite an image with another  add a border to the image  surround image with an ornamental border  apply image processing techniques to a region of interest  display information about the image  zoom a portion of the image  show a histogram of the image  display image to background of a window  set user preferences  display information about this program  discard all images and exit program  change the level of magnification  display images specified by a World Wide Web (WWW) uniform resource locator (URL)", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_6", 
            "text": "To scale an image of a cockatoo to exactly 640 pixels in width and 480 pixels in height and position the window at location (200,200), use:  gm display -geometry 640x480+200+200! cockatoo.miff  To display an image of a cockatoo without a border centered on a backdrop, use:  gm display +borderwidth -backdrop cockatoo.miff  To tile a slate texture onto the root window, use:  gm display -size 1280x1024 -window root slate.png  To display a visual image directory of all your JPEG images, use:  gm   display   vid:- .jpg   To display a MAP image that is 640 pixels in width and 480 pixels in height with 256 colors, use:  gm display -size 640x480+256 cockatoo.map  To display an image of a cockatoo specified with a World Wide Web (WWW) uniform resource locator (URL), use:  gm display ftp://wizards.dupont.com/images/cockatoo.jpg  To display histogram of an image, use:  gm   gm   convert   file . jpg   HISTOGRAM :-   |   gm   display   -", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_7", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect until it is explicitly changed by specifying the option again with a different effect. For example to display three images, the first with 32 colors, the second with an unlimited number of colors, and the third with only 16 colors, use:  gm display -colors 32 cockatoo.miff -noop duck.miff -colors 16 macaw.miff  Display options can appear on the command line or in your X resources file. See X(1). Options on the command line supersede values specified in your X resources file.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -authenticate  string decrypt image with this password -backdrop display the image centered on a backdrop. -background  color the background color -border  width x height surround the image with a border of color -bordercolor  color the border color -borderwidth  geometry the border width -colormap  type define the colormap type -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -comment  string annotate an image with a comment -compress  type the type of image compression ??? info \"-contrast  enhance or reduce the image contrast  -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -delay  1/100ths of a second display the next image after pausing -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -despeckle reduce the speckles within an image -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dither apply Floyd/Steinberg error diffusion to the image -edge  radius detect edges within an image -endian  type specify endianness (MSB, LSB, or Native) of image -enhance apply a digital filter to enhance a noisy image -filter  type use this type of filter when resizing an image -flip create a \"mirror image\" -flop create a \"mirror image\" -font  name use this font when annotating the image with text -foreground  color define the foreground color -frame  width x height + outer bevel width + inner bevel width surround the image with an ornamental border -gamma  value level of gamma correction -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -help print usage instructions -iconGeometry  geometry specify the icon geometry -iconic iconic animation -immutable make image immutable -interlace  type the type of interlacing scheme -label  name assign a label to an image -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -magnify  factor magnify the image -map  type display image using this type. -matte store matte channel if the image has one -mattecolor  color specify the color to be used with the -frame option -monitor show progress indication -monochrome transform the image to black and white -name name an image -negate replace every pixel with its complementary color -noop NOOP (no option) -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas +progress disable progress monitor and busy cursor -quality  value JPEG/MIFF/PNG/TIFF compression level -raise  width x height lighten or darken image edges -remote perform a X11 remote operation -roll {+-} x {+-} y roll an image vertically or horizontally -rotate  degrees { }{ } rotate the image -sample  geometry scale image using pixel sampling -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scenes  value-value range of image scene numbers to read -set  attribute??? info \" ` set an image attribute +set  attribute unset an image attribute -segment  cluster threshold x smoothing threshold segment an image -shared-memory use shared memory -sharpen  radius {x sigma } sharpen the image -size  width x height {+offset} width and height of the image -text-font  name font for writing fixed-width text -texture  filename name of texture to tile onto the image background -title  string assign title to displayed image [animate, display, montage] -treedepth  value tree depth for the color reduction algorithm -trim trim an image -type  type the image type -update  seconds detect when image file is modified and redisplay. -use-pixmap use the pixmap -verbose print detailed information about the image -version print GraphicsMagick version string -visual  type animate images using this X visual type -window  id make image the background of a window -window-group specify the window group -write  filename write the image to a file [display] For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_8", 
            "text": "The effects of each button press is described below. Three buttons are required. If you have a two button mouse, button 1 and 3 are returned. Press ALT and button 3 to simulate button 2.  1 Press this button to map or unmap the Command widget . See the next section for more information about the Command widget. 2 Press and drag to define a region of the image to magnify. 3 Press and drag to choose from a select set of display(1) commands. This button behaves differently if the image being displayed is a visual image directory. Choose a particular tile of the directory and press this button and drag to select a command from a pop-up menu. Choose from these menu items:  Open  Next  Former  Delete  Update   If you choose Open, the image represented by the tile is displayed. To return to the visual image directory, choose Next from the Command widget (refer to Command Widget). Next and Former moves to the next or former image respectively. Choose Delete to delete a particular image tile. Finally, choose Update to synchronize all the image tiles with their respective images. See montage and miff for more details.", 
            "title": "\u9f20\u6807\u6309\u94ae"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_9", 
            "text": "The Command widget lists a number of sub-menus and commands. They are   File  Open...  Next  Former  Select...  Save...  Print...  Delete...  Canvas...  Visual Directory...  Quit    Edit  Undo  Redo  Cut  Copy  Paste    View  Half Size  Original Size  Double Size  Resize...  Apply  Refresh  Restore    Transform  Crop  Chop  Flop  Flip  Rotate Right  Rotate Left  Rotate...  Shear...  Roll...  Trim Edges    Enhance  Hue...  Saturation...  Brightness...  Gamma...  Spiff...  Dull  Equalize  Normalize  Negate  GRAYscale  Quantize...    Effects  Despeckle  Emboss  Reduce Noise  Add Noise  Sharpen...  Blur...  Threshold...  Edge Detect...  Spread...  Shade...  Raise...  Segment...    F/X  Solarize...  Swirl...  Implode...  Wave...  Oil Paint...  Charcoal Draw...    Image Edit  Annotate...  Draw...  Color...  Matte...  Composite...  Add Border...  Add Frame...  Comment...  Launch...  Region of Interest...    Miscellany  Image Info  Zoom Image  Show Preview...  Show Histogram  Show Matte  Background...  Slide Show  Preferences...    Help  Overview  Browse Documentation  About Display     Menu items with a indented triangle have a sub-menu. They are represented above as the indented items. To access a sub-menu item, move the pointer to the appropriate menu and press button 1 and drag. When you find the desired sub-menu item, release the button and the command is executed. Move the pointer away from the sub-menu if you decide not to execute a particular command.", 
            "title": "\u547d\u4ee4\u5c0f\u90e8\u4ef6"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_10", 
            "text": "Accelerators are one or two key presses that effect a particular command. The keyboard accelerators that display understands is:     \u5feb\u6377\u952e  \u63cf\u8ff0      Ctl+O  Press to load an image from a file.    space  Press to display the next image. If the image is a multi-paged document such as a PostScript document, you can skip ahead several pages by preceding this command with a number. For example to display the fourth page beyond the current page, press 4space.    backspace  Press to display the former image. If the image is a multi-paged document such as a PostScript document, you can skip behind several pages by preceding this command with a number. For example to display the fourth page preceding the current page, press 4n.    Ctl-S  Press to save the image to a file.    Ctl-P  Press to print the image to a PostScript printer.    Ctl-D  Press to delete an image file.    Ctl-N  Press to create a blank canvas.    Ctl-Q  Press to discard all images and exit program.    Ctl+Z  Press to undo last image transformation.    Ctl+R  Press to redo last image transformation.    Ctl-X  Press to cut a region of the image.    Ctl-C  Press to copy a region of the image.    Ctl-V  Press to paste a region to the image.     Press to halve the image size.    .  Press to return to the original image size.    ??? info \"  Press to double the image size.    %  Press to resize the image to a width and height you specify.    Cmd-A  Press to make any image transformations permanent. By default, any image size transformations are applied to the original image to create the image displayed on the X server.  However, the transformations are not permanent (i.e. the original image does not change size only the X image does). For example, if you press \" \" the X image will appear to double in size, but the original image will in fact remain the same size.  To force the original image to double in size, press \" \" followed by \"Cmd-A\".    @  Press to refresh the image window.    C  Press to crop the image.    [  Press to chop the image.    H  Press to flop image in the horizontal direction.    V  Press to flip image in the vertical direction.    /  Press to rotate the image 90 degrees clockwise.    \\  Press to rotate the image 90 degrees counter-clockwise.    -  Press to rotate the image the number of degrees you specify.    S  Press to shear the image the number of degrees you specify.    R  Press to roll the image.    T  Press to trim the image edges.    Shft-H  Press to vary the color hue.    Shft-S  Press to vary the color saturation.    Shft-L  Press to vary the image brightness.    Shft-G  Press to gamma correct the image.    Shft-C  Press to spiff up the image contrast.    Shft-Z  Press to dull the image contrast.    =  Press to perform histogram equalization on the image.    Shft-N  Press to perform histogram normalization on the image.    Shft-~  Press to negate the colors of the image.    .  Press to convert the image colors to gray.    Shft-#  Press to set the maximum number of unique colors in the image.    F2  Press to reduce the speckles in an image.    F2  Press to emboss an image.    F4  Press to eliminate peak noise from an image.    F5  Press to add noise to an image.    F6  Press to sharpen an image.    F7  Press to blur image an image.    F8  Press to threshold the image.    F9  Press to detect edges within an image.    F10  Press to displace pixels by a random amount.    F11  Press to shade the image using a distant light source.    F12  Press to lighten or darken image edges to create a 3-D effect.    F13  Press to segment the image by color.    Meta-S  Press to swirl image pixels about the center.    Meta-I  Press to implode image pixels about the center.    Meta-W  Press to alter an image along a sine wave.    Meta-P  Press to simulate an oil painting.    Meta-C  Press to simulate a charcoal drawing.    Alt-X  Press to composite the image with another.    Alt-A  Press to annotate the image with text.    Alt-D  Press to draw a line on the image.    Alt-P  Press to edit an image pixel color.    Alt-M  Press to edit the image matte information.    Alt-X  Press to composite the image with another.    Alt-A  Press to add a border to the image.    Alt-F  Press to add a ornamental frame to the image.    Alt-Shft-!  Press to add an image comment.    Ctl-A  Press to apply image processing techniques to a region of interest.    Shft-?  Press to display information about the image.    Shft-+  Press to map the zoom image window.    Shft-P  Press to preview an image enhancement, effect, or f/x.    F1  Press to display helpful information about the \"display\" utility.    Find  Press to browse documentation about GraphicsMagick.    1-9  Press to change the level of magnification.     Use the arrow keys to move the image one pixel up, down, left, or right within the magnify window. Be sure to first map the magnify window by pressing button 2.  Press ALT and one of the arrow keys to trim off one pixel from any side of the image.", 
            "title": "\u952e\u76d8\u52a0\u901f\u5668\u00b6"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#x-resources", 
            "text": "Display options can appear on the command line or in your X resource file. Options on the command line supersede values specified in your X resource file. See X(1) for more information on X resources.  Most display options have a corresponding X resource. In addition, display uses the following X resources:  background (class Background) Specifies the preferred color to use for the Image window background. The default is #ccc. ??? info \"borderColor (class BorderColor)  Specifies the preferred color to use for the Image window border. The default is #ccc.  borderWidth (class BorderWidth) Specifies the width in pixels of the image window border. The default is 2. browseCommand (class browseCommand) Specifies the name of the preferred browser when displaying GraphicsMagick documentation. The default is netscape %s. confirmExit (class ConfirmExit) Display pops up a dialog box to confirm exiting the program when exiting the program. Set this resource to False to exit without a confirmation. displayGamma (class DisplayGamma) Specifies the gamma of the X server. You can apply separate gamma values to the red, green, and blue channels of the image with a gamma value list delineated with slashes (i.e. 1.7/2.3/1.2). The default is 2.2. displayWarnings (class DisplayWarnings) Display pops up a dialog box whenever a warning message occurs. Set this resource to False to ignore warning messages. font (class FontList) Specifies the name of the preferred font to use in normal formatted text. The default is 14 point Helvetica. font[1-9] (class Font[1-9]) Specifies the name of the preferred font to use when annotating the image window with text. The default fonts are fixed, variable, 5x8, 6x10, 7x13bold, 8x13bold, 9x15bold, 10x20, and 12x24. foreground (class Foreground) Specifies the preferred color to use for text within the image window. The default is black. gammaCorrect (class gammaCorrect) This resource, if true, will lighten or darken an image of known gamma to match the gamma of the display (see resource displayGamma). The default is True. geometry (class Geometry) Specifies the preferred size and position of the image window. It is not necessarily obeyed by all window managers. Offsets, if present, are handled in X(1) style. A negative x offset is measured from the right edge of the screen to the right edge of the icon, and a negative y offset is measured from the bottom edge of the screen to the bottom edge of the icon. iconGeometry (class IconGeometry) Specifies the preferred size and position of the application when iconified. It is not necessarily obeyed by all window managers. Offsets, if present, are handled in the same manner as in class Geometry. iconic (class Iconic) This resource indicates that you would prefer that the application's windows initially not be visible as if the windows had be immediately iconified by you. Window managers may choose not to honor the application's request. magnify (class Magnify) specifies an integral factor by which the image should be enlarged. The default is 3. This value only affects the magnification window which is invoked with button number 3 after the image is displayed. matteColor (class MatteColor) Specify the color of windows. It is used for the backgrounds of windows, menus, and notices. A 3D effect is achieved by using highlight and shadow colors derived from this color. Default value: #697B8F. name (class Name) This resource specifies the name under which resources for the application should be found. This resource is useful in shell aliases to distinguish between invocations of an application, without resorting to creating links to alter the executable file name. The default is the application name. pen[1-9] (class Pen[1-9]) Specifies the color of the preferred font to use when annotating the image window with text. The default colors are black, blue, green, cyan, gray, red, magenta, yellow, and white. printCommand (class PrintCommand) This command is executed whenever Print is issued. In general, it is the command to print PostScript to your printer. Default value: lp -c -s %i. sharedMemory (class SharedMemory) This resource specifies whether display should attempt use shared memory for pixmaps. GraphicsMagick must be compiled with shared memory support, and the display must support the MIT-SHM extension. Otherwise, this resource is ignored. The default is True. textFont (class textFont) Specifies the name of the preferred font to use in fixed (typewriter style) formatted text. The default is 14 point Courier. title (class Title) This resource specifies the title to be used for the image window. This information is sometimes used by a window manager to provide a header identifying the window. The default is the image file name. undoCache (class UndoCache) Specifies, in mega-bytes, the amount of memory in the undo edit cache. Each time you modify the image it is saved in the undo edit cache as long as memory is available. You can subsequently undo one or more of these transformations. The default is 16 Megabytes. usePixmap (class UsePixmap) Images are maintained as a XImage by default. Set this resource to True to utilize a server Pixmap instead. This option is useful if your image exceeds the dimensions of your server screen and you intend to pan the image. Panning is much faster with Pixmaps than with a XImage. Pixmaps are considered a precious resource, use them with discretion. To set the geometry of the Magnify or Pan or window, use the geometry resource. For example, to set the Pan window geometry to 256x256, use:  gm display.pan.geometry: 256x256", 
            "title": "X Resources"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_11", 
            "text": "To select an image to display, choose Open of the File sub-menu from the Command widget. A file browser is displayed. To choose a particular image file, move the pointer to the filename and press any button. The filename is copied to the text window. Next, press Open or press the RETURN key. Alternatively, you can type the image file name directly into the text window. To descend directories, choose a directory name and press the button twice quickly. A scrollbar allows a large list of filenames to be moved through the viewing area if it exceeds the size of the list area.  You can trim the list of file names by using shell globbing characters. For example, type - .jpg to list only files that end with .jpg.  To select your image from the X server screen instead of from a file, Choose Grab of the Open widget.  Back to Contents", 
            "title": "\u56fe\u50cf\u52a0\u8f7d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_12", 
            "text": "To create a Visual Image Directory, choose Visual Directory of the File sub-menu from the Command widget . A file browser is displayed. To create a Visual Image Directory from all the images in the current directory, press Directory or press the RETURN key. Alternatively, you can select a set of image names by using shell globbing characters. For example, type - .jpg to include only files that end with .jpg. To descend directories, choose a directory name and press the button twice quickly. A scrollbar allows a large list of filenames to be moved through the viewing area if it exceeds the size of the list area.  After you select a set of files, they are turned into thumbnails and tiled onto a single image. Now move the pointer to a particular thumbnail and press button 3 and drag. Finally, select Open. The image represented by the thumbnail is displayed at its full size. Choose Next from the File sub-menu of the Command widget to return to the Visual Image Directory.", 
            "title": "\u89c6\u89c9\u56fe\u50cf\u76ee\u5f55"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_13", 
            "text": "Note that cut information for image window is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GRAYScale, PseudoColor). Correct cutting behavior may require a TrueColor or DirectColor visual or a Standard Colormap.  To begin, press choose Cut of the Edit sub-menu from the Command widget. Alternatively, press F3 in the image window.  A small window appears showing the location of the cursor in the image window. You are now in cut mode. In cut mode, the Command widget has these options:   Help  Dismiss   To define a cut region, press button 1 and drag. The cut region is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the cut region, release the button. You are now in rectify mode. In rectify mode, the Command widget has these options:   Cut  Help  Dismiss   You can make adjustments by moving the pointer to one of the cut rectangle corners, pressing a button, and dragging. Finally, press Cut to commit your copy region. To exit without cutting the image, press Dismiss.  Back to Contents", 
            "title": "\u56fe\u50cf\u526a\u5207\u5230\u526a\u8d34\u677f"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_14", 
            "text": "To begin, press choose Copy of the Edit sub-menu from the Command widget. Alternatively, press F4 in the image window.  A small window appears showing the location of the cursor in the image window. You are now in copy mode. In copy mode, the Command widget has these options:   Help  Dismiss   To define a copy region, press button 1 and drag. The copy region is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the copy region, release the button. You are now in rectify mode. In rectify mode, the Command widget has these options:   Copy  Help  Dismiss   You can make adjustments by moving the pointer to one of the copy rectangle corners, pressing a button, and dragging. Finally, press Copy to commit your copy region. To exit without copying the image, press Dismiss.", 
            "title": "\u56fe\u50cf\u62f7\u8d1d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_15", 
            "text": "To begin, press choose Paste of the Edit sub-menu from the Command widget. Alternatively, press F5 in the image window.  A small window appears showing the location of the cursor in the image window. You are now in Paste mode. To exit immediately, press Dismiss. In Paste mode, the Command widget has these options:   Operators  over  in  out  atop  xor  plus  minus  add  subtract  difference  multiply  bumpmap  replace    Help  Dismiss   Choose a composite operation from the Operators sub-menu of the Command widget. How each operator behaves is described below. image window is the image currently displayed on your X server and image is the image obtained with the File Browser widget.  over The result is the union of the two image shapes, with image obscuring image window in the region of overlap. in The result is simply image cut by the shape of image window. None of the image data of image window is in the result. out The resulting image is image with the shape of image window cut out. atop The result is the same shape as image window, with image obscuring image window where the image shapes overlap. Note this differs from over because the portion of image outside image window's shape does not appear in the result. xor The result is the image data from both image and image window that is outside the overlap region. The overlap region is blank. plus The result is just the sum of the image data. Output values are cropped to the maximum value (no overflow). This operation is independent of the matte channels. minus The result of image - image window, with underflow cropped to zero. The matte channel is ignored (set to opaque, full coverage). add The result of image + image window, with overflow wrapping around (mod MaxRGB+1). subtract The result of image - image window, with underflow wrapping around (mod MaxRGB+1). The add and subtract operators can be used to perform reversible transformations. difference The result of abs(image - image window). This is useful for comparing two very similar images. multiply The result of image -  image window. This is useful for the creation of drop-shadows. bumpmap The result of image window shaded by window. replace The resulting image is image window replaced with image. Here the matte information is ignored. The image compositor requires a matte, or alpha channel in the image for some operations. This extra channel usually defines a mask which represents a sort of a cookie-cutter for the image. This is the case when matte is 255 (full coverage) for pixels inside the shape, zero outside, and between zero and 255 on the boundary. If image does not have a matte channel, it is initialized with 0 for any pixel matching in color to pixel location (0,0), otherwise 255. See Matte Editing for a method of defining a matte channel.  Note that matte information for image window is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GrayScale, PseudoColor). Correct compositing behavior may require a TrueColor or DirectColor visual or a Standard Colormap.  Choosing a composite operator is optional. The default operator is replace. However, you must choose a location to composite your image and press button 1. Press and hold the button before releasing and an outline of the image will appear to help you identify your location.  The actual colors of the pasted image is saved. However, the color that appears in image window may be different. For example, on a monochrome screen image window will appear black or white even though your pasted image may have many colors. If the image is saved to a file it is written with the correct colors. To assure the correct colors are saved in the final image, any PseudoClass image is promoted to DirectClass. To force a PseudoClass image to remain PseudoClass, use -colors.", 
            "title": "\u56fe\u7247\u7c98\u8d34"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_16", 
            "text": "To begin, press choose Crop of the Transform submenu from the Command widget. Alternatively, press C in the image window.  A small window appears showing the location of the cursor in the image window. You are now in crop mode. In crop mode, the Command widget has these options:   Help  Dismiss   To define a cropping region, press button 1 and drag. The cropping region is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the cropping region, release the button. You are now in rectify mode. In rectify mode, the Command widget has these options:   Crop  Help  Dismiss   You can make adjustments by moving the pointer to one of the cropping rectangle corners, pressing a button, and dragging. Finally, press Crop to commit your cropping region. To exit without cropping the image, press Dismiss.", 
            "title": "\u56fe\u50cf\u88c1\u526a"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_17", 
            "text": "An image is chopped interactively. There is no command line argument to chop an image. To begin, choose Chop of the Transform sub-menu from the Command widget. Alternatively, press [ in the Image window.  You are now in Chop mode. To exit immediately, press Dismiss. In Chop mode, the Command widget has these options:   Direction  horizontal  vertical  Help  Dismiss   If the you choose the horizontal direction (this is the default), the area of the image between the two horizontal endpoints of the chop line is removed. Otherwise, the area of the image between the two vertical endpoints of the chop line is removed.  Select a location within the image window to begin your chop, press and hold any button. Next, move the pointer to another location in the image. As you move a line will connect the initial location and the pointer. When you release the button, the area within the image to chop is determined by which direction you choose from the Command widget.  To cancel the image chopping, move the pointer back to the starting point of the line and release the button.", 
            "title": "\u56fe\u50cf\u5207"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_18", 
            "text": "Press the / key to rotate the image 90 degrees or \\ to rotate -90 degrees. To interactively choose the degree of rotation, choose Rotate... of the Transform submenu from the Command Widget. Alternatively, press -  in the image window.  A small horizontal line is drawn next to the pointer. You are now in rotate mode. To exit immediately, press Dismiss. In rotate mode, the Command widget has these options:   Pixel Color  black  blue  cyan  green  gray  red  magenta  yellow  white  Browser...    Direction  horizontal  vertical    Help  Dismiss   Choose a background color from the Pixel Color sub-menu. Additional background colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9.  If you choose the color browser and press Grab, you can select the background color by moving the pointer to the desired color on the screen and press any button.  Choose a point in the image window and press this button and hold. Next, move the pointer to another location in the image. As you move a line connects the initial location and the pointer. When you release the button, the degree of image rotation is determined by the slope of the line you just drew. The slope is relative to the direction you choose from the Direction sub-menu of the Command widget.  To cancel the image rotation, move the pointer back to the starting point of the line and release the button.", 
            "title": "\u56fe\u50cf\u65cb\u8f6c"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_19", 
            "text": "Choose Effects- `Segment to segment an image by analyzing the histograms of the color components and identifying units that are homogeneous with the fuzzy c-means technique. The scale-space filter analyzes the histograms of the three color components of the image and identifies a set of classes. The extents of each class is used to coarsely segment the image with thresholding. The color associated with each class is determined by the mean color of all pixels within the extents of a particular class. Finally, any unclassified pixels are assigned to the closest class with the fuzzy c-means technique.  The fuzzy c-Means algorithm can be summarized as follows:   Build a histogram, one for each color component of the image.  For each histogram, successively apply the scale-space filter and build an interval tree of zero crossings in the second derivative at each scale. Analyze this scale-space \"fingerprint\" to determine which peaks or valleys in the histogram are most predominant.  The fingerprint defines intervals on the axis of the histogram. Each interval contains either a minima or a maxima in the original signal. If each color component lies within the maxima interval, that pixel is considered \"classified\" and is assigned an unique class number.  Any pixel that fails to be classified in the above thresholding pass is classified using the fuzzy c-Means technique. It is assigned to one of the classes discovered in the histogram analysis phase.   The fuzzy c-Means technique attempts to cluster a pixel by finding the local minima of the generalized within group sum of squared error objective function. A pixel is assigned to the closest class of which the fuzzy membership has a maximum value.  For additional information see:  Young Won Lim ,  Sang Uk Lee , \"On The Color Image Segmentation Algorithm Based on the Thresholding and the Fuzzy c-Means Techniques\", Pattern Recognition, Volume 23, Number 9, pages 935-952, 1990.", 
            "title": "\u56fe\u50cf\u5206\u5272"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_20", 
            "text": "An image is annotated interactively. There is no command line argument to annotate an image. To begin, choose Annotate of the Image Edit sub-menu from the Command widget. Alternatively, press a in the image window.  A small window appears showing the location of the cursor in the image window. You are now in annotate mode. To exit immediately, press Dismiss. In annotate mode, the Command widget has these options:  Font Name\nfixed\nvariable\n5x8\n6x10\n7x13bold\n8x13bold\n9x15bold\n10x20\n12x24\nBrowser...\nFont Color\nblack\nblue\ncyan\ngreen\ngray\nred\nmagenta\nyellow\nwhite\ntransparent\nBrowser...\nBox Color\nblack\nblue\ncyan\ngreen\ngray\nred\nmagenta\nyellow\nwhite\ntransparent\nBrowser...\nRotate Text\n-90\n-45\n-30\n0\n30\n45\n90\n180\nDialog...\nHelp\nDismiss\nChoose a font name from the Font Name sub-menu. Additional font names can be specified with the font browser. You can change the menu names by setting the X resources font1 through font9.  Choose a font color from the Font Color sub-menu. Additional font colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9.  If you select the color browser and press Grab, you can choose the font color by moving the pointer to the desired color on the screen and press any button.  If you choose to rotate the text, choose Rotate Text from the menu and select an angle. Typically you will only want to rotate one line of text at a time. Depending on the angle you choose, subsequent lines may end up overwriting each other.  Choosing a font and its color is optional. The default font is fixed and the default color is black. However, you must choose a location to begin entering text and press a button. An underscore character will appear at the location of the pointer. The cursor changes to a pencil to indicate you are in text mode. To exit immediately, press Dismiss.  In text mode, any key presses will display the character at the location of the underscore and advance the underscore cursor. Enter your text and once completed press Apply to finish your image annotation. To correct errors press BACK SPACE. To delete an entire line of text, press DELETE. Any text that exceeds the boundaries of the image window is automatically continued onto the next line.  The actual color you request for the font is saved in the image. However, the color that appears in your Image window may be different. For example, on a monochrome screen the text will appear black or white even if you choose the color red as the font color. However, the image saved to a file with -write is written with red lettering. To assure the correct color text in the final image, any PseudoClass image is promoted to DirectClass (see miff(5)). To force a PseudoClass image to remain PseudoClass, use -colors.  Back to Contents", 
            "title": "\u56fe\u50cf\u6ce8\u91ca"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_21", 
            "text": "An image composite is created interactively. There is no command line argument to composite an image. To begin, choose Composite of the Image Edit from the Command widget. Alternatively, press x in the Image window.  First a popup window is displayed requesting you to enter an image name. Press Composite, Grab or type a file name. Press Cancel if you choose not to create a composite image. When you choose Grab, move the pointer to the desired window and press any button.  If the Composite image does not have any matte information, you are informed and the file browser is displayed again. Enter the name of a mask image. The image is typically grayscale and the same size as the composite image. If the image is not grayscale, it is converted to grayscale and the resulting intensities are used as matte information.  A small window appears showing the location of the cursor in the image window. You are now in composite mode. To exit immediately, press Dismiss. In composite mode, the Command widget has these options:   Operators  over  in  out  atop  xor  plus  minus  add  subtract  difference  bumpmap  replace  Blend  Displace  Help  Dismiss   Choose a composite operation from the Operators sub-menu of the Command widget. How each operator behaves is described below. image window is the image currently displayed on your X server and image is the image obtained  over The result is the union of the two image shapes, with image obscuring image window in the region of overlap. in The result is simply image cut by the shape of image window. None of the image data of image window is in the result. out The resulting image is image with the shape of image window cut out. atop The result is the same shape as image window, with image obscuring image window where the image shapes overlap. Note this differs from over because the portion of image outside image window's shape does not appear in the result. xor The result is the image data from both image and image window that is outside the overlap region. The overlap region is blank. plus The result is just the sum of the image data. Output values are cropped to 255 (no overflow). This operation is independent of the matte channels. minus The result of image - image window, with underflow cropped to zero. The matte channel is ignored (set to 255, full coverage). add The result of image + image window, with overflow wrapping around (mod 256). subtract The result of image - image window, with underflow wrapping around (mod 256). The add and subtract operators can be used to perform reversible transformations. difference The result of abs(image - image window). This is useful for comparing two very similar images. bumpmap The result of image window shaded by window. replace The resulting image is image window replaced with image. Here the matte information is ignored. The image compositor requires a matte, or alpha channel in the image for some operations. This extra channel usually defines a mask which represents a sort of a cookie-cutter for the image. This is the case when matte is 255 (full coverage) for pixels inside the shape, zero outside, and between zero and 255 on the boundary. If image does not have a matte channel, it is initialized with 0 for any pixel matching in color to pixel location (0,0), otherwise 255. See Matte Editing for a method of defining a matte channel.  If you choose blend, the composite operator becomes over. The image matte channel percent transparency is initialized to factor. The image window is initialized to (100-factor). Where factor is the value you specify in the Dialog widget.  Displace shifts the image pixels as defined by a displacement map. With this option, image is used as a displacement map. Black, within the displacement map, is a maximum positive displacement. White is a maximum negative displacement and middle gray is neutral. The displacement is scaled to determine the pixel shift. By default, the displacement applies in both the horizontal and vertical directions. However, if you specify mask, image is the horizontal X displacement and mask the vertical Y displacement.  Note that matte information for image window is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GrayScale, PseudoColor). Correct compositing behavior may require a TrueColor or DirectColor visual or a Standard Colormap.  Choosing a composite operator is optional. The default operator is replace. However, you must choose a location to composite your image and press button 1. Press and hold the button before releasing and an outline of the image will appear to help you identify your location.  The actual colors of the composite image is saved. However, the color that appears in image window may be different. For example, on a monochrome screen Image window will appear black or white even though your composited image may have many colors. If the image is saved to a file it is written with the correct colors. To assure the correct colors are saved in the final image, any PseudoClass image is promoted to DirectClass (see miff). To force a PseudoClass image to remain PseudoClass, use -colors.", 
            "title": "\u56fe\u50cf\u5408\u6210"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_22", 
            "text": "Changing the the color of a set of pixels is performed interactively. There is no command line argument to edit a pixel. To begin, choose Color from the Image Edit submenu of the Command widget. Alternatively, press c in the image window.  A small window appears showing the location of the cursor in the image window. You are now in color edit mode. To exit immediately, press Dismiss. In color edit mode, the Command widget has these options:   Method  point  replace  floodfill  reset    Pixel Color  black  blue  cyan  green  gray  red  magenta  yellow  white  Browser...    Border Color  black  blue  cyan  green  gray  red  magenta  yellow  white  Browser...    Fuzz  0  2  4  8  16  Dialog...    Undo  Help  Dismiss   Choose a color editing method from the Method sub-menu of the Command widget. The point method recolors any pixel selected with the pointer unless the button is released. The replace method recolors any pixel that matches the color of the pixel you select with a button press. Floodfill recolors any pixel that matches the color of the pixel you select with a button press and is a neighbor. Whereas filltoborder changes the matte value of any neighbor pixel that is not the border color. Finally reset changes the entire image to the designated color.  Next, choose a pixel color from the Pixel Color sub-menu. Additional pixel colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9.  Now press button 1 to select a pixel within the Image window to change its color. Additional pixels may be recolored as prescribed by the method you choose. additional pixels by increasing the Delta value.  If the Magnify widget is mapped, it can be helpful in positioning your pointer within the image (refer to button 2). Alternatively you can select a pixel to recolor from within the Magnify widget. Move the pointer to the Magnify widget and position the pixel with the cursor control keys. Finally, press a button to recolor the selected pixel (or pixels).  The actual color you request for the pixels is saved in the image. However, the color that appears in your Image window may be different. For example, on a monochrome screen the pixel will appear black or white even if you choose the color red as the pixel color. However, the image saved to a file with -write is written with red pixels. To assure the correct color text in the final image, any PseudoClass image is promoted to DirectClass To force a PseudoClass image to remain PseudoClass, use -colors.", 
            "title": "\u989c\u8272\u7f16\u8f91"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#matte-editing", 
            "text": "Matte information within an image is useful for some operations such as image compositing. This extra channel usually defines a mask which represents a sort of a cookie-cutter for the image. This is the case when matte is 255 (full coverage) for pixels inside the shape, zero outside, and between zero and 255 on the boundary.  Setting the matte information in an image is done interactively. There is no command line argument to edit a pixel. To begin, and choose Matte of the Image Edit sub-menu from the Command widget.  Alternatively, press m in the image window.  A small window appears showing the location of the cursor in the image window. You are now in matte edit mode. To exit immediately, press Dismiss. In matte edit mode, the Command widget has these options:   Method  point  replace  floodfill  reset    Border Color  black  blue  cyan  green  gray  red  magenta  yellow  white  Browser...    Fuzz  0  2  4  8  16  Dialog...    Matte  Undo  Help  Dismiss   Choose a matte editing method from the Method sub-menu of the Command widget. The point method changes the matte value of the any pixel selected with the pointer until the button is released. The replace method changes the matte value of any pixel that matches the color of the pixel you select with a button press. Floodfill changes the matte value of any pixel that matches the color of the pixel you select with a button press and is a neighbor. Whereas filltoborder recolors any neighbor pixel that is not the border color. Finally reset changes the entire image to the designated matte value.\nChoose Matte Value and a dialog appears requesting a matte value. Enter a value between 0 and 255. This value is assigned as the matte value of the selected pixel or pixels.  Now, press any button to select a pixel within the Image window to change its matte value. You can change the matte value of additional pixels by increasing the Delta value. The Delta value is first added then subtracted from the red, green, and blue of the target color. Any pixels within the range also have their matte value updated.  If the Magnify widget is mapped, it can be helpful in positioning your pointer within the image (refer to button 2). Alternatively you can select a pixel to change the matte value from within the Magnify widget. Move the pointer to the Magnify widget and position the pixel with the cursor control keys. Finally, press a button to change the matte value of the selected pixel (or pixels).  Matte information is only valid in a DirectClass image. Therefore, any PseudoClass image is promoted to DirectClass. Note that matte information for PseudoClass is not retained for colormapped X server visuals (e.g. StaticColor, StaticColor, GrayScale, PseudoColor) unless you immediately save your image to a file (refer to Write). Correct matte editing behavior may require a TrueColor or DirectColor visual or a Standard Colormap.", 
            "title": "Matte Editing"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_23", 
            "text": "An image is drawn upon interactively. There is no command line argument to draw on an image. To begin, choose Draw of the Image Edit sub-menu from the Command widget. Alternatively, press d in the image window.  The cursor changes to a crosshair to indicate you are in draw mode. To exit immediately, press Dismiss. In draw mode, the Command widget has these options:   Primitive  point  line  rectangle  fill rectangle  circle  fill circle  ellipse  fill ellipse  polygon  fill polygon    Color  black  blue  cyan  green  gray  red  magenta  yellow  white  transparent  Browser...    Stipple  Brick  Diagonal  Scales  Vertical  Wavy  Translucent  Opaque  Open...    Width  1  2  4  8  16  Dialog...    Undo  Help  Dismiss   Choose a drawing primitive from the Primitive sub-menu.  Next, choose a color from the Color sub-menu. Additional colors can be specified with the color browser. You can change the menu colors by setting the X resources pen1 through pen9. The transparent color updates the image matte channel and is useful for image compositing.  If you choose the color browser and press Grab, you can select the primitive color by moving the pointer to the desired color on the screen and press any button. The transparent color updates the image matte channel and is useful for image compositing.  Choose a stipple, if appropriate, from the Stipple sub-menu. Additional stipples can be specified with the file browser. Stipples obtained from the file browser must be on disk in the X11 bitmap format.  Choose a line width, if appropriate, from the Width sub-menu. To choose a specific width select the Dialog widget.  Choose a point in the image window and press button 1 and hold. Next, move the pointer to another location in the image. As you move, a line connects the initial location and the pointer. When you release the button, the image is updated with the primitive you just drew. For polygons, the image is updated when you press and release the button without moving the pointer.  To cancel image drawing, move the pointer back to the starting point of the line and release the button.", 
            "title": "\u56fe\u5f62\u7ed8\u5236"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_24", 
            "text": "To begin, press choose Region of Interest of the Pixel Transform sub-menu from the Command widget. Alternatively, press R in the image window.  A small window appears showing the location of the cursor in the image window. You are now in region of interest mode. In region of interest mode, the Command widget has these options:   Help  Dismiss   To define a region of interest, press button 1 and drag. The region of interest is defined by a highlighted rectangle that expands or contracts as it follows the pointer. Once you are satisfied with the region of interest, release the button. You are now in apply mode. In apply mode the Command widget has these options:   File  Save...  Print...    Edit  Undo  Redo    Transform  Flip  Flop  Rotate Right  Rotate Left    Enhance  Hue...  Saturation...  Brightness...  Gamma...  Spiff  Dull  Equalize  Normalize  Negate  GRAYscale  Quantize...    Effects  Despeckle  Emboss  Reduce Noise  Add Noise  Sharpen...  Blur...  Threshold...  Edge Detect...  Spread...  Shade...  Raise...  Segment...    F/X  Solarize...  Swirl...  Implode...  Wave...  Oil Paint  Charcoal Draw...    Miscellany  Image Info  Zoom Image  Show Preview...  Show Histogram  Show Matte    Help  Dismiss   You can make adjustments to the region of interest by moving the pointer to one of the rectangle corners, pressing a button, and dragging. Finally, choose an image processing technique from the Command widget. You can choose more than one image processing technique to apply to an area. Alternatively, you can move the region of interest before applying another image processing technique. To exit, press Dismiss.", 
            "title": "\u5174\u8da3\u533a\u57df"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_25", 
            "text": "When an image exceeds the width or height of the X server screen, display maps a small panning icon. The rectangle within the panning icon shows the area that is currently displayed in the the image window. To pan about the image, press any button and drag the pointer within the panning icon. The pan rectangle moves with the pointer and the image window is updated to reflect the location of the rectangle within the panning icon. When you have selected the area of the image you wish to view, release the button.  Use the arrow keys to pan the image one pixel up, down, left, or right within the image window.  The panning icon is withdrawn if the image becomes smaller than the dimensions of the X server screen.", 
            "title": "\u56fe\u50cf\u5e73\u79fb"
        }, 
        {
            "location": "/GraphicsMagick/Manual/display/#_26", 
            "text": "Preferences affect the default behavior of display(1). The preferences are either true or false and are stored in your home directory as .displayrc:  display image centered on a backdrop This backdrop covers the entire workstation screen and is useful for hiding other X window activity while viewing the image. The color of the backdrop is specified as the background color. Refer to X Resources for details. confirm on program exit Ask for a confirmation before exiting the display(1) program. correct image for display gamma If the image has a known gamma, the gamma is corrected to match that of the X server (see the X Resource displayGamma). display warning messages Display any warning messages. apply Floyd/Steinberg error diffusion to image The basic strategy of dithering is to trade intensity resolution for spatial resolution by averaging the intensities of several neighboring pixels. Images which suffer from severe contouring when reducing colors can be improved with this preference. use a shared colormap for colormapped X visuals This option only applies when the default X server visual is PseudoColor or GRAYScale. Refer to -visual for more details. By default, a shared colormap is allocated. The image shares colors with other X clients. Some image colors could be approximated, therefore your image may look very different than intended. Otherwise the image colors appear exactly as they are defined. However, other clients may go technicolor when the image colormap is installed. display images as an X server pixmap Images are maintained as a XImage by default. Set this resource to True to utilize a server Pixmap instead. This option is useful if your image exceeds the dimensions of your server screen and you intend to pan the image. Panning is much faster with Pixmaps than with a XImage. Pixmaps are considered a precious resource, use them with discretion.", 
            "title": "\u7528\u6237\u504f\u597d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/", 
            "text": "gm identify\n\n\n\u547d\u540d\n\n\nidentify - describe an image or image sequence.\n\n\n\u5185\u5bb9\n\n\n\n\nSynopsis\n\n\nDescription\n\n\nOptions\n\n\n\n\n\u6982\u8981\n\n\ngm identify file \n[\n file ... \n]\n\n\n\n\n\n\u63cf\u8ff0\n\n\nIdentify describes the format and characteristics of one or more image files as internally supported by the software. It will also report if an image is incomplete or corrupt. The information displayed includes the scene number, the file name, the width and height of the image, whether the image is colormapped or not, the number of colors in the image, the number of bytes in the image, the format of the image (JPEG, PNM, etc.), and finally the number of seconds in both user time and elapsed time it took to read and process the image. If -verbose or +ping are provided as an option, the pixel read rate is also displayed. An example line output from identify follows:\n\n\nimages/aquarium.miff 640x480 PseudoClass 256c \n       308135b MIFF 0.000u 0:01\n\n\n\n\n\nIf -verbose is set, expect additional output including any image comment: \n\n\nImage\n:\n \nimages\n/\naquarium\n.\nmiff\n\n\nclass\n:\n \nPseudoClass\n\n\ncolors\n:\n \n256\n\n\nsignature\n:\n \neb5dca81dd93ae7e6ffae99a527eb5dca8\n...\n\n\nmatte\n:\n \nFalse\n\n\ngeometry\n:\n \n640\nx480\n\n   \ndepth\n:\n \n8\n\n\nbytes\n:\n \n308135\n\n\nformat\n:\n \nMIFF\n\n\ncomments\n:\n\n\nImported\n \nfrom\n \nMTV\n \nraster\n \nimage\n:\n \naquarium\n.\nmtv\n\n\n\n\n\n\nFor some formats, additional format-specific information about the file will be written if the -debug coder or -debug all option is used.\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect for the set of images immediately following, until the set is terminated by the appearance of any option or -noop.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-authenticate \nstring\ndecrypt image with this password\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-format \nstring\noutput formatted image characteristics\n-help\nprint usage instructions\n-interlace \ntype\nthe type of interlacing scheme\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-ping\nefficiently determine image characteristics\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u8bc6\u522b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/#gm-identify", 
            "text": "", 
            "title": "gm identify"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/#_1", 
            "text": "identify - describe an image or image sequence.", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/#_2", 
            "text": "Synopsis  Description  Options", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/#_3", 
            "text": "gm identify file  [  file ...  ]", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/#_4", 
            "text": "Identify describes the format and characteristics of one or more image files as internally supported by the software. It will also report if an image is incomplete or corrupt. The information displayed includes the scene number, the file name, the width and height of the image, whether the image is colormapped or not, the number of colors in the image, the number of bytes in the image, the format of the image (JPEG, PNM, etc.), and finally the number of seconds in both user time and elapsed time it took to read and process the image. If -verbose or +ping are provided as an option, the pixel read rate is also displayed. An example line output from identify follows:  images/aquarium.miff 640x480 PseudoClass 256c \n       308135b MIFF 0.000u 0:01  If -verbose is set, expect additional output including any image comment:   Image :   images / aquarium . miff  class :   PseudoClass  colors :   256  signature :   eb5dca81dd93ae7e6ffae99a527eb5dca8 ...  matte :   False  geometry :   640 x480 \n    depth :   8  bytes :   308135  format :   MIFF  comments :  Imported   from   MTV   raster   image :   aquarium . mtv   For some formats, additional format-specific information about the file will be written if the -debug coder or -debug all option is used.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/identify/#_5", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect for the set of images immediately following, until the set is terminated by the appearance of any option or -noop.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -authenticate  string decrypt image with this password -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -format  string output formatted image characteristics -help print usage instructions -interlace  type the type of interlacing scheme -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -ping efficiently determine image characteristics -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -size  width x height {+offset} width and height of the image -verbose print detailed information about the image -version print GraphicsMagick version string For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/", 
            "text": "\u5bfc\u5165\n\n\n\u547d\u540d\n\n\nimport - capture some or all of an X server screen and save the image to a file.\n\n\n\u5185\u5bb9\n\n\n\n\n\u63cf\u8ff0\n\n\n\u793a\u4f8b\n\n\n\u9009\u9879\n\n\n\n\n\u6982\u8981\n\n\ngm import [ options ... ] file\n\n\n\u63cf\u8ff0\n\n\nImport reads an image from any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen. Use display for redisplay, printing, editing, formatting, archiving, image processing, etc. of the captured image.\n\n\nThe target window can be specified by id, name, or may be selected by clicking the mouse in the desired window. If you press a button and then drag, a rectangle will form which expands and contracts as the mouse moves. To save the portion of the screen defined by the rectangle, just release the button. The keyboard bell is rung once at the beginning of the screen capture and twice when it completes.\n\n\n\u793a\u4f8b\n\n\nTo select an X window or an area of the screen with the mouse and save it in the MIFF image format to a file entitled window.miff, use:\n\n\ngm\n \nimport\n \nwindow.miff\n\n\n\n\n\n\nTo select an X window or an area of the screen with the mouse and save it in the Encapsulated PostScript format to include in another document, use:\n\n\ngm\n \nimport\n \nfigure.eps\n\n\n\n\n\n\nTo capture the entire X server screen in the JPEG image format in a file entitled root.jpeg, without using the mouse, use:\n\n\ngm\n \nimport\n \n-\nwindow\n \nroot\n \nroot\n.\njpeg\n\n\n\n\n\n\nTo capture the 512x256 area at the upper right corner of the X server screen in the PNG image format in a well-compressed file entitled corner.png, without using the mouse, use:\n\n\ngm\n \nimport\n \n-\nwindow\n \nroot\n \n-\ncrop\n \n512\nx256\n-\n0\n+\n0\n \n-\nquality\n \n90\n \ncorner\n.\npng\n\n\n\n\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect until it is explicitly changed by specifying the option again with a different effect.\n\n\nImport options can appear on the command line or in your X resources file. See X(1). Options on the command line supersede values specified in your X resources file.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-bordercolor \ncolor\nthe border color\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-comment \nstring\nannotate an image with a comment\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\n-debug \nevents\n\u542f\u52a8\u8c03\u8bd5\u8f93\u51fa\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-delay \n1/100ths of a second\ndisplay the next image after pausing\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\n\u56fe\u50cf\u6df1\u5ea6\n-descend\nobtain image by descending window hierarchy\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dither\napply Floyd/Steinberg error diffusion to the image\n-encoding \ntype\nspecify the text encoding\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-frame\ninclude the X window frame in the imported image\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-help\nprint usage instructions\n-interlace \ntype\nthe type of interlacing scheme\n-label \nname\nassign a label to an image\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-negate\nreplace every pixel with its complementary color\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\n-pause \nseconds\npause between snapshots [import]\n-ping\nefficiently determine image characteristics\n-pointsize \nvalue\npointsize of the PostScript, X11, or TrueType font\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\n-resize \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scene \nvalue\nset scene number\n-screen\nspecify the screen to capture\n-set \nattribute??? info \"\n`\nset an image attribute\n+set \nattribute\nunset an image attribute\n-silent\noperate silently\n-snaps \nvalue\nnumber of screen snapshots\n-thumbnail \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image (quickly)\n-transparent \ncolor\nmake this color transparent within the image\n-trim\ntrim an image\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u5bfc\u5165"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_1", 
            "text": "", 
            "title": "\u5bfc\u5165"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_2", 
            "text": "import - capture some or all of an X server screen and save the image to a file.", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_3", 
            "text": "\u63cf\u8ff0  \u793a\u4f8b  \u9009\u9879", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_4", 
            "text": "gm import [ options ... ] file", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_5", 
            "text": "Import reads an image from any visible window on an X server and outputs it as an image file. You can capture a single window, the entire screen, or any rectangular portion of the screen. Use display for redisplay, printing, editing, formatting, archiving, image processing, etc. of the captured image.  The target window can be specified by id, name, or may be selected by clicking the mouse in the desired window. If you press a button and then drag, a rectangle will form which expands and contracts as the mouse moves. To save the portion of the screen defined by the rectangle, just release the button. The keyboard bell is rung once at the beginning of the screen capture and twice when it completes.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_6", 
            "text": "To select an X window or an area of the screen with the mouse and save it in the MIFF image format to a file entitled window.miff, use:  gm   import   window.miff   To select an X window or an area of the screen with the mouse and save it in the Encapsulated PostScript format to include in another document, use:  gm   import   figure.eps   To capture the entire X server screen in the JPEG image format in a file entitled root.jpeg, without using the mouse, use:  gm   import   - window   root   root . jpeg   To capture the 512x256 area at the upper right corner of the X server screen in the PNG image format in a well-compressed file entitled corner.png, without using the mouse, use:  gm   import   - window   root   - crop   512 x256 - 0 + 0   - quality   90   corner . png", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/import/#_7", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect until it is explicitly changed by specifying the option again with a different effect.  Import options can appear on the command line or in your X resources file. See X(1). Options on the command line supersede values specified in your X resources file.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -bordercolor  color the border color -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -comment  string annotate an image with a comment -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image -debug  events \u542f\u52a8\u8c03\u8bd5\u8f93\u51fa -define  key {= value },... add coder/decoder specific options -delay  1/100ths of a second display the next image after pausing -density  width x height horizontal and vertical resolution in pixels of the image -depth  value \u56fe\u50cf\u6df1\u5ea6 -descend obtain image by descending window hierarchy -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dither apply Floyd/Steinberg error diffusion to the image -encoding  type specify the text encoding -endian  type specify endianness (MSB, LSB, or Native) of image -frame include the X window frame in the imported image -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -help print usage instructions -interlace  type the type of interlacing scheme -label  name assign a label to an image -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -monitor show progress indication -monochrome transform the image to black and white -negate replace every pixel with its complementary color -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas -pause  seconds pause between snapshots [import] -ping efficiently determine image characteristics -pointsize  value pointsize of the PostScript, X11, or TrueType font -quality  value JPEG/MIFF/PNG/TIFF compression level -resize  width x height {%}{@}{!}{ }{ } resize an image -rotate  degrees { }{ } rotate the image -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scene  value set scene number -screen specify the screen to capture -set  attribute??? info \" ` set an image attribute +set  attribute unset an image attribute -silent operate silently -snaps  value number of screen snapshots -thumbnail  width x height {%}{@}{!}{ }{ } resize an image (quickly) -transparent  color make this color transparent within the image -trim trim an image -verbose print detailed information about the image -version print GraphicsMagick version string For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/", 
            "text": "\u538b\u7f29\u9510\u5316\n\n\n\u547d\u540d\n\n\nmogrify - mogrify an image\n\n\n\u5185\u5bb9\n\n\nSynopsis\nDescription\nExamples\nOptions\n\n\n\u6982\u8981\n\n\ngm mogrify [ options ... ] file ... \n\n\n\u63cf\u8ff0\n\n\nMogrify transforms an image or a sequence of images. These transforms include image scaling, image rotation, color reduction, and others. Each transmogrified image overwrites the corresponding original image, unless an option such as -format causes the output filename to be different from the input filename. \n\n\nThe graphics formats supported by mogrify are listed in GraphicsMagick(1).\n\n\n\u793a\u4f8b\n\n\nTo convert all the TIFF files in a particular directory to JPEG, use:\n\n\ngm mogrify -format jpeg *.tiff\n\n\n\n\n\nTo convert a directory full of JPEG images to thumbnails, use:\n\n\ngm mogrify -size 120x120 *.jpg -resize 120x120 +profile \n*\n\n\n\n\n\n\nIn this example, '-size 120x120' gives a hint to the JPEG decoder that the images are going to be downscaled to 120x120, allowing it to run faster by avoiding returning full-resolution images to GraphicsMagick for the subsequent resizing operation. The '-resize 120x120' specifies the desired dimensions of the output images. It will be scaled so its largest dimension is 120 pixels. The '+profile \"*\"' removes any ICM, EXIF, IPTC, or other profiles that might be present in the input and aren't needed in the thumbnails.\nTo scale an image of a cockatoo to exactly 640 pixels in width and 480 pixels in height, use:\n\n\ngm mogrify -resize 640x480! cockatoo.miff\n\n\n\n\n\n\u9009\u9879\n\n\nOptions are processed in command line order. Any option you specify on the command line remains in effect for the set of images that follows, until the set is terminated by the appearance of any option or -noop.\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-affine \nmatrix\ndrawing transform matrix\n-antialias\nremove pixel aliasing\n-asc-cdl \nspec\napply ASC CDL color transform\n-authenticate \nstring\ndecrypt image with this password\n-auto-orient\norient (rotate) image so it is upright\n-background \ncolor\nthe background color\n-black-threshold red[,green][,blue][,opacity]\npixels below the threshold become black\n-blue-primary \nx\n,\ny\nblue chromaticity primary point\n-blur \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\n-border \nwidth\nx\nheight\nsurround the image with a border of color\n-bordercolor \ncolor\nthe border color\n-channel \ntype\nthe type of channel\n-charcoal \nfactor\nsimulate a charcoal drawing\n-colorize \nvalue\ncolorize the image with the pen color\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-comment \nstring\nannotate an image with a comment\n-compose \noperator\nthe type of image composition\n-compress \ntype\nthe type of image compression\n-contrast\nenhance or reduce the image contrast\n-convolve \nkernel\nconvolve image with the specified convolution kernel\n-create-directories\ncreate output directory if required\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\n-cycle \namount\ndisplace image colormap by amount\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-delay \n1/100ths of a second\ndisplay the next image after pausing\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-despeckle\nreduce the speckles within an image\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dither\napply Floyd/Steinberg error diffusion to the image\n-draw \nstring\nannotate an image with one or more graphic primitives\n-edge \nradius\ndetect edges within an image\n-emboss \nradius\nemboss an image\n-encoding \ntype\nspecify the text encoding\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-enhance\napply a digital filter to enhance a noisy image\n-equalize\nperform histogram equalization to the image\n-extent \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\ncomposite image on background color canvas image\n-fill \ncolor\ncolor to use when filling a graphic primitive\n-filter \ntype\nuse this type of filter when resizing an image\n-flip\ncreate a \"mirror image\"\n-flop\ncreate a \"mirror image\"\n-font \nname\nuse this font when annotating the image with text\n-format \ntype\nthe image format type\n-frame \nwidth\nx\nheight\n+\nouter bevel width\n+\ninner bevel width\nsurround the image with an ornamental border\n-fuzz \ndistance\n{%}\ncolors within this Euclidean distance are considered equal\n-gamma \nvalue\nlevel of gamma correction\n-gaussian \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-gravity \ntype\ndirection primitive gravitates to when annotating the image.\n-green-primary \nx\n,\ny\ngreen chromaticity primary point\n-hald-clut \nclut\napply a Hald CLUT to the image\n-help\nprint usage instructions\n-implode \nfactor\nimplode image pixels about the center\n-interlace \ntype\nthe type of interlacing scheme\n-label \nname\nassign a label to an image\n-lat \nwidth\nx\nheight\n{+-}\noffset\n{%}\nperform local adaptive thresholding\n-level \nblack_point\n{,\ngamma\n}{,\nwhite_point\n}{%}\nadjust the level of image contrast\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-linewidth\nthe line width for subsequent draw operations\n-list \ntype\nthe type of list\n-log \nstring\nSpecify format for debug log\n-loop \niterations\nadd Netscape loop extension to your GIF animation\n-magnify\nmagnify the image\n-map \nfilename\nchoose a particular set of colors from this image\n-mask \nfilename\nSpecify a clipping mask\n-matte\nstore matte channel if the image has one\n-mattecolor \ncolor\nspecify the color to be used with the -frame option\n-median \nradius\napply a median filter to the image\n-minify \nfactor\nminify the image\n-modulate brightness[,saturation[,hue]]\nvary the brightness, saturation, and hue of an image\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-motion-blur \nradius\n{x\nsigma\n}{+angle}\nSimulate motion blur\n-negate\nreplace every pixel with its complementary color\n-noise \nradius|type\nadd or reduce noise in an image\n-noop\nNOOP (no option)\n-normalize\ntransform image to span the full range of color values\n-opaque \ncolor\nchange this color to the pen color within the image\n-operator channel operator rvalue[%]\napply a mathematical, bitwise, or value operator to an image channel\n-ordered-dither \nchanneltype??? info \\\"\n`\nordered dither the image\n-output-directory \ndirectory\noutput files to directory\n-orient \norientation\nSet the image orientation attribute\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\n-paint \nradius\nsimulate an oil painting\n-pen \ncolor\n(This option has been replaced by the -fill option)\n-pointsize \nvalue\npointsize of the PostScript, X11, or TrueType font\n-profile \nfilename\nadd ICM, IPTC, or generic profile to image\n-preserve-timestamp\npreserve the original timestamps of the file\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\n-raise \nwidth\nx\nheight\nlighten or darken image edges\n-random-threshold \nchanneltype??? info \"\n`\nrandom threshold the image\n-recolor \nmatrix\napply a color translation matrix to image channels\n-red-primary \nx\n,\ny\nred chromaticity primary point\n-region \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\napply options to a portion of the image\n-render\nrender vector operations\n-repage \nwidth\nx\nheight\n+xoff+yoff[!]\nAdjust image page offsets\n-resample \nhorizontal\nx\nvertical\nResample image to specified horizontal and vertical resolution\n-resize \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image\n-roll {+-}\nx\n{+-}\ny\nroll an image vertically or horizontally\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sample \ngeometry\nscale image using pixel sampling\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scale \ngeometry\nscale the image.\n-scene \nvalue\nset scene number\n-set \nattribute??? info \"\n`\nset an image attribute\n+set \nattribute\nunset an image attribute\n-segment \ncluster threshold\nx\nsmoothing threshold\nsegment an image\n-shade \nazimuth\nx\nelevation\nshade the image using a distant light source\n-sharpen \nradius\n{x\nsigma\n}\nsharpen the image\n-shave \nwidth\nx\nheight\n{%}\nshave pixels from the image edges\n-shear \nx degrees\nx\ny degrees\nshear the image along the X or Y axis\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-solarize \nfactor\nnegate all pixels above the threshold level\n-spread \namount\ndisplace image pixels by a random amount\n-strip\nremove all profiles and text attributes from the image\n-stroke \ncolor\ncolor to use when stroking a graphic primitive\n-strokewidth \nvalue\nset the stroke width\n-swirl \ndegrees\nswirl image pixels about the center\n-texture \nfilename\nname of texture to tile onto the image background\n-threshold \nvalue\n{%}\nthreshold the image\n-thumbnail \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image (quickly)\n-tile \nfilename\ntile image when filling a graphic primitive\n-transform\ntransform the image\n-transparent \ncolor\nmake this color transparent within the image\n-treedepth \nvalue\ntree depth for the color reduction algorithm\n-trim\ntrim an image\n-type \ntype\nthe image type\n-units \ntype\nthe units of image resolution\n-unsharp \nradius\n{x\nsigma\n}{+\namount\n}{+\nthreshold\n}\nsharpen the image with an unsharp mask operator\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n-view \nstring\nFlashPix viewing parameters\n-virtual-pixel \nmethod\nspecify contents of \"virtual pixels\"\n-wave \namplitude\nx\nwavelength\nalter an image along a sine wave\n-white-point \nx\n,\ny\nchromaticity white point\n-white-threshold red[,green][,blue][,opacity]\npixels above the threshold become white\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9510\u5316"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_1", 
            "text": "", 
            "title": "\u538b\u7f29\u9510\u5316"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_2", 
            "text": "mogrify - mogrify an image", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_3", 
            "text": "Synopsis\nDescription\nExamples\nOptions", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_4", 
            "text": "gm mogrify [ options ... ] file ...", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_5", 
            "text": "Mogrify transforms an image or a sequence of images. These transforms include image scaling, image rotation, color reduction, and others. Each transmogrified image overwrites the corresponding original image, unless an option such as -format causes the output filename to be different from the input filename.   The graphics formats supported by mogrify are listed in GraphicsMagick(1).", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_6", 
            "text": "To convert all the TIFF files in a particular directory to JPEG, use:  gm mogrify -format jpeg *.tiff  To convert a directory full of JPEG images to thumbnails, use:  gm mogrify -size 120x120 *.jpg -resize 120x120 +profile  *   In this example, '-size 120x120' gives a hint to the JPEG decoder that the images are going to be downscaled to 120x120, allowing it to run faster by avoiding returning full-resolution images to GraphicsMagick for the subsequent resizing operation. The '-resize 120x120' specifies the desired dimensions of the output images. It will be scaled so its largest dimension is 120 pixels. The '+profile \"*\"' removes any ICM, EXIF, IPTC, or other profiles that might be present in the input and aren't needed in the thumbnails.\nTo scale an image of a cockatoo to exactly 640 pixels in width and 480 pixels in height, use:  gm mogrify -resize 640x480! cockatoo.miff", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/mogrify/#_7", 
            "text": "Options are processed in command line order. Any option you specify on the command line remains in effect for the set of images that follows, until the set is terminated by the appearance of any option or -noop.  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -affine  matrix drawing transform matrix -antialias remove pixel aliasing -asc-cdl  spec apply ASC CDL color transform -authenticate  string decrypt image with this password -auto-orient orient (rotate) image so it is upright -background  color the background color -black-threshold red[,green][,blue][,opacity] pixels below the threshold become black -blue-primary  x , y blue chromaticity primary point -blur  radius {x sigma } blur the image with a Gaussian operator -border  width x height surround the image with a border of color -bordercolor  color the border color -channel  type the type of channel -charcoal  factor simulate a charcoal drawing -colorize  value colorize the image with the pen color -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -comment  string annotate an image with a comment -compose  operator the type of image composition -compress  type the type of image compression -contrast enhance or reduce the image contrast -convolve  kernel convolve image with the specified convolution kernel -create-directories create output directory if required -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image -cycle  amount displace image colormap by amount -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -delay  1/100ths of a second display the next image after pausing -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -despeckle reduce the speckles within an image -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dither apply Floyd/Steinberg error diffusion to the image -draw  string annotate an image with one or more graphic primitives -edge  radius detect edges within an image -emboss  radius emboss an image -encoding  type specify the text encoding -endian  type specify endianness (MSB, LSB, or Native) of image -enhance apply a digital filter to enhance a noisy image -equalize perform histogram equalization to the image -extent  width x height {+-} x {+-} y composite image on background color canvas image -fill  color color to use when filling a graphic primitive -filter  type use this type of filter when resizing an image -flip create a \"mirror image\" -flop create a \"mirror image\" -font  name use this font when annotating the image with text -format  type the image format type -frame  width x height + outer bevel width + inner bevel width surround the image with an ornamental border -fuzz  distance {%} colors within this Euclidean distance are considered equal -gamma  value level of gamma correction -gaussian  radius {x sigma } blur the image with a Gaussian operator -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -gravity  type direction primitive gravitates to when annotating the image. -green-primary  x , y green chromaticity primary point -hald-clut  clut apply a Hald CLUT to the image -help print usage instructions -implode  factor implode image pixels about the center -interlace  type the type of interlacing scheme -label  name assign a label to an image -lat  width x height {+-} offset {%} perform local adaptive thresholding -level  black_point {, gamma }{, white_point }{%} adjust the level of image contrast -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -linewidth the line width for subsequent draw operations -list  type the type of list -log  string Specify format for debug log -loop  iterations add Netscape loop extension to your GIF animation -magnify magnify the image -map  filename choose a particular set of colors from this image -mask  filename Specify a clipping mask -matte store matte channel if the image has one -mattecolor  color specify the color to be used with the -frame option -median  radius apply a median filter to the image -minify  factor minify the image -modulate brightness[,saturation[,hue]] vary the brightness, saturation, and hue of an image -monitor show progress indication -monochrome transform the image to black and white -motion-blur  radius {x sigma }{+angle} Simulate motion blur -negate replace every pixel with its complementary color -noise  radius|type add or reduce noise in an image -noop NOOP (no option) -normalize transform image to span the full range of color values -opaque  color change this color to the pen color within the image -operator channel operator rvalue[%] apply a mathematical, bitwise, or value operator to an image channel -ordered-dither  channeltype??? info \\\" ` ordered dither the image -output-directory  directory output files to directory -orient  orientation Set the image orientation attribute -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas -paint  radius simulate an oil painting -pen  color (This option has been replaced by the -fill option) -pointsize  value pointsize of the PostScript, X11, or TrueType font -profile  filename add ICM, IPTC, or generic profile to image -preserve-timestamp preserve the original timestamps of the file -quality  value JPEG/MIFF/PNG/TIFF compression level -raise  width x height lighten or darken image edges -random-threshold  channeltype??? info \" ` random threshold the image -recolor  matrix apply a color translation matrix to image channels -red-primary  x , y red chromaticity primary point -region  width x height {+-} x {+-} y apply options to a portion of the image -render render vector operations -repage  width x height +xoff+yoff[!] Adjust image page offsets -resample  horizontal x vertical Resample image to specified horizontal and vertical resolution -resize  width x height {%}{@}{!}{ }{ } resize an image -roll {+-} x {+-} y roll an image vertically or horizontally -rotate  degrees { }{ } rotate the image -sample  geometry scale image using pixel sampling -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scale  geometry scale the image. -scene  value set scene number -set  attribute??? info \" ` set an image attribute +set  attribute unset an image attribute -segment  cluster threshold x smoothing threshold segment an image -shade  azimuth x elevation shade the image using a distant light source -sharpen  radius {x sigma } sharpen the image -shave  width x height {%} shave pixels from the image edges -shear  x degrees x y degrees shear the image along the X or Y axis -size  width x height {+offset} width and height of the image -solarize  factor negate all pixels above the threshold level -spread  amount displace image pixels by a random amount -strip remove all profiles and text attributes from the image -stroke  color color to use when stroking a graphic primitive -strokewidth  value set the stroke width -swirl  degrees swirl image pixels about the center -texture  filename name of texture to tile onto the image background -threshold  value {%} threshold the image -thumbnail  width x height {%}{@}{!}{ }{ } resize an image (quickly) -tile  filename tile image when filling a graphic primitive -transform transform the image -transparent  color make this color transparent within the image -treedepth  value tree depth for the color reduction algorithm -trim trim an image -type  type the image type -units  type the units of image resolution -unsharp  radius {x sigma }{+ amount }{+ threshold } sharpen the image with an unsharp mask operator -verbose print detailed information about the image -version print GraphicsMagick version string -view  string FlashPix viewing parameters -virtual-pixel  method specify contents of \"virtual pixels\" -wave  amplitude x wavelength alter an image along a sine wave -white-point  x , y chromaticity white point -white-threshold red[,green][,blue][,opacity] pixels above the threshold become white For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/", 
            "text": "\u8499\u592a\u5947\n\n\n\u547d\u540d\n\n\nmontage - create a composite image by combining several separate images \n\n\n\u5185\u5bb9\n\n\n\n\n\u6982\u8981\n\n\n\u63cf\u8ff0\n\n\n\u793a\u4f8b\n\n\n\u9009\u9879\n\n\nX Resources\n\n\n\n\n\u6982\u8981\n\n\ngm montage [ options ...] file [ [ options ...] file ...] output_file \n\n\n\u63cf\u8ff0\n\n\nmontage creates a composite image by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.\n\n\nThe composite image is constructed in the following manner. First, each image specified on the command line, except for the last, is scaled to fit the maximum tile size. The maximum tile size by default is 120x120. It can be modified with the -geometry command line argument or X resource. See Options for more information on command line arguments. See X(1) for more information on X resources. Note that the maximum tile size need not be a square.\n\n\nNext the composite image is initialized with the color specified by the -background command line argument or X resource. The width and height of the composite image is determined by the title specified, the maximum tile size, the number of tiles per row, the tile border width and height, the image border width, and the label height. The number of tiles per row specifies how many images are to appear in each row of the composite image. The default is to have 5 tiles in each row and 4 tiles in each column of the composite. A specific value is specified with -tile. The tile border width and height, and the image border width defaults to the value of the X resource -borderwidth. It can be changed with the -borderwidth or -geometry command line argument or X resource. The label height is determined by the font you specify with the -font command line argument or X resource. If you do not specify a font, a font is chosen that allows the name of the image to fit the maximum width of a tiled area. The label colors is determined by the -background and -fill command line argument or X resource. Note, that if the background and pen colors are the same, labels will not appear.\n\n\nInitially, the composite image title is placed at the top if one is specified (refer to -fill). Next, each image is set onto the composite image, surrounded by its border color, with its name centered just below it. The individual images are left-justified within the width of the tiled area. The order of the images is the same as they appear on the command line unless the images have a scene keyword. If a scene number is specified in each image, then the images are tiled onto the composite in the order of their scene number. Finally, the last argument on the command line is the name assigned to the composite image. By default, the image is written in the MIFF format and can be viewed or printed with display(1). \n\n\nNote, that if the number of tiles exceeds the default number of 20 (5 per row, 4 per column), more than one composite image is created. To ensure a single image is produced, use -tile to increase the number of tiles to meet or exceed the number of input images.\n\n\nFinally, to create one or more empty spaces in the sequence of tiles, use the \"NULL:\" image format.\n\n\nNote, a composite MIFF image displayed to an X server with display behaves differently than other images. You can think of the composite as a visual image directory. Choose a particular tile of the composite and press a button to display it. See display(1) and miff(5)\n\n\n\u793a\u4f8b\n\n\nTo create a montage of a cockatoo, a parrot, and a hummingbird and write it to a file called birds, use:\n\n\ngm montage cockatoo.miff parrot.miff hummingbird.miff birds.miff\n\n\n\n\n\nTo tile several bird images so that they are at most 256 pixels in width and 192 pixels in height, surrounded by a red border, and separated by 10 pixels of background color, use:\n\n\ngm montage -geometry 256x192+10+10 -bordercolor red birds.* montage.miff\n\n\n\n\n\nTo create an unlabeled parrot image, 640 by 480 pixels, and surrounded by a border of black, use:\n\n\ngm montage -geometry 640x480 -bordercolor black -label \n parrot.miff bird.miff\n\n\n\n\n\nTo create an image of an eagle with a textured background, use:\n\n\ngm montage -texture bumps.jpg eagle.jpg eagle.png\n\n\n\n\n\nTo join several GIF images together without any extraneous graphics (e.g. no label, no shadowing, no surrounding tile frame), use:\n\n\ngm montage +frame +shadow +label -tile 5x1 -geometry 50x50+0+0 *.png joined.png\n\n\n\n\n\n\u9009\u9879\n\n\nAny option you specify on the command line remains in effect for the group of images following it, until the group is terminated by the appearance of any option or -noop. For example, to make a montage of three images, the first with 32 colors, the second with an unlimited number of colors, and the third with only 16 colors, use: \n\n\ngm montage -colors 32 cockatoo.1 -noop cockatoo.2 -colors 16 cockatoo.3 cockatoos.miff\n\n\n\n\n\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\n-adjoin\njoin images into a single multi-image file\n-affine \nmatrix\ndrawing transform matrix\n-authenticate \nstring\ndecrypt image with this password\n-background \ncolor\nthe background color\n-blue-primary \nx\n,\ny\nblue chromaticity primary point\n-blur \nradius\n{x\nsigma\n}\nblur the image with a Gaussian operator\n-bordercolor \ncolor\nthe border color\n-borderwidth \ngeometry\nthe border width\n-chop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\nremove pixels from the interior of an image\n-colors \nvalue\npreferred number of colors in the image\n-colorspace \nvalue\nthe type of colorspace\n-comment \nstring\nannotate an image with a comment\n-compose \noperator\nthe type of image composition\n-compress \ntype\nthe type of image compression\n-crop \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}\npreferred size and location of the cropped image\n-debug \nevents\nenable debug printout\n-define \nkey\n{=\nvalue\n},...\nadd coder/decoder specific options\n-density \nwidth\nx\nheight\nhorizontal and vertical resolution in pixels of the image\n-depth \nvalue\ndepth of the image\n-display \nhost:display[.screen]\nspecifies the X server to contact\n-dispose \nmethod\nGIF disposal method\n-dither\napply Floyd/Steinberg error diffusion to the image\n-draw \nstring\nannotate an image with one or more graphic primitives\n-encoding \ntype\nspecify the text encoding\n-endian \ntype\nspecify endianness (MSB, LSB, or Native) of image\n-fill \ncolor\ncolor to use when filling a graphic primitive\n-filter \ntype\nse this type of filter when resizing an image\n-font \nname\nuse this font when annotating the image with text\n-frame \nwidth\nx\nheight\n+\nouter bevel width\n+\ninner bevel width\nsurround the image with an ornamental border\n-gamma \nvalue\nlevel of gamma correction\n-geometry \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{@}{!}{^}{\n}{\n}\nSpecify dimension, offset, and resize options.\n-gravity \ntype\ndirection primitive gravitates to when annotating the image.\n-green-primary \nx\n,\ny\ngreen chromaticity primary point\n-help\nprint usage instructions\n-interlace \ntype\nthe type of interlacing scheme\n-label \nname\nassign a label to an image\n-limit \ntype??? info \"\n`\nDisk, File, Map, Memory, Pixels, Width, Height or Threads resource limit\n-log \nstring\nSpecify format for debug log\n-matte\nstore matte channel if the image has one\n-mattecolor \ncolor\nspecify the color to be used with the -frame option\n-mode \nvalue\nmode of operation\n-monitor\nshow progress indication\n-monochrome\ntransform the image to black and white\n-noop\nNOOP (no option)\n-page \nwidth\nx\nheight\n{+-}\nx\n{+-}\ny\n{%}{!}{\n}{\n}\nsize and location of an image canvas\n-pen \ncolor\n(This option has been replaced by the -fill option)\n-pointsize \nvalue\npointsize of the PostScript, X11, or TrueType font\n-quality \nvalue\nJPEG/MIFF/PNG/TIFF compression level\n-red-primary \nx\n,\ny\nred chromaticity primary point\n-render\nrender vector operations\n-repage \nwidth\nx\nheight\n+xoff+yoff[!]\nAdjust image page offsets\n-resize \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image\n-rotate \ndegrees\n{\n}{\n}\nrotate the image\n-sampling-factor \nhorizontal_factor\nx\nvertical_factor\nchroma subsampling factors\n-scenes \nvalue-value\nrange of image scene numbers to read\n-shadow \nradius\n{x\nsigma\n}\nshadow the montage\n-sharpen \nradius\n{x\nsigma\n}\nsharpen the image\n-size \nwidth\nx\nheight\n{+offset}\nwidth and height of the image\n-strip\nremove all profiles and text attributes from the image\n-stroke \ncolor\ncolor to use when stroking a graphic primitive\n-strokewidth \nvalue\nset the stroke width\n-texture \nfilename\nname of texture to tile onto the image background\n-thumbnail \nwidth\nx\nheight\n{%}{@}{!}{\n}{\n}\nresize an image (quickly)\n-tile \ngeometry\nlayout of images [montage]\n-title \nstring\nassign title to displayed image [animate, display, montage]\n-transform\ntransform the image\n-transparent \ncolor\nmake this color transparent within the image\n-treedepth \nvalue\ntree depth for the color reduction algorithm\n-trim\ntrim an image\n-type \ntype\nthe image type\n-verbose\nprint detailed information about the image\n-version\nprint GraphicsMagick version string\n-white-point \nx\n,\ny\nchromaticity white point\nFor a more detailed description of each option, see Options, above. GraphicsMagick(1). \n\n\nX Resources\n\n\nMontage options can appear on the command line or in your X resource file. Options on the command line supersede values specified in your X resource file. See X(1) for more information on X resources.\n\n\nAll montage options have a corresponding X resource. In addition, montage uses the following X resources:\n\n\nbackground (class Background)\nbackground color\nSpecifies the preferred color to use for the composite image background. The default is #ccc.\nborderColor (class BorderColor)\nborder color\nSpecifies the preferred color to use for the composite image border. The default is #ccc.\nborderWidth (class BorderWidth)\nborder width\nSpecifies the width in pixels of the composite image border. The default is 2.\nfont (class Font)\nfont to use\nSpecifies the name of the preferred font to use when displaying text within the composite image. The default is 9x15, fixed, or 5x8 determined by the composite image size.\nmatteColor (class MatteColor)\ncolor of the frame\nSpecify the color of an image frame. A 3D effect is achieved by using highlight and shadow colors derived from this color. The default value is #697B8F.\npen (class Pen)\ntext color\nSpecifies the preferred color to use for text within the composite image. The default is black.\ntitle (class Title)\ncomposite image title\nThis resource specifies the title to be placed at the top of the composite image. The default is not to place a title at the top of the composite image.", 
            "title": "\u8499\u592a\u5947"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_1", 
            "text": "", 
            "title": "\u8499\u592a\u5947"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_2", 
            "text": "montage - create a composite image by combining several separate images", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_3", 
            "text": "\u6982\u8981  \u63cf\u8ff0  \u793a\u4f8b  \u9009\u9879  X Resources", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_4", 
            "text": "gm montage [ options ...] file [ [ options ...] file ...] output_file", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_5", 
            "text": "montage creates a composite image by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.  The composite image is constructed in the following manner. First, each image specified on the command line, except for the last, is scaled to fit the maximum tile size. The maximum tile size by default is 120x120. It can be modified with the -geometry command line argument or X resource. See Options for more information on command line arguments. See X(1) for more information on X resources. Note that the maximum tile size need not be a square.  Next the composite image is initialized with the color specified by the -background command line argument or X resource. The width and height of the composite image is determined by the title specified, the maximum tile size, the number of tiles per row, the tile border width and height, the image border width, and the label height. The number of tiles per row specifies how many images are to appear in each row of the composite image. The default is to have 5 tiles in each row and 4 tiles in each column of the composite. A specific value is specified with -tile. The tile border width and height, and the image border width defaults to the value of the X resource -borderwidth. It can be changed with the -borderwidth or -geometry command line argument or X resource. The label height is determined by the font you specify with the -font command line argument or X resource. If you do not specify a font, a font is chosen that allows the name of the image to fit the maximum width of a tiled area. The label colors is determined by the -background and -fill command line argument or X resource. Note, that if the background and pen colors are the same, labels will not appear.  Initially, the composite image title is placed at the top if one is specified (refer to -fill). Next, each image is set onto the composite image, surrounded by its border color, with its name centered just below it. The individual images are left-justified within the width of the tiled area. The order of the images is the same as they appear on the command line unless the images have a scene keyword. If a scene number is specified in each image, then the images are tiled onto the composite in the order of their scene number. Finally, the last argument on the command line is the name assigned to the composite image. By default, the image is written in the MIFF format and can be viewed or printed with display(1).   Note, that if the number of tiles exceeds the default number of 20 (5 per row, 4 per column), more than one composite image is created. To ensure a single image is produced, use -tile to increase the number of tiles to meet or exceed the number of input images.  Finally, to create one or more empty spaces in the sequence of tiles, use the \"NULL:\" image format.  Note, a composite MIFF image displayed to an X server with display behaves differently than other images. You can think of the composite as a visual image directory. Choose a particular tile of the composite and press a button to display it. See display(1) and miff(5)", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_6", 
            "text": "To create a montage of a cockatoo, a parrot, and a hummingbird and write it to a file called birds, use:  gm montage cockatoo.miff parrot.miff hummingbird.miff birds.miff  To tile several bird images so that they are at most 256 pixels in width and 192 pixels in height, surrounded by a red border, and separated by 10 pixels of background color, use:  gm montage -geometry 256x192+10+10 -bordercolor red birds.* montage.miff  To create an unlabeled parrot image, 640 by 480 pixels, and surrounded by a border of black, use:  gm montage -geometry 640x480 -bordercolor black -label   parrot.miff bird.miff  To create an image of an eagle with a textured background, use:  gm montage -texture bumps.jpg eagle.jpg eagle.png  To join several GIF images together without any extraneous graphics (e.g. no label, no shadowing, no surrounding tile frame), use:  gm montage +frame +shadow +label -tile 5x1 -geometry 50x50+0+0 *.png joined.png", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#_7", 
            "text": "Any option you specify on the command line remains in effect for the group of images following it, until the group is terminated by the appearance of any option or -noop. For example, to make a montage of three images, the first with 32 colors, the second with an unlimited number of colors, and the third with only 16 colors, use:   gm montage -colors 32 cockatoo.1 -noop cockatoo.2 -colors 16 cockatoo.3 cockatoos.miff  For a more detailed description of each option, see Options, above. GraphicsMagick(1).   -adjoin join images into a single multi-image file -affine  matrix drawing transform matrix -authenticate  string decrypt image with this password -background  color the background color -blue-primary  x , y blue chromaticity primary point -blur  radius {x sigma } blur the image with a Gaussian operator -bordercolor  color the border color -borderwidth  geometry the border width -chop  width x height {+-} x {+-} y {%} remove pixels from the interior of an image -colors  value preferred number of colors in the image -colorspace  value the type of colorspace -comment  string annotate an image with a comment -compose  operator the type of image composition -compress  type the type of image compression -crop  width x height {+-} x {+-} y {%} preferred size and location of the cropped image -debug  events enable debug printout -define  key {= value },... add coder/decoder specific options -density  width x height horizontal and vertical resolution in pixels of the image -depth  value depth of the image -display  host:display[.screen] specifies the X server to contact -dispose  method GIF disposal method -dither apply Floyd/Steinberg error diffusion to the image -draw  string annotate an image with one or more graphic primitives -encoding  type specify the text encoding -endian  type specify endianness (MSB, LSB, or Native) of image -fill  color color to use when filling a graphic primitive -filter  type se this type of filter when resizing an image -font  name use this font when annotating the image with text -frame  width x height + outer bevel width + inner bevel width surround the image with an ornamental border -gamma  value level of gamma correction -geometry  width x height {+-} x {+-} y {%}{@}{!}{^}{ }{ } Specify dimension, offset, and resize options. -gravity  type direction primitive gravitates to when annotating the image. -green-primary  x , y green chromaticity primary point -help print usage instructions -interlace  type the type of interlacing scheme -label  name assign a label to an image -limit  type??? info \" ` Disk, File, Map, Memory, Pixels, Width, Height or Threads resource limit -log  string Specify format for debug log -matte store matte channel if the image has one -mattecolor  color specify the color to be used with the -frame option -mode  value mode of operation -monitor show progress indication -monochrome transform the image to black and white -noop NOOP (no option) -page  width x height {+-} x {+-} y {%}{!}{ }{ } size and location of an image canvas -pen  color (This option has been replaced by the -fill option) -pointsize  value pointsize of the PostScript, X11, or TrueType font -quality  value JPEG/MIFF/PNG/TIFF compression level -red-primary  x , y red chromaticity primary point -render render vector operations -repage  width x height +xoff+yoff[!] Adjust image page offsets -resize  width x height {%}{@}{!}{ }{ } resize an image -rotate  degrees { }{ } rotate the image -sampling-factor  horizontal_factor x vertical_factor chroma subsampling factors -scenes  value-value range of image scene numbers to read -shadow  radius {x sigma } shadow the montage -sharpen  radius {x sigma } sharpen the image -size  width x height {+offset} width and height of the image -strip remove all profiles and text attributes from the image -stroke  color color to use when stroking a graphic primitive -strokewidth  value set the stroke width -texture  filename name of texture to tile onto the image background -thumbnail  width x height {%}{@}{!}{ }{ } resize an image (quickly) -tile  geometry layout of images [montage] -title  string assign title to displayed image [animate, display, montage] -transform transform the image -transparent  color make this color transparent within the image -treedepth  value tree depth for the color reduction algorithm -trim trim an image -type  type the image type -verbose print detailed information about the image -version print GraphicsMagick version string -white-point  x , y chromaticity white point For a more detailed description of each option, see Options, above. GraphicsMagick(1).", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/montage/#x-resources", 
            "text": "Montage options can appear on the command line or in your X resource file. Options on the command line supersede values specified in your X resource file. See X(1) for more information on X resources.  All montage options have a corresponding X resource. In addition, montage uses the following X resources:  background (class Background) background color\nSpecifies the preferred color to use for the composite image background. The default is #ccc. borderColor (class BorderColor) border color\nSpecifies the preferred color to use for the composite image border. The default is #ccc. borderWidth (class BorderWidth) border width\nSpecifies the width in pixels of the composite image border. The default is 2. font (class Font) font to use\nSpecifies the name of the preferred font to use when displaying text within the composite image. The default is 9x15, fixed, or 5x8 determined by the composite image size. matteColor (class MatteColor) color of the frame\nSpecify the color of an image frame. A 3D effect is achieved by using highlight and shadow colors derived from this color. The default value is #697B8F. pen (class Pen) text color\nSpecifies the preferred color to use for text within the composite image. The default is black. title (class Title) composite image title This resource specifies the title to be placed at the top of the composite image. The default is not to place a title at the top of the composite image.", 
            "title": "X Resources"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/", 
            "text": "\u65f6\u95f4\n\n\n\u547d\u540d\n\n\ntime - time the execution of a gm command\n\n\n\u5185\u5bb9\n\n\nSynopsis\nDescription\nExamples\nOptions\n\n\n\u6982\u8981\n\n\ngm time command\n\n\n\u63cf\u8ff0\n\n\ntime executes an arbitrary gm utility command (e.g. convert) and reports the user and elapsed time. This provides way to measure command execution times similar to the Unix 'time' command but in a portable and consistent way.\n\n\n\u793a\u4f8b\n\n\nTo obtain time information for the execution of a command:\n\n\n% gm time convert input.ppm -gaussian 0x2 output.ppm\nconvert input.ppm -gaussian 0x2 output.ppm    22.60s user 0.00s system 2354% cpu 0.960 total\nHere is the interpretation of the above output:\n\n\nuser - the total user time consumed.\nsystem - the total system time consumed.\ntotal - the total elapsed time consumed.\nBack to Contents  \n\n\n\u9009\u9879\n\n\nThe time command reqires no options other than the gm command to execute.\n\n\nBack to Contents", 
            "title": "\u65f6\u95f4"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_1", 
            "text": "", 
            "title": "\u65f6\u95f4"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_2", 
            "text": "time - time the execution of a gm command", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_3", 
            "text": "Synopsis\nDescription\nExamples\nOptions", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_4", 
            "text": "gm time command", 
            "title": "\u6982\u8981"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_5", 
            "text": "time executes an arbitrary gm utility command (e.g. convert) and reports the user and elapsed time. This provides way to measure command execution times similar to the Unix 'time' command but in a portable and consistent way.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_6", 
            "text": "To obtain time information for the execution of a command:  % gm time convert input.ppm -gaussian 0x2 output.ppm\nconvert input.ppm -gaussian 0x2 output.ppm    22.60s user 0.00s system 2354% cpu 0.960 total\nHere is the interpretation of the above output:  user - the total user time consumed.\nsystem - the total system time consumed.\ntotal - the total elapsed time consumed.\nBack to Contents", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/time/#_7", 
            "text": "The time command reqires no options other than the gm command to execute.  Back to Contents", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/", 
            "text": "\u7248\u672c\n\n\n\u547d\u540d\n\n\nversion - display software version, feature, and build information\n\n\n\u5185\u5bb9\n\n\nSynopsis\nDescription\nExamples\nOptions\n\n\n\u6982\u5ff5\n\n\ngm version\n\n\n\u63cf\u8ff0\n\n\nversion displays the software release version, build quantum (pixel sample) depth, web site URL, copyright notice, enabled features support, configuration parameters, and final build options used to build the software. The available information depends on how the software was configured and the host system.\n\n\n\u793a\u4f8b\n\n\nTo display the version information:\n\n\nGraphicsMagick 1.3.27a 2017-12-11 Q16 http://www.GraphicsMagick.org/\n  Copyright (C) 2002-2017 GraphicsMagick Group.\n  Additional copyrights and licenses apply to this software.\n  See http://www.GraphicsMagick.org/www/Copyright.html for details.\n  Feature Support:\n    Native Thread Safe       yes\n    Large Files (??? info \"32 bit)   yes\n    Large Memory (??? info \"32 bit)  yes\n    BZIP                     yes\n    DPS                      no\n    FlashPix                 no\n    FreeType                 yes\n    Ghostscript (Library)    no\n    JBIG                     yes\n    JPEG-2000                yes\n    JPEG                     yes\n    Little CMS               yes\n    Loadable Modules         no\n    OpenMP                   yes (201307)\n    PNG                      yes\n    TIFF                     yes\n    TRIO                     no\n    UMEM                     no\n    WebP                     yes\n    WMF                      yes\n    X11                      yes\n    XML                      yes\n    ZLIB                     yes\n  Host type: x86_64-unknown-linux-gnu\n  Configured using the command:\n    ./configure  ...\n  Final Build Parameters:\n    CC       = ...\n    CFLAGS   = ...\n    CPPFLAGS = ...\n    CXX      = ...\n    CXXFLAGS = ...\n    LDFLAGS  = ...\n    LIBS     = ...\n\n\n\u9009\u9879\n\n\nThe version command does not currently support any options.", 
            "title": "\u7248\u672c"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_1", 
            "text": "", 
            "title": "\u7248\u672c"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_2", 
            "text": "version - display software version, feature, and build information", 
            "title": "\u547d\u540d"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_3", 
            "text": "Synopsis\nDescription\nExamples\nOptions", 
            "title": "\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_4", 
            "text": "gm version", 
            "title": "\u6982\u5ff5"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_5", 
            "text": "version displays the software release version, build quantum (pixel sample) depth, web site URL, copyright notice, enabled features support, configuration parameters, and final build options used to build the software. The available information depends on how the software was configured and the host system.", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_6", 
            "text": "To display the version information:  GraphicsMagick 1.3.27a 2017-12-11 Q16 http://www.GraphicsMagick.org/\n  Copyright (C) 2002-2017 GraphicsMagick Group.\n  Additional copyrights and licenses apply to this software.\n  See http://www.GraphicsMagick.org/www/Copyright.html for details.\n  Feature Support:\n    Native Thread Safe       yes\n    Large Files (??? info \"32 bit)   yes\n    Large Memory (??? info \"32 bit)  yes\n    BZIP                     yes\n    DPS                      no\n    FlashPix                 no\n    FreeType                 yes\n    Ghostscript (Library)    no\n    JBIG                     yes\n    JPEG-2000                yes\n    JPEG                     yes\n    Little CMS               yes\n    Loadable Modules         no\n    OpenMP                   yes (201307)\n    PNG                      yes\n    TIFF                     yes\n    TRIO                     no\n    UMEM                     no\n    WebP                     yes\n    WMF                      yes\n    X11                      yes\n    XML                      yes\n    ZLIB                     yes\n  Host type: x86_64-unknown-linux-gnu\n  Configured using the command:\n    ./configure  ...\n  Final Build Parameters:\n    CC       = ...\n    CFLAGS   = ...\n    CPPFLAGS = ...\n    CXX      = ...\n    CXXFLAGS = ...\n    LDFLAGS  = ...\n    LIBS     = ...", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/GraphicsMagick/Manual/version/#_7", 
            "text": "The version command does not currently support any options.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/GraphicsMagick/FAQ/", 
            "text": "GraphicsMagick \u5e38\u89c1\u95ee\u9898\n\n\n\u95ee\u9898\u5185\u5bb9\n\n\n\n\nHow does GraphicsMagick differ from ImageMagick?\n\n\nHow often does GraphicsMagick pick up new code from ImageMagick?\n\n\nAre there any plans to use OpenCL or CUDA to use a GPU?\n\n\nWhat is the meaning of \"magick\"?\n\n\nHow can I process many files at once?\n\n\nI received the following message, \"?????? delegation failed ...\". What does it mean?\n\n\nHow do I set the transparency index in a GIF image so it displays properly within Mozilla?\n\n\nHow can I stop the filenames from changing in the title bar of the animate(1) image window?\n\n\nThe image grabbed by import(1) does not look like the image on my X server. What's wrong?\n\n\nHow do I animate a digital YUV image sequence?\n\n\nHow do I change the default PostScript page size?\n\n\nI get a memory allocation error. What can I do?\n\n\nHow do I concatenate three images left-to-right with no borders, frames, or text?\n\n\nHow do I create a GIF animation sequence to display within Firefox?\n\n\nWhen I display a PostScript image, white borders are trimmed.\n\n\nWhat are visual image directories? How do I use them?\n\n\nHow can I include the window frame when importing a window?\n\n\nI displayed an image and it appears as one solid color. What did I do wrong?\n\n\nI received the following message, \"???? library is not available...\".\n\n\nI want to inspect the values of the matte channel within my image.\n\n\nHow can I add one of those cool bevels to my image that I see used on the Web?\n\n\nI try to launch display from my window manager and it fails. What's up?\n\n\nHow can I make Postscript text look good?\n\n\nHow can I annotate an image with text that is 2 to 3 inches tall?\n\n\nHow can I convert my GIF animation sequence to individual image files?\n\n\nHow can I remove the background that prints around my image when I display it with Firefox?\n\n\nHow do I create a GIF or PNG image with Web safe colors?\n\n\nHow can I add a matte layer to my image?\n\n\nHow can I draw with text using 'convert' under Windows NT?\n\n\nWhy are my JPEG files larger than expected?\n\n\nHow do I extract a single image from a multi-image file?\n\n\nHow can I extract and combine CMYK channels in a CMYK image?\n\n\nHow can I create a solid or patterned canvas image?\n\n\nWhat does identify report?\n\n\n\n\n\u95ee\u9898\u5217\u8868\n\n\nGraphicsMagick \u4e0e ImageMagick \u6709\u4f55\u4e0d\u540c?\nGraphicsMagick is originally based on (forked from) ImageMagick 5.5.2 in November 2002, from the version distributed by ImageMagick Studio LLC, which is itself forked in August 1999 from ImageMagick developed by E. I. du Pont de Nemours and Company starting in 1992. Other than utilities being executed as sub-commands of the 'gm' command, the command-line syntax and programming APIs remain entirely upward compatible with ImageMagick 5.5.2. A better question might be \"How does ImageMagick differ from ImageMagick?\" since ImageMagick continues to alter and evolve its interfaces so they are no longer completely compatible with earlier versions. While GraphicsMagick also adds new features, it does so in a way which assures that existing features work as they did before. ImageMagick focuses on adding new functionality and features and has dramatically mutated several times since the fork.\nGraphicsMagick maintains a stable release branch, maintains a detailed ChangeLog, and maintains a stable source repository with complete version history so that changes are controlled, and changes between releases are accurately described. GraphicsMagick provides continued support for a release branch. ImageMagick does not offer any of these things.\nSince GraphicsMagick is more stable, more time has been spent optimizing and debugging its code.\nGraphicsMagick is much smaller than ImageMagick and has dramatically fewer dependencies on external libraries. For example, on the FreeBSD operating system, a fully-featured install of GraphicsMagick depends on 36 libraries whereas ImageMagick requires 64. GraphicsMagick's installation footprint is 3-5X smaller than ImageMagick.\nGraphicsMagick is usually faster than ImageMagick. The baseline execution overhead for simple commands is much lower, and GraphicsMagick is also more efficient at dealing with large images.\nHow often does GraphicsMagick pick up new code from ImageMagick?\nGraphicsMagick never picks up new code from ImageMagick as distributed by ImageMagick Studio LLC. Not long after the GraphicsMagick project was started in November 2002, ImageMagick from ImageMagick Studio LLC abandoned the MIT X11 style license it had been using since 1992, and switched between several different licenses until it ended up with one based on the Apache license, which is intended to penalize projects which borrow some of its source code, or fork from it. Since that time, GraphicsMagick has not incorporated any ImageMagick source code.\nOn November 27, 2003 ImageMagick Studio LLC applied to register \"ImageMagick\" as its trademark, and it was awarded this registered trademark (serial number 78333969) on August 30, 2005. Those who re-distribute modified versions of \"ImageMagick\" (e.g. patched or improved) under license as \"ImageMagick\" now face the risk of arbitrary trademark infringement claims by ImageMagick Studio LLC.\nAuthors of new features are encouraged to independently contribute their work to the GraphicsMagick project so that it can be released under GraphicsMagick's MIT X11 style license without additional encumberment. In order for a work to be accepted, it must have been developed entirely outside the ImageMagick source base to avoid any possibility of copyright taint.\nAre there any plans to use OpenCL or CUDA to use a GPU?\nIt is well known that some math-intensive algorithms run very quickly on video-card (and stand-alone) GPUs. Video card vendors encourage you to buy an expensive video card with quite a lot of installed RAM and modify applications to use the GPU via their proprietary or limited-purpose APIs. GPUs are quite effective at producing images for real-time display, such as for video games and virtual reality. GraphicsMagick has been significantly updated to use multiple CPU cores to speed up the image processing, and work continues to thread the few remaining algorithms, or remove inefficiencies in algorithms which don't see as much speed-up as they should. Linear speedup as cores are added is typical for CPU-bound algorithms on well-designed CPUs. Regardless, Amdahl's law is a significant factor in GraphicsMagick, with non-parallelizable code paths often dominating the time.\nIt is my belief that stand-alone GPUs are a poor design (expensive, inefficient, failure-prone, bandwidth bottlenecked, lack functionality, are insecure, and are not supported in servers) and that multi-core CPUs will ultimately prevail. Functionality which currently works best in a GPU will simply be integrated into tomorrow's multi-core CPUs and C compilers will naturally support that functionality. Once GPU capabilities are integrated into CPUs, there will be no more need to develop specialized code for a GPU. Today 16 core CPUs are readily available for purchase in systems at reasonable prices, and this trend is certain to continue.\nIntel's Xeon Phi offers a 61 core 'x86 CPU in a GPU-like plugin form-factor which provides over a TeraFLOP of performance. Being based on power-hungry plug-in cards, this solution suffers from many of the issues associated with GPUs. However, since it supports OpenMP, it may be a suitable target for executing some GraphicsMagick algorithms. Effective use of Xeon Phi currently requires use of Intel's development tools so from that standpoint it is not much more open than GPUs.\nFuture multi-core CPUs will use a similar amount of power to today's CPUs, will idle at very low power consumption levels, and will fit into a very small chassis. Due to this trend, there is no value obtained by expending energy toward developing specialized code for today's GPUs.\nWhat is the meaning of \"magick\"?\nAccording to the infamous British accultist Aleister Crowley, the definition of magick is \"the science and art of causing change to occur in conformity with the will\".\nHow can I process many files at once?\nUse 'gm mogrify'. The 'mogrify' subcommand is designed to operate on any number of files in one command. Normally 'mogrify' overwrites the input files but the -output-directory option (which must appear before any input file names!) allows sending the modified files to a different directory (which could be in a subdirectory). For example:\ngm mogrify -output-directory .thumbs -resize 320x200 *.jpg\n\n\n\nIf you encounter command line length limitations then you can have GraphicsMagick expand the file list by quoting the wildcard argument to prevent it from being expanded by your command shell:\ngm mogrify -output-directory .thumbs -resize 320x200 \n*.jpg\n\n\n\n\nand you can also retrieve a list of files to process from a text file (e.g. named 'files.txt') like:\ngm mogrify -output-directory .thumbs -resize 320x200 @files.txt\n\n\n\nwhere files.txt has one line per file name. If the input file paths contain relative sub-directory paths (e.g. \"foo/file1\", \"bar/file2\"), you can instruct GraphicsMagick to create a similar subdirectory structure under the output directory by adding the -create-directories option:\ngm mogrify -output-directory .thumbs -create-directories -resize 320x200 @files.txt\n\n\n\nNote that the algorithm used to generate output file names is quite simple. If -output-directory is \"/foo\" and the file path is \"bar/none.jpg\" then the final path will be \"foo/bar/none.jpg\". Based on this it should be clear that when -output-directory is used, file paths should be relative paths rather than absolute paths or else the concatenation won't work.\nI received the following message, \"?????? delegation failed ...\". What does it mean?\nGraphicsMagick uses several freely available packages to perform the translation of certain image formats (PostScript, MPEG, etc.). Make sure these packages are available as described in the README file. Also verify that you have plenty of temporary disk space. If not, set the MAGICK_TMPDIR (or TMPDIR) environment variable to an area where sufficient space is available. Finally, for PostScript, verify that Ghostscript supports the pnmraw or ppmraw device (gs -h) and that the document contains valid PostScript statements (gs image.ps).\nHow do I set the transparency index in a GIF image so it displays properly within Mozilla?\nDisplay your GIF image with display. Choose Matte from the Image Edit command menu and identify a pixel that has the transparency color. Press Method and select a matte edit method from a pop-up menu. Choose from these methods:\npoint\nreplace\nfloodfill\nThe point method changes the matte value of any pixel selected with the pointer until the button is is released. The replace method changes the matte value of any pixel that matches the color of the pixel you select with a button press. Floodfill changes the matte value of any pixel that matches the color of the pixel you select with a button press and is a neighbor.\nSelect your transparent pixel with the pointer and press a button. The image is redisplayed with any transparent pixels recolored to the background color. You can select other pixels or areas to force to transparent. When you are satisfied, press Return.\nFinally, choose Save from the command menu and write your GIF image to a file. Note that setting transparency works best on a TrueColor or DirectColor visual. If your server only exports colormapped visuals you will need to use a Standard Colormap to set transparency.\nxstdcmap -best\ngm display -map list image.gif\n[ choose Matte Edit ]\n[ select your transparent pixel then press Return ]\n[ choose Save '\nIf you do not have the xstdcmap(1) program, try\ngm display -visual TrueColor image.gif\nHow can I stop the filenames from changing in the title bar of the animate(1) image window?\nAnimate updates the image file name in the title bar of the image window as each image is displayed from the image sequence. To display just a single name that will not change, use -title:\ngm animate -title \"My Image Sequence\" images.\nThe image grabbed by import(1) does not look like the image on my X server. What's wrong?\nUse the -descend option:\ngm import -descend image.miff\nor set this X resource:\ngm import.descend: True\nBy default, import quickly grabs the image from the X server. However, it may not always have the correct colors in some areas. This can happen when a subwindow has a different colormap than its parent. With -descend, import descends the window hierarchy. Descending involves grabbing the image and colormap of each window or subwindow associated with the window you select and compositing it on a blank canvas. This can be significantly slower than just grabbing the top-level window but ensures the correct image.\nHow do I animate a digital YUV image sequence?\nSuppose your sequence is 72 352x240 frames titled frame0.Y, frame0.U, frame0.V, frame1.Y, frame1.U, etc. Use this command:\ngm animate -geometry 352x240 -scene 0-71 yuv3:frame%d\nHow do I change the default PostScript page size?\nThe default dimensions of a PostScript page is 612x792. If you prefer another default, change the page geometries (PSPageGeometry) in magick/image.h and recompile.\nI get a memory allocation error. What can I do?\nMemory allocation is a complex topic in GraphicsMagick and image processing requires a lot of memory. GraphicsMagick tries to take best advantage of the resources available by optimizing its use of virtual memory. Virtual memory is normally the amount of RAM (Random Access Memory) available to the process plus the amount of free space in the system paging area (known as \"swap\" under Unix, or a \"page file\" under Windows). In addition to the RAM and the paging area, GraphicsMagick is able to expand the amount of virtual memory available by using memory-mapped files which cause the file to be treated as extra memory. A piece of hardware known as the Memory Management Unit (MMU) performs the magic which allows the system paging area and memory-mapped files to be treated as more memory by your system's CPU.\nUsually when a memory allocation error occurs, it is because the system's paging area is full, or the programs memory (heap) is fragmented badly enough that there is no large-enough block of memory available to satisfy the request. In some cases the operating system may artificially limit the memory available to the program. Failures of small memory allocations are generally considered fatal by GraphicsMagick. If it is impossible to allocate even a little bit of memory, then there is no point in continuing. When large memory allocations associated with allocating memory for image pixels fail, GraphicsMagick uses that as a key to know that it should start using memory-mapped temporary files to increase virtual memory. Under Unix and other POSIX-compliant systems, these memory-mapped temporary files are created in either the system default location (e.g. /var/tmp) or the directory set by the TMPDIR environment variable. Under Windows, temporary files are created in the directory set by the TEMP or TMP environment variable. Use the MAGICK_TMPDIR environment variable to specify a directory for GraphicsMagick to write its temporary files.\nIf the temporary file directory is too small, or is itself mapped to the system's paging area (no win!), then GraphicsMagick will fail to allocate more virtual memory via the temporary file and will return an error.\nThe single biggest factor in how much memory is required by GraphicsMagick is the QuantumDepth setting when it was compiled. The amount of memory (in bytes) required to store a single image in memory is may be calculated via the equation (QuantumDepth\nRows\nColumns*5)/8. As a means of example, the following table shows the amount of memory consumed by a single 1024x768 image using the supported QuantumDepth settings:\nQuantumDepth    Virtual Memory\n8   3MB\n16  8MB\n32  15MB\nPerforming an image processing operation may require that several images be in memory at one time. In the case of animations, hundreds of images may be in memory at one time.\nGraphicsMagick is designed to be general purpose. It can display many image storage formats (Monochrome, PseudoColor, or TrueColor) on many different types of X visuals (StaticGray, StaticColor, PseudoColor, GrayScale, DirectColor, or TrueColor). To support all these combinations of image storage formats and X visuals, extra memory is required. Additionally, animate and montage store an entire image sequence in memory.\nIt is recommended that systems used to run GraphicsMagick have at least 96MB of RAM and 140MB free in their paging area. Systems used to process large images (do the math!) may require considerably more memory to operate efficiently. GraphicsMagick is proven to be far more efficient at processing huge images when it is compiled as a 64-bit application on a 64-bit capable CPU. RAM is typically 1000 times faster than disk, so it is important to keep as much data in RAM as possible (buy lots of RAM). The temporary file area should have plenty of free space. The size of the temporary file area is usually the deciding factor as to whether GraphicsMagick is able to complete an operation. With sufficient free disk space, GraphicsMagick is primarily limited by your CPU, your operating system's ability to address memory, and your degree of patience. GraphicsMagick has been used to process RGB images 64K by 64K pixels in size!\nHow do I concatenate three images left-to-right with no borders, frames, or text?\nAssume your three images are called image1.ppm, image2.ppm, and image3.ppm. Type\ngm montage -mode concatenate -tile 3x1 image1.ppm image2.ppm \\\n  image3.ppm concatenated.miff\nTo concatenate the images top-to-bottom, use -tile 1x3.\nFor more control over the placement of an image, use composite. First create a matte image and position your images onto the matte. For example,\ngm convert -size 350x500 xc:black composite.miff\ngm composite -geometry +0+0 composite.miff image1.gif composite.miff\ngm composite -geometry \"+1\"00+0 composite.miff image2.gif composite.miff\ngm composite -geometry +0+300 composite.miff image3.gif composite.miff\ngm composite -geometry +0+375 composite.miff image4.gif composite.miff\nHow do I create a GIF animation sequence to display within Firefox?\nUse convert with the -delay and -page options. The -delay option is used to specify the delay in 1/100ths of a second between the display of each frame of the animation. For example,\ngm convert -delay 20 frame*.gif animation.gif\nYou can also declare specific delays for each frame of the image sequence. For example, if the delay was 20, 10, and 5, use\ngm convert -delay 20 frame1.gif -delay 10 frame2.gif \\\n  -delay 5 frame3.gif animation.gif\nUse -page to specify the left and top locations of the image frame\ngm convert frame1.gif -page +50\"+1\"00 frame2.gif -page +0\"+1\"00 \\\n  frame3.gif animation.gif\nFinally, if you want the image to loop within FireFox, use -loop\ngm convert -loop 50 frame*.gif animation.gif\nNote, that all the images are composited into a single multi-image GIF animation. If you want a single image produced for each frame, use +adjoin\ngm convert +adjoin images.* frames%d.gif\nWhen I display a PostScript image, white borders are trimmed.\nGraphicsMagick automatically trims any PostScript image as defined by the bounding box. To preempt this behavior, remove the bounding box statement from the Postscript or explicitly set the page size. For example,\ngm display -page letter image.ps\nWhat are visual image directories? How do I use them?\nA visual image directory (VID) is an image that contains thumbnails of one or more images in a file directory. Rather than displaying each individual image at its full resolution, you can browse the visual image directory and choose an image to display. You can create a VID with either of these commands:\ngm montage \n.jpg directory.vid\ngm convert 'vid:\n.jpg' directory.vid\nOf course you can substitute any filenames you desire. Montage has many relevant command line options. You can exercise more control over the appearance of the VID than with convert.\nNext display the directory:\ngm display directory.vid\nFinally browse and select an image to display. Move the pointer to the image and press button 3.\nYou can create the VID directory with this command:\ngm display 'vid:*.jpg'\nYou can also select Visual Image... from the File menu of the command widget.\nNote, that creating a VID is time consuming. Creating them on-the-fly within display may be less convenient than using montage or convert . Also, if you create them with montage. or convert, you can reuse them as often as necessary.\nNote that a visual image directory is useful for looking at individual frames of an image sequence:\ngm display vid:movie.mpg\nHow can I include the window frame when importing a window?\nI use the window ID reported by xwininfo(1) with import and it does not include the window manager frame as expected. How can I save the window with its frame?\nBy default, xwininfo(1) returns the ID of the window you click on. Use the -frame option to get the reparented window ID:\nxwininfo -frame\nYou can then use the returned window ID with import:\ngm import -frame -window ID window.miff\nI displayed an image and it appears as one solid color. What did I do wrong?\nA blank image generally means that the image is either corrupt or it has a matte channel and the matte values are all zero. GraphicsMagick treats a matte value of zero as completely transparent. To determine if this is the problem, try\ngm display +matte image.miff\nI received the following message, \"???? library is not available...\".\nGraphicsMagick requires source libraries not included with the distribution to view or convert certain image formats such as JPEG or TIFF. The above message means you did not compile the required library and link with the GraphicsMagick utilities. See README for the location of these libraries and compiling instructions.\nI want to inspect the values of the matte channel within my image.\nView the matte image as a gray scale image. Suppose you have a TIFF image that has a matte channel and is 640 pixels in width and 480 in height. Type:\ngm convert image.tiff image.matte\ngm display -size 640x480 gray:image.matte\nHow can I add one of those cool bevels to my image that I see used on the Web?\nThere are four types of ornamental borders you can add to your image with GraphicsMagick. Each is listed below with the procedure to use them with your image.\nSurround the image with a border of color\nUse -border followed by the width and height of the border. Set the color of the border with -bordercolor. For example, to surround your image with a red border that is 25 pixels wide on each side, use\ngm convert -bordercolor red -border 25x25 image.jpg image.gif\nLighten or darken image edges to create a 3-D effect\nUse -raise followed by the width of the image edge. For example, to create a raised edge effect of 25 pixels, use\ngm convert -raise 25 image.jpg image.gif\nSurround the image with an ornamental frame\nUse -frame followed by the width and height of the frame. Set the color of the border with -mattecolor. For example, to surround your image with a gray frame that is 25 pixels wide on each side, use\ngm convert -mattecolor gray -frame 25x25 image.jpg image.gif\nSurround the image with a raised or sunken bevel\nUse -frame followed by the width and height of the bevel. Set the color of the border with -mattecolor. This is just like the description above except you specify a bevel width that matches the frame width. For example, to surround your image with a gray bevel that is 25 pixels wide on each side, use\ngm convert -mattecolor gray -frame 25x25+0+25 image.jpg image.gif\ngm convert -mattecolor gray -frame 25x25+25+0 image.jpg image.gif\nI try to launch display from my window manager and it fails. What's up?\nDisplay determines if it is executing interactively and behaves differently depending on the result. To convince display \n you are running in an interactive environment when launching from a window manager, use either of\ndisplay logo:Untitled\ndisplay \n /dev/console\nNote that this issue no longer exists as of GraphicsMagick 1.2.\nHow can I make Postscript text look good?\nSimple. Increase the dots-per-inch when converting and sub-sample:\ngm convert -density 288 -geometry 25% image.ps image.gif\nChange the density to 144 and geometry to 50% if the above command fails due to insufficient memory. Alternatively, see the Ghostscript documentation about using high-quality fonts.\nThe -density option increases the number of pixels (or dots) generated by Ghostscript when processing the input postscript file. However as all other images formats are generally displayed on screens which are typically about 72 to 100 dots per inch, the output image will be larger.\nThe -geometry option reduces the large image output of ghostscript image back to a normal 72 dpi resolution (25% of 288 dpi gives 72 dpi) but in the process anti-aliases (or smooths) the fonts and lines of the image so as to remove the jaggies you would otherwise get from a normal postscript to image conversion.\nHow can I annotate an image with text that is 2 to 3 inches tall?\nIf you do not access to a particular named font that is large, try scalable fonts. First see if you have any scalable fonts. Type\nxlsfonts -fn '\n-0-0-0-0-\n'\nOr if you are using display, use the font pattern above within the Font Browser (see Image Edit-\nAnnotate). Next substitute the appropriate resolution. Keep in mind that a scalable font must be fully qualified to work. That is, all 14 fields must be specified. Here is one example where we annotate an image with large Helvetica text:\ngm convert -font '-\n-helvetica-\n-\n-\n--300-300-\n-\n-\n-\n-iso8859-1' \\\n-fill green -draw 'text 50,300 Magick' image.gif annotated.gif\nIf you have the FreeType support built into GraphicsMagick, just increase your pointsize and/or density:\ngm convert -font Helvetica -pointsize 100 -density 300 ...\nHow can I convert my GIF animation sequence to individual image files?\nUse the scene embedded file format with convert:\ngm convert animation.gif +adjoin frame%02d.gif\nThe resulting image files are titled frame01.gif, frame02.gif, frame03.gif, etc.\nHow can I remove the background that prints around my image when I display it with Firefox?\nUse the +page option of the convert command:\ngm convert +page alpha.gif beta.gif\nGIF allows for a page offset relative to some background. The page offset information may have been in your GIF image already or it could have been introduced by GraphicsMagick. Either way, +page removes the unwanted page offset and FireFox should behave as expected.\nHow do I create a GIF or PNG image with Web safe colors?\nWeb safe colors are not normally needed any more since almost all computers now have true color displays. However, this FAQ may still be useful since it demonstrates how a colormap from an image may be applied to another image..\nUse the -map option of the convert command:\ngm convert -map netscape: alpha.gif beta.gif\nNetscape predefines 216 colors for colormapped displays. Use the above command to ensure only these predefined colors are used. Otherwise Netscape dithers your image with varying degrees of image fidelity.\nHow can I add a matte layer to my image?\nOne way is to use a bitmap as your transparency mask First, use the -matte option to add an all-opaque opacity channel, then use the composite utility to copy the graylevel samples from the mask file into your new opacity channel:\ngm convert image.gif -matte temp.miff\ngm composite -compose CopyOpacity mask.xbm temp.miff transparent.gif\nNote, GIF is limited to one transparent color. If your mask has variable opacity, use a format like MIFF, TIFF, or PNG as your output image format.\nHow can I draw with text using 'convert' under Windows NT?\nThe problem is that NT interprets the command line differently than Unix does, causing the documented command to fail. The following command has been reported to work correctly (all on one line):\ngm convert -font Arial -fill blue -draw \"text 10,10 'your text here'\" \\\nd:\\test.tif png:d:\\test.png\nand here is another example which is reported to work (which relies on Ghostscript's 'gs' program to installed):\ngm convert.exe -pointsize 18 -draw \"text 0,0 \"This is my text!\"\" \\\nC:\\blank.gif c:\\text.gif\nWhy are my JPEG files larger than expected?\nYour JPEG files may contain embedded \"profiles\" such as Exif or IPTC, or they may contain uncompressed thumbnails. You can use the +profile \"*\" commandline option or an equivalent API method to remove them.\nHow do I extract a single image from a multi-image file?\nUse a square-bracket syntax to indicate which frame or frames you want. For example,\ngm convert \nImage.gif[0]\n first.gif\n\n\n\nWill extract the first image (scene 0) from a GIF animation. Be sure to surround the file specification with quotation marks, to prevent the shell from interpreting the square brackets.\nHow can I extract and combine CMYK channels in a CMYK image?\nGraphicsMagick 1.2.2 and later support combining multiple channels in of any image file format in order to create a CMYK image file. For example, starting with a CMYK JPEG file, we can create a set of separate files with one file per channel:\ngm convert cmyk.jpg -channel cyan cyan.tiff\ngm convert cmyk.jpg -channel magenta magenta.tiff\ngm convert cmyk.jpg -channel yellow yellow.tiff\ngm convert cmyk.jpg -channel black black.tiff\n\n\nand then we can join them back together:\n\ngm composite -compose CopyMagenta magenta.tiff cyan.tiff result.tiff\ngm composite -compose CopyYellow yellow.tiff result.tiff result.tiff\ngm composite -compose CopyBlack black.tiff result.tiff result.tiff\n\nPerhaps it is possible to accomplish this in one composite command. We will leave that as an exercise for later. Note that it is possible to extract just one channel, manipulate it, and then insert it back into the original image file.\nThere is also built-in support for a Partition interlace format which can split to a set of files, and join a set of files, but the only supported format is a raw format which is not easy to deal with.\nHow can I create a solid or patterned canvas image?\nCanvas images may be created using the 'XC:' or 'TILE:' pseudo-image formats. XC produces solid color images based on an color you specify while TILE produces a tiled image based on an an image you specify. Both of these require that the desired size be specified, and the desired image type may be specified as well.\nTo create a solid red canvas image:\n\ngm convert -size 640x480 xc:red canvas.tiff\n\n\nor using hex syntax to specify the color:\n\ngm convert -size 640x480 \nxc:#f00\n canvas.tiff\n\n\nTo create a solid red canvas image using truecolor pixels:\n\ngm convert -size 640x480 -type TrueColor xc:red canvas.tiff\n\n\nTo create a patterned canvas image using a built-in crosshatch pattern:\n\ngm convert -size 640x480 tile:image:CROSSHATCH45 canvas.tiff\n\n\nTo create a patterned canvas image using a user-supplied image:\n\ngm convert -size 640x480 tile:myimage.tiff canvas.tiff\n\nWhat does identify report?\nGraphicsMagick is sophisticated image handling software supporting perhaps a hundred formats, and hundreds of subformats, yet it needs to be able to apply image processing algorithms in a consistent way, and save to many output formats. Some image types are radically different from others. Due to this, GraphicsMagick normalizes images it reads into only nine internal in-memory formats (see the description of -type) which are a specialization of just two internal formats. The identify command reports the characteristics of one of those internal formats rather than the genuine properties of the input image file. In fact, if the properties of all the input files were to be reported, it would require a book to describe all of the properties. For example, the WMF vector-drawing format is much different from the PNG image file format, yet GraphicsMagick can read both.\nOnly limited original properties are preserved, and it depends on how GraphicsMagick was built. For example, a \"Q8\" build can only report up to a depth of 8 bits, but a \"Q32\" build can report a depth of up to 32 bits. The original image depth is reported if it is at least 8 bits, and equal to or less than the build depth.\nBy default identify reports only the most basic properties:\n\n% gm identify seaworld.jpg\n\nseaworld.jpg JPEG 1530x1020+0+0 DirectClass 8-bit 204.0K 0.000u 0:01\nbut with -verbose it can report on a large number of properties.", 
            "title": "FAQ"
        }, 
        {
            "location": "/GraphicsMagick/FAQ/#graphicsmagick", 
            "text": "", 
            "title": "GraphicsMagick \u5e38\u89c1\u95ee\u9898"
        }, 
        {
            "location": "/GraphicsMagick/FAQ/#_1", 
            "text": "How does GraphicsMagick differ from ImageMagick?  How often does GraphicsMagick pick up new code from ImageMagick?  Are there any plans to use OpenCL or CUDA to use a GPU?  What is the meaning of \"magick\"?  How can I process many files at once?  I received the following message, \"?????? delegation failed ...\". What does it mean?  How do I set the transparency index in a GIF image so it displays properly within Mozilla?  How can I stop the filenames from changing in the title bar of the animate(1) image window?  The image grabbed by import(1) does not look like the image on my X server. What's wrong?  How do I animate a digital YUV image sequence?  How do I change the default PostScript page size?  I get a memory allocation error. What can I do?  How do I concatenate three images left-to-right with no borders, frames, or text?  How do I create a GIF animation sequence to display within Firefox?  When I display a PostScript image, white borders are trimmed.  What are visual image directories? How do I use them?  How can I include the window frame when importing a window?  I displayed an image and it appears as one solid color. What did I do wrong?  I received the following message, \"???? library is not available...\".  I want to inspect the values of the matte channel within my image.  How can I add one of those cool bevels to my image that I see used on the Web?  I try to launch display from my window manager and it fails. What's up?  How can I make Postscript text look good?  How can I annotate an image with text that is 2 to 3 inches tall?  How can I convert my GIF animation sequence to individual image files?  How can I remove the background that prints around my image when I display it with Firefox?  How do I create a GIF or PNG image with Web safe colors?  How can I add a matte layer to my image?  How can I draw with text using 'convert' under Windows NT?  Why are my JPEG files larger than expected?  How do I extract a single image from a multi-image file?  How can I extract and combine CMYK channels in a CMYK image?  How can I create a solid or patterned canvas image?  What does identify report?", 
            "title": "\u95ee\u9898\u5185\u5bb9"
        }, 
        {
            "location": "/GraphicsMagick/FAQ/#_2", 
            "text": "GraphicsMagick \u4e0e ImageMagick \u6709\u4f55\u4e0d\u540c? GraphicsMagick is originally based on (forked from) ImageMagick 5.5.2 in November 2002, from the version distributed by ImageMagick Studio LLC, which is itself forked in August 1999 from ImageMagick developed by E. I. du Pont de Nemours and Company starting in 1992. Other than utilities being executed as sub-commands of the 'gm' command, the command-line syntax and programming APIs remain entirely upward compatible with ImageMagick 5.5.2. A better question might be \"How does ImageMagick differ from ImageMagick?\" since ImageMagick continues to alter and evolve its interfaces so they are no longer completely compatible with earlier versions. While GraphicsMagick also adds new features, it does so in a way which assures that existing features work as they did before. ImageMagick focuses on adding new functionality and features and has dramatically mutated several times since the fork. GraphicsMagick maintains a stable release branch, maintains a detailed ChangeLog, and maintains a stable source repository with complete version history so that changes are controlled, and changes between releases are accurately described. GraphicsMagick provides continued support for a release branch. ImageMagick does not offer any of these things. Since GraphicsMagick is more stable, more time has been spent optimizing and debugging its code. GraphicsMagick is much smaller than ImageMagick and has dramatically fewer dependencies on external libraries. For example, on the FreeBSD operating system, a fully-featured install of GraphicsMagick depends on 36 libraries whereas ImageMagick requires 64. GraphicsMagick's installation footprint is 3-5X smaller than ImageMagick. GraphicsMagick is usually faster than ImageMagick. The baseline execution overhead for simple commands is much lower, and GraphicsMagick is also more efficient at dealing with large images. How often does GraphicsMagick pick up new code from ImageMagick? GraphicsMagick never picks up new code from ImageMagick as distributed by ImageMagick Studio LLC. Not long after the GraphicsMagick project was started in November 2002, ImageMagick from ImageMagick Studio LLC abandoned the MIT X11 style license it had been using since 1992, and switched between several different licenses until it ended up with one based on the Apache license, which is intended to penalize projects which borrow some of its source code, or fork from it. Since that time, GraphicsMagick has not incorporated any ImageMagick source code. On November 27, 2003 ImageMagick Studio LLC applied to register \"ImageMagick\" as its trademark, and it was awarded this registered trademark (serial number 78333969) on August 30, 2005. Those who re-distribute modified versions of \"ImageMagick\" (e.g. patched or improved) under license as \"ImageMagick\" now face the risk of arbitrary trademark infringement claims by ImageMagick Studio LLC. Authors of new features are encouraged to independently contribute their work to the GraphicsMagick project so that it can be released under GraphicsMagick's MIT X11 style license without additional encumberment. In order for a work to be accepted, it must have been developed entirely outside the ImageMagick source base to avoid any possibility of copyright taint. Are there any plans to use OpenCL or CUDA to use a GPU? It is well known that some math-intensive algorithms run very quickly on video-card (and stand-alone) GPUs. Video card vendors encourage you to buy an expensive video card with quite a lot of installed RAM and modify applications to use the GPU via their proprietary or limited-purpose APIs. GPUs are quite effective at producing images for real-time display, such as for video games and virtual reality. GraphicsMagick has been significantly updated to use multiple CPU cores to speed up the image processing, and work continues to thread the few remaining algorithms, or remove inefficiencies in algorithms which don't see as much speed-up as they should. Linear speedup as cores are added is typical for CPU-bound algorithms on well-designed CPUs. Regardless, Amdahl's law is a significant factor in GraphicsMagick, with non-parallelizable code paths often dominating the time. It is my belief that stand-alone GPUs are a poor design (expensive, inefficient, failure-prone, bandwidth bottlenecked, lack functionality, are insecure, and are not supported in servers) and that multi-core CPUs will ultimately prevail. Functionality which currently works best in a GPU will simply be integrated into tomorrow's multi-core CPUs and C compilers will naturally support that functionality. Once GPU capabilities are integrated into CPUs, there will be no more need to develop specialized code for a GPU. Today 16 core CPUs are readily available for purchase in systems at reasonable prices, and this trend is certain to continue. Intel's Xeon Phi offers a 61 core 'x86 CPU in a GPU-like plugin form-factor which provides over a TeraFLOP of performance. Being based on power-hungry plug-in cards, this solution suffers from many of the issues associated with GPUs. However, since it supports OpenMP, it may be a suitable target for executing some GraphicsMagick algorithms. Effective use of Xeon Phi currently requires use of Intel's development tools so from that standpoint it is not much more open than GPUs. Future multi-core CPUs will use a similar amount of power to today's CPUs, will idle at very low power consumption levels, and will fit into a very small chassis. Due to this trend, there is no value obtained by expending energy toward developing specialized code for today's GPUs. What is the meaning of \"magick\"? According to the infamous British accultist Aleister Crowley, the definition of magick is \"the science and art of causing change to occur in conformity with the will\". How can I process many files at once? Use 'gm mogrify'. The 'mogrify' subcommand is designed to operate on any number of files in one command. Normally 'mogrify' overwrites the input files but the -output-directory option (which must appear before any input file names!) allows sending the modified files to a different directory (which could be in a subdirectory). For example: gm mogrify -output-directory .thumbs -resize 320x200 *.jpg  If you encounter command line length limitations then you can have GraphicsMagick expand the file list by quoting the wildcard argument to prevent it from being expanded by your command shell: gm mogrify -output-directory .thumbs -resize 320x200  *.jpg   and you can also retrieve a list of files to process from a text file (e.g. named 'files.txt') like: gm mogrify -output-directory .thumbs -resize 320x200 @files.txt  where files.txt has one line per file name. If the input file paths contain relative sub-directory paths (e.g. \"foo/file1\", \"bar/file2\"), you can instruct GraphicsMagick to create a similar subdirectory structure under the output directory by adding the -create-directories option: gm mogrify -output-directory .thumbs -create-directories -resize 320x200 @files.txt  Note that the algorithm used to generate output file names is quite simple. If -output-directory is \"/foo\" and the file path is \"bar/none.jpg\" then the final path will be \"foo/bar/none.jpg\". Based on this it should be clear that when -output-directory is used, file paths should be relative paths rather than absolute paths or else the concatenation won't work. I received the following message, \"?????? delegation failed ...\". What does it mean? GraphicsMagick uses several freely available packages to perform the translation of certain image formats (PostScript, MPEG, etc.). Make sure these packages are available as described in the README file. Also verify that you have plenty of temporary disk space. If not, set the MAGICK_TMPDIR (or TMPDIR) environment variable to an area where sufficient space is available. Finally, for PostScript, verify that Ghostscript supports the pnmraw or ppmraw device (gs -h) and that the document contains valid PostScript statements (gs image.ps). How do I set the transparency index in a GIF image so it displays properly within Mozilla? Display your GIF image with display. Choose Matte from the Image Edit command menu and identify a pixel that has the transparency color. Press Method and select a matte edit method from a pop-up menu. Choose from these methods: point\nreplace\nfloodfill\nThe point method changes the matte value of any pixel selected with the pointer until the button is is released. The replace method changes the matte value of any pixel that matches the color of the pixel you select with a button press. Floodfill changes the matte value of any pixel that matches the color of the pixel you select with a button press and is a neighbor. Select your transparent pixel with the pointer and press a button. The image is redisplayed with any transparent pixels recolored to the background color. You can select other pixels or areas to force to transparent. When you are satisfied, press Return. Finally, choose Save from the command menu and write your GIF image to a file. Note that setting transparency works best on a TrueColor or DirectColor visual. If your server only exports colormapped visuals you will need to use a Standard Colormap to set transparency. xstdcmap -best\ngm display -map list image.gif\n[ choose Matte Edit ]\n[ select your transparent pixel then press Return ]\n[ choose Save '\nIf you do not have the xstdcmap(1) program, try gm display -visual TrueColor image.gif How can I stop the filenames from changing in the title bar of the animate(1) image window? Animate updates the image file name in the title bar of the image window as each image is displayed from the image sequence. To display just a single name that will not change, use -title: gm animate -title \"My Image Sequence\" images. The image grabbed by import(1) does not look like the image on my X server. What's wrong? Use the -descend option: gm import -descend image.miff\nor set this X resource: gm import.descend: True\nBy default, import quickly grabs the image from the X server. However, it may not always have the correct colors in some areas. This can happen when a subwindow has a different colormap than its parent. With -descend, import descends the window hierarchy. Descending involves grabbing the image and colormap of each window or subwindow associated with the window you select and compositing it on a blank canvas. This can be significantly slower than just grabbing the top-level window but ensures the correct image. How do I animate a digital YUV image sequence? Suppose your sequence is 72 352x240 frames titled frame0.Y, frame0.U, frame0.V, frame1.Y, frame1.U, etc. Use this command: gm animate -geometry 352x240 -scene 0-71 yuv3:frame%d How do I change the default PostScript page size? The default dimensions of a PostScript page is 612x792. If you prefer another default, change the page geometries (PSPageGeometry) in magick/image.h and recompile. I get a memory allocation error. What can I do? Memory allocation is a complex topic in GraphicsMagick and image processing requires a lot of memory. GraphicsMagick tries to take best advantage of the resources available by optimizing its use of virtual memory. Virtual memory is normally the amount of RAM (Random Access Memory) available to the process plus the amount of free space in the system paging area (known as \"swap\" under Unix, or a \"page file\" under Windows). In addition to the RAM and the paging area, GraphicsMagick is able to expand the amount of virtual memory available by using memory-mapped files which cause the file to be treated as extra memory. A piece of hardware known as the Memory Management Unit (MMU) performs the magic which allows the system paging area and memory-mapped files to be treated as more memory by your system's CPU. Usually when a memory allocation error occurs, it is because the system's paging area is full, or the programs memory (heap) is fragmented badly enough that there is no large-enough block of memory available to satisfy the request. In some cases the operating system may artificially limit the memory available to the program. Failures of small memory allocations are generally considered fatal by GraphicsMagick. If it is impossible to allocate even a little bit of memory, then there is no point in continuing. When large memory allocations associated with allocating memory for image pixels fail, GraphicsMagick uses that as a key to know that it should start using memory-mapped temporary files to increase virtual memory. Under Unix and other POSIX-compliant systems, these memory-mapped temporary files are created in either the system default location (e.g. /var/tmp) or the directory set by the TMPDIR environment variable. Under Windows, temporary files are created in the directory set by the TEMP or TMP environment variable. Use the MAGICK_TMPDIR environment variable to specify a directory for GraphicsMagick to write its temporary files. If the temporary file directory is too small, or is itself mapped to the system's paging area (no win!), then GraphicsMagick will fail to allocate more virtual memory via the temporary file and will return an error. The single biggest factor in how much memory is required by GraphicsMagick is the QuantumDepth setting when it was compiled. The amount of memory (in bytes) required to store a single image in memory is may be calculated via the equation (QuantumDepth Rows Columns*5)/8. As a means of example, the following table shows the amount of memory consumed by a single 1024x768 image using the supported QuantumDepth settings: QuantumDepth    Virtual Memory\n8   3MB\n16  8MB\n32  15MB\nPerforming an image processing operation may require that several images be in memory at one time. In the case of animations, hundreds of images may be in memory at one time. GraphicsMagick is designed to be general purpose. It can display many image storage formats (Monochrome, PseudoColor, or TrueColor) on many different types of X visuals (StaticGray, StaticColor, PseudoColor, GrayScale, DirectColor, or TrueColor). To support all these combinations of image storage formats and X visuals, extra memory is required. Additionally, animate and montage store an entire image sequence in memory. It is recommended that systems used to run GraphicsMagick have at least 96MB of RAM and 140MB free in their paging area. Systems used to process large images (do the math!) may require considerably more memory to operate efficiently. GraphicsMagick is proven to be far more efficient at processing huge images when it is compiled as a 64-bit application on a 64-bit capable CPU. RAM is typically 1000 times faster than disk, so it is important to keep as much data in RAM as possible (buy lots of RAM). The temporary file area should have plenty of free space. The size of the temporary file area is usually the deciding factor as to whether GraphicsMagick is able to complete an operation. With sufficient free disk space, GraphicsMagick is primarily limited by your CPU, your operating system's ability to address memory, and your degree of patience. GraphicsMagick has been used to process RGB images 64K by 64K pixels in size! How do I concatenate three images left-to-right with no borders, frames, or text? Assume your three images are called image1.ppm, image2.ppm, and image3.ppm. Type gm montage -mode concatenate -tile 3x1 image1.ppm image2.ppm \\\n  image3.ppm concatenated.miff\nTo concatenate the images top-to-bottom, use -tile 1x3. For more control over the placement of an image, use composite. First create a matte image and position your images onto the matte. For example, gm convert -size 350x500 xc:black composite.miff\ngm composite -geometry +0+0 composite.miff image1.gif composite.miff\ngm composite -geometry \"+1\"00+0 composite.miff image2.gif composite.miff\ngm composite -geometry +0+300 composite.miff image3.gif composite.miff\ngm composite -geometry +0+375 composite.miff image4.gif composite.miff How do I create a GIF animation sequence to display within Firefox? Use convert with the -delay and -page options. The -delay option is used to specify the delay in 1/100ths of a second between the display of each frame of the animation. For example, gm convert -delay 20 frame*.gif animation.gif\nYou can also declare specific delays for each frame of the image sequence. For example, if the delay was 20, 10, and 5, use gm convert -delay 20 frame1.gif -delay 10 frame2.gif \\\n  -delay 5 frame3.gif animation.gif\nUse -page to specify the left and top locations of the image frame gm convert frame1.gif -page +50\"+1\"00 frame2.gif -page +0\"+1\"00 \\\n  frame3.gif animation.gif\nFinally, if you want the image to loop within FireFox, use -loop gm convert -loop 50 frame*.gif animation.gif\nNote, that all the images are composited into a single multi-image GIF animation. If you want a single image produced for each frame, use +adjoin gm convert +adjoin images.* frames%d.gif When I display a PostScript image, white borders are trimmed. GraphicsMagick automatically trims any PostScript image as defined by the bounding box. To preempt this behavior, remove the bounding box statement from the Postscript or explicitly set the page size. For example, gm display -page letter image.ps What are visual image directories? How do I use them? A visual image directory (VID) is an image that contains thumbnails of one or more images in a file directory. Rather than displaying each individual image at its full resolution, you can browse the visual image directory and choose an image to display. You can create a VID with either of these commands: gm montage  .jpg directory.vid\ngm convert 'vid: .jpg' directory.vid\nOf course you can substitute any filenames you desire. Montage has many relevant command line options. You can exercise more control over the appearance of the VID than with convert. Next display the directory: gm display directory.vid\nFinally browse and select an image to display. Move the pointer to the image and press button 3. You can create the VID directory with this command: gm display 'vid:*.jpg'\nYou can also select Visual Image... from the File menu of the command widget. Note, that creating a VID is time consuming. Creating them on-the-fly within display may be less convenient than using montage or convert . Also, if you create them with montage. or convert, you can reuse them as often as necessary. Note that a visual image directory is useful for looking at individual frames of an image sequence: gm display vid:movie.mpg How can I include the window frame when importing a window? I use the window ID reported by xwininfo(1) with import and it does not include the window manager frame as expected. How can I save the window with its frame? By default, xwininfo(1) returns the ID of the window you click on. Use the -frame option to get the reparented window ID: xwininfo -frame\nYou can then use the returned window ID with import: gm import -frame -window ID window.miff\nI displayed an image and it appears as one solid color. What did I do wrong?\nA blank image generally means that the image is either corrupt or it has a matte channel and the matte values are all zero. GraphicsMagick treats a matte value of zero as completely transparent. To determine if this is the problem, try gm display +matte image.miff\nI received the following message, \"???? library is not available...\".\nGraphicsMagick requires source libraries not included with the distribution to view or convert certain image formats such as JPEG or TIFF. The above message means you did not compile the required library and link with the GraphicsMagick utilities. See README for the location of these libraries and compiling instructions. I want to inspect the values of the matte channel within my image.\nView the matte image as a gray scale image. Suppose you have a TIFF image that has a matte channel and is 640 pixels in width and 480 in height. Type: gm convert image.tiff image.matte\ngm display -size 640x480 gray:image.matte How can I add one of those cool bevels to my image that I see used on the Web? There are four types of ornamental borders you can add to your image with GraphicsMagick. Each is listed below with the procedure to use them with your image. Surround the image with a border of color Use -border followed by the width and height of the border. Set the color of the border with -bordercolor. For example, to surround your image with a red border that is 25 pixels wide on each side, use gm convert -bordercolor red -border 25x25 image.jpg image.gif\nLighten or darken image edges to create a 3-D effect Use -raise followed by the width of the image edge. For example, to create a raised edge effect of 25 pixels, use gm convert -raise 25 image.jpg image.gif\nSurround the image with an ornamental frame Use -frame followed by the width and height of the frame. Set the color of the border with -mattecolor. For example, to surround your image with a gray frame that is 25 pixels wide on each side, use gm convert -mattecolor gray -frame 25x25 image.jpg image.gif\nSurround the image with a raised or sunken bevel Use -frame followed by the width and height of the bevel. Set the color of the border with -mattecolor. This is just like the description above except you specify a bevel width that matches the frame width. For example, to surround your image with a gray bevel that is 25 pixels wide on each side, use gm convert -mattecolor gray -frame 25x25+0+25 image.jpg image.gif\ngm convert -mattecolor gray -frame 25x25+25+0 image.jpg image.gif I try to launch display from my window manager and it fails. What's up? Display determines if it is executing interactively and behaves differently depending on the result. To convince display   you are running in an interactive environment when launching from a window manager, use either of display logo:Untitled\ndisplay   /dev/console\nNote that this issue no longer exists as of GraphicsMagick 1.2. How can I make Postscript text look good? Simple. Increase the dots-per-inch when converting and sub-sample: gm convert -density 288 -geometry 25% image.ps image.gif\nChange the density to 144 and geometry to 50% if the above command fails due to insufficient memory. Alternatively, see the Ghostscript documentation about using high-quality fonts. The -density option increases the number of pixels (or dots) generated by Ghostscript when processing the input postscript file. However as all other images formats are generally displayed on screens which are typically about 72 to 100 dots per inch, the output image will be larger. The -geometry option reduces the large image output of ghostscript image back to a normal 72 dpi resolution (25% of 288 dpi gives 72 dpi) but in the process anti-aliases (or smooths) the fonts and lines of the image so as to remove the jaggies you would otherwise get from a normal postscript to image conversion. How can I annotate an image with text that is 2 to 3 inches tall? If you do not access to a particular named font that is large, try scalable fonts. First see if you have any scalable fonts. Type xlsfonts -fn ' -0-0-0-0- '\nOr if you are using display, use the font pattern above within the Font Browser (see Image Edit- Annotate). Next substitute the appropriate resolution. Keep in mind that a scalable font must be fully qualified to work. That is, all 14 fields must be specified. Here is one example where we annotate an image with large Helvetica text: gm convert -font '- -helvetica- - - --300-300- - - - -iso8859-1' \\\n-fill green -draw 'text 50,300 Magick' image.gif annotated.gif\nIf you have the FreeType support built into GraphicsMagick, just increase your pointsize and/or density: gm convert -font Helvetica -pointsize 100 -density 300 ... How can I convert my GIF animation sequence to individual image files? Use the scene embedded file format with convert: gm convert animation.gif +adjoin frame%02d.gif\nThe resulting image files are titled frame01.gif, frame02.gif, frame03.gif, etc. How can I remove the background that prints around my image when I display it with Firefox? Use the +page option of the convert command: gm convert +page alpha.gif beta.gif\nGIF allows for a page offset relative to some background. The page offset information may have been in your GIF image already or it could have been introduced by GraphicsMagick. Either way, +page removes the unwanted page offset and FireFox should behave as expected. How do I create a GIF or PNG image with Web safe colors? Web safe colors are not normally needed any more since almost all computers now have true color displays. However, this FAQ may still be useful since it demonstrates how a colormap from an image may be applied to another image.. Use the -map option of the convert command: gm convert -map netscape: alpha.gif beta.gif\nNetscape predefines 216 colors for colormapped displays. Use the above command to ensure only these predefined colors are used. Otherwise Netscape dithers your image with varying degrees of image fidelity. How can I add a matte layer to my image? One way is to use a bitmap as your transparency mask First, use the -matte option to add an all-opaque opacity channel, then use the composite utility to copy the graylevel samples from the mask file into your new opacity channel: gm convert image.gif -matte temp.miff\ngm composite -compose CopyOpacity mask.xbm temp.miff transparent.gif\nNote, GIF is limited to one transparent color. If your mask has variable opacity, use a format like MIFF, TIFF, or PNG as your output image format. How can I draw with text using 'convert' under Windows NT? The problem is that NT interprets the command line differently than Unix does, causing the documented command to fail. The following command has been reported to work correctly (all on one line): gm convert -font Arial -fill blue -draw \"text 10,10 'your text here'\" \\\nd:\\test.tif png:d:\\test.png\nand here is another example which is reported to work (which relies on Ghostscript's 'gs' program to installed): gm convert.exe -pointsize 18 -draw \"text 0,0 \"This is my text!\"\" \\\nC:\\blank.gif c:\\text.gif\nWhy are my JPEG files larger than expected?\nYour JPEG files may contain embedded \"profiles\" such as Exif or IPTC, or they may contain uncompressed thumbnails. You can use the +profile \"*\" commandline option or an equivalent API method to remove them. How do I extract a single image from a multi-image file? Use a square-bracket syntax to indicate which frame or frames you want. For example, gm convert  Image.gif[0]  first.gif  Will extract the first image (scene 0) from a GIF animation. Be sure to surround the file specification with quotation marks, to prevent the shell from interpreting the square brackets. How can I extract and combine CMYK channels in a CMYK image? GraphicsMagick 1.2.2 and later support combining multiple channels in of any image file format in order to create a CMYK image file. For example, starting with a CMYK JPEG file, we can create a set of separate files with one file per channel: gm convert cmyk.jpg -channel cyan cyan.tiff\ngm convert cmyk.jpg -channel magenta magenta.tiff\ngm convert cmyk.jpg -channel yellow yellow.tiff\ngm convert cmyk.jpg -channel black black.tiff \nand then we can join them back together: gm composite -compose CopyMagenta magenta.tiff cyan.tiff result.tiff\ngm composite -compose CopyYellow yellow.tiff result.tiff result.tiff\ngm composite -compose CopyBlack black.tiff result.tiff result.tiff Perhaps it is possible to accomplish this in one composite command. We will leave that as an exercise for later. Note that it is possible to extract just one channel, manipulate it, and then insert it back into the original image file. There is also built-in support for a Partition interlace format which can split to a set of files, and join a set of files, but the only supported format is a raw format which is not easy to deal with. How can I create a solid or patterned canvas image? Canvas images may be created using the 'XC:' or 'TILE:' pseudo-image formats. XC produces solid color images based on an color you specify while TILE produces a tiled image based on an an image you specify. Both of these require that the desired size be specified, and the desired image type may be specified as well. To create a solid red canvas image: gm convert -size 640x480 xc:red canvas.tiff \nor using hex syntax to specify the color: gm convert -size 640x480  xc:#f00  canvas.tiff \nTo create a solid red canvas image using truecolor pixels: gm convert -size 640x480 -type TrueColor xc:red canvas.tiff \nTo create a patterned canvas image using a built-in crosshatch pattern: gm convert -size 640x480 tile:image:CROSSHATCH45 canvas.tiff \nTo create a patterned canvas image using a user-supplied image: gm convert -size 640x480 tile:myimage.tiff canvas.tiff What does identify report? GraphicsMagick is sophisticated image handling software supporting perhaps a hundred formats, and hundreds of subformats, yet it needs to be able to apply image processing algorithms in a consistent way, and save to many output formats. Some image types are radically different from others. Due to this, GraphicsMagick normalizes images it reads into only nine internal in-memory formats (see the description of -type) which are a specialization of just two internal formats. The identify command reports the characteristics of one of those internal formats rather than the genuine properties of the input image file. In fact, if the properties of all the input files were to be reported, it would require a book to describe all of the properties. For example, the WMF vector-drawing format is much different from the PNG image file format, yet GraphicsMagick can read both. Only limited original properties are preserved, and it depends on how GraphicsMagick was built. For example, a \"Q8\" build can only report up to a depth of 8 bits, but a \"Q32\" build can report a depth of up to 32 bits. The original image depth is reported if it is at least 8 bits, and equal to or less than the build depth. By default identify reports only the most basic properties: % gm identify seaworld.jpg seaworld.jpg JPEG 1530x1020+0+0 DirectClass 8-bit 204.0K 0.000u 0:01\nbut with -verbose it can report on a large number of properties.", 
            "title": "\u95ee\u9898\u5217\u8868"
        }
    ]
}