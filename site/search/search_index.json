{
    "docs": [
        {
            "location": "/", 
            "text": "gm \n  \n\n\nGraphicsMagick \u548c ImageMagick \u4e3a node\n\n\n\u5165\u95e8\u6307\u5357\n\n\n\u9996\u5148\u9700\u8981\u4e0b\u8f7d\u5b89\u88c5 \nGraphicsMagick\n \u6216\u8005 \nImageMagick\n. \u5728 Mac OS X \u91cc, \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4f7f\u7528 \nHomebrew\n \u6765\u5b89\u88c5:\n\n\nbrew install imagemagick\nbrew install graphicsmagick\n\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u8981ImageMagick\u652f\u6301WebP, \u4f60\u5fc5\u987b\u6dfb\u52a0 WebP \u9009\u9879:\n\n\nbrew install imagemagick --with-webp\n\n\n\n\n\n\u6216\u8005\u4f7f\u7528 npm:\n\n\nnpm install gm\n\n\n\n\n\n\u6216\u8005\u514b\u9686 repo:\n\n\ngit clone git://github.com/aheckmann/gm.git\n\n\n\n\n\n\u6784\u9020\u51fd\u6570\n\n\n\u6709\u5f88\u591a\u65b9\u6cd5\u4f7f\u7528 \ngm\n \u56fe\u50cf\u6784\u9020\u51fd\u6570.\n\n\n\n\ngm(path)\n When you pass a string as the first argument it is interpreted as the path to an image you intend to manipulate.\n\n\ngm(stream || buffer, [filename])\n You may also pass a ReadableStream or Buffer as the first argument, with an optional file name for format inference.\n\n\ngm(width, height, [color])\n When you pass two integer arguments, gm will create a new image on the fly with the provided dimensions and an optional background color. And you can still chain just like you do with pre-existing images too. See \nhere\n for an example.\n\n\n\n\nThe links below refer to an older version of gm but everything should still work, if anyone feels like updating them please make a PR\n\n\n\u65b9\u6cd5\n\n\n\u83b7\u53d6\u5668 - getters\nsize\n - returns the size (WxH) of the image\norientation\n - returns the EXIF orientation of the image\nformat\n - returns the image format (gif, jpeg, png, etc)\ndepth\n - returns the image color depth\ncolor\n - returns the number of colors\nres\n   - returns the image resolution\nfilesize\n - returns image filesize\nidentify\n - returns all image data available. Takes an optional format string.\n\u64cd\u4f5c - manipulation\nadjoin\naffine\nantialias\nappend\nauthenticate\nautoOrient\naverage\nbackdrop\nbitdepth\nblackThreshold\nbluePrimary\nblur\nborder\nborderColor\nbox\nchannel\ncharcoal\nchop\nclip\ncoalesce\ncolors\ncolorize\ncolorMap\ncolorspace\ncomment\ncompose\ncompress\ncontrast\nconvolve\ncreateDirectories\ncrop\ncycle\ndeconstruct\ndelay\ndefine\ndensity\ndespeckle\ndither\ndisplace\ndisplay\ndispose\ndissolve\nedge\nemboss\nencoding\nenhance\nendian\nequalize\nextent\nfile\nfilter\nflatten\nflip\nflop\nforeground\nframe\nfuzz\ngamma\ngaussian\ngeometry\ngravity\ngreenPrimary\nhighlightColor\nhighlightStyle\niconGeometry\nimplode\nintent\ninterlace\nlabel\nlat\nlevel\nlist\nlimit\nlog\nloop\nlower\nmagnify\nmap\nmatte\nmatteColor\nmask\nmaximumError\nmedian\nminify\nmode\nmodulate\nmonitor\nmonochrome\nmorph\nmosaic\nmotionBlur\nname\nnegative\nnoise\nnoop\nnormalize\nnoProfile\nopaque\noperator\norderedDither\noutputDirectory\npaint\npage\npause\npen\nping\npointSize\npreview\nprocess\nprofile\nprogress\nquality\nraise\nrawSize\nrandomThreshold\nrecolor\nredPrimary\nregion\nremote\nrender\nrepage\nresample\nresize\nroll\nrotate\nsample\nsamplingFactor\nscale\nscene\nscenes\nscreen\nsegment\nsepia\nset\nsetFormat\nshade\nshadow\nsharedMemory\nsharpen\nshave\nshear\nsilent\nsolarize\nsnaps\nstegano\nstereo\nstrip\n \nimagemagick only\nspread\nswirl\ntextFont\ntexture\nthreshold\nthumb\ntile\ntransform\ntransparent\ntreeDepth\ntrim\ntype\nupdate\nunits\nunsharp\nusePixmap\nview\nvirtualPixel\nvisual\nwatermark\nwave\nwhitePoint\nwhiteThreshold\nwindow\nwindowGroup\n\u7ed8\u753b\ndraw\ndrawArc\ndrawBezier\ndrawCircle\ndrawEllipse\ndrawLine\ndrawPoint\ndrawPolygon\ndrawPolyline\ndrawRectangle\ndrawText\nfill\nfont\nfontSize\nstroke\nstrokeWidth\nsetDraw\n\u56fe\u50cf\u8f93\u51fa\nwrite\n - writes the processed image data to the specified filename\nstream\n - provides a \nReadableStream\n with the processed image data\ntoBuffer\n - returns the image as a \nBuffer\n instead of a stream\n\u5e73\u53f0\u7684\u5dee\u5f02\n\n\nPlease document and refer to any \nplatform or ImageMagick/GraphicsMagick issues/differences here\n.\n\n\n\u4e3e\u4f8b\n\n\nCheck out the \nexamples\n directory to play around.\n  Also take a look at the \nextending gm\n\n  page to see how to customize gm to your own needs.\n\n\n\u9519\u8bef\u62a5\u544a\n\n\nWhen reporting bugs please include the version of graphicsmagick/imagemagick you're using (gm -version/convert -version) as well as the version of this module and copies of any images you're having problems with.\n\n\n\u8d21\u732e\n\n\ncontributors\n\n\n\u7075\u611f\n\n\nmagickal-node\n\n\n\u63d2\u4ef6\n\n\nwiki\n\n\n\u8bc1\u4e66\n\n\n(The MIT License)\n\n\nCopyright (c) 2010 \nAaron Heckmann\n\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/#gm", 
            "text": "GraphicsMagick \u548c ImageMagick \u4e3a node", 
            "title": "gm"
        }, 
        {
            "location": "/#_1", 
            "text": "\u9996\u5148\u9700\u8981\u4e0b\u8f7d\u5b89\u88c5  GraphicsMagick  \u6216\u8005  ImageMagick . \u5728 Mac OS X \u91cc, \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4f7f\u7528  Homebrew  \u6765\u5b89\u88c5:  brew install imagemagick\nbrew install graphicsmagick  \u5982\u679c\u4f60\u60f3\u8981ImageMagick\u652f\u6301WebP, \u4f60\u5fc5\u987b\u6dfb\u52a0 WebP \u9009\u9879:  brew install imagemagick --with-webp  \u6216\u8005\u4f7f\u7528 npm:  npm install gm  \u6216\u8005\u514b\u9686 repo:  git clone git://github.com/aheckmann/gm.git", 
            "title": "\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/#_2", 
            "text": "\u6709\u5f88\u591a\u65b9\u6cd5\u4f7f\u7528  gm  \u56fe\u50cf\u6784\u9020\u51fd\u6570.   gm(path)  When you pass a string as the first argument it is interpreted as the path to an image you intend to manipulate.  gm(stream || buffer, [filename])  You may also pass a ReadableStream or Buffer as the first argument, with an optional file name for format inference.  gm(width, height, [color])  When you pass two integer arguments, gm will create a new image on the fly with the provided dimensions and an optional background color. And you can still chain just like you do with pre-existing images too. See  here  for an example.   The links below refer to an older version of gm but everything should still work, if anyone feels like updating them please make a PR", 
            "title": "\u6784\u9020\u51fd\u6570"
        }, 
        {
            "location": "/#_3", 
            "text": "\u83b7\u53d6\u5668 - getters size  - returns the size (WxH) of the image orientation  - returns the EXIF orientation of the image format  - returns the image format (gif, jpeg, png, etc) depth  - returns the image color depth color  - returns the number of colors res    - returns the image resolution filesize  - returns image filesize identify  - returns all image data available. Takes an optional format string. \u64cd\u4f5c - manipulation adjoin affine antialias append authenticate autoOrient average backdrop bitdepth blackThreshold bluePrimary blur border borderColor box channel charcoal chop clip coalesce colors colorize colorMap colorspace comment compose compress contrast convolve createDirectories crop cycle deconstruct delay define density despeckle dither displace display dispose dissolve edge emboss encoding enhance endian equalize extent file filter flatten flip flop foreground frame fuzz gamma gaussian geometry gravity greenPrimary highlightColor highlightStyle iconGeometry implode intent interlace label lat level list limit log loop lower magnify map matte matteColor mask maximumError median minify mode modulate monitor monochrome morph mosaic motionBlur name negative noise noop normalize noProfile opaque operator orderedDither outputDirectory paint page pause pen ping pointSize preview process profile progress quality raise rawSize randomThreshold recolor redPrimary region remote render repage resample resize roll rotate sample samplingFactor scale scene scenes screen segment sepia set setFormat shade shadow sharedMemory sharpen shave shear silent solarize snaps stegano stereo strip   imagemagick only spread swirl textFont texture threshold thumb tile transform transparent treeDepth trim type update units unsharp usePixmap view virtualPixel visual watermark wave whitePoint whiteThreshold window windowGroup \u7ed8\u753b draw drawArc drawBezier drawCircle drawEllipse drawLine drawPoint drawPolygon drawPolyline drawRectangle drawText fill font fontSize stroke strokeWidth setDraw \u56fe\u50cf\u8f93\u51fa write  - writes the processed image data to the specified filename stream  - provides a  ReadableStream  with the processed image data toBuffer  - returns the image as a  Buffer  instead of a stream", 
            "title": "\u65b9\u6cd5"
        }, 
        {
            "location": "/#_4", 
            "text": "Please document and refer to any  platform or ImageMagick/GraphicsMagick issues/differences here .", 
            "title": "\u5e73\u53f0\u7684\u5dee\u5f02"
        }, 
        {
            "location": "/#_5", 
            "text": "Check out the  examples  directory to play around.\n  Also take a look at the  extending gm \n  page to see how to customize gm to your own needs.", 
            "title": "\u4e3e\u4f8b"
        }, 
        {
            "location": "/#_6", 
            "text": "When reporting bugs please include the version of graphicsmagick/imagemagick you're using (gm -version/convert -version) as well as the version of this module and copies of any images you're having problems with.", 
            "title": "\u9519\u8bef\u62a5\u544a"
        }, 
        {
            "location": "/#_7", 
            "text": "contributors", 
            "title": "\u8d21\u732e"
        }, 
        {
            "location": "/#_8", 
            "text": "magickal-node", 
            "title": "\u7075\u611f"
        }, 
        {
            "location": "/#_9", 
            "text": "wiki", 
            "title": "\u63d2\u4ef6"
        }, 
        {
            "location": "/#_10", 
            "text": "(The MIT License)  Copyright (c) 2010  Aaron Heckmann  Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:  The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "\u8bc1\u4e66"
        }, 
        {
            "location": "/BasicUsage/", 
            "text": "\u57fa\u7840\u7528\u6cd5\n\n\n// \u5f15\u5165\u7ec4\u4ef6\n\n\nvar\n \nfs\n \n=\n \nrequire\n(\nfs\n)\n\n  \n,\n \ngm\n \n=\n \nrequire\n(\ngm\n);\n\n\n\n\n\n\u8c03\u6574\u548c\u5220\u9664EXIF\u914d\u7f6e\u6587\u4ef6\u6570\u636e\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n240\n,\n \n240\n)\n\n\n.\nnoProfile\n()\n\n\n.\nwrite\n(\n/path/to/resize.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u5ffd\u7565\u7eb5\u6a2a\u6bd4\n// some files would not be resized appropriately\n\n\n// http://stackoverflow.com/questions/5870466/imagemagick-incorrect-dimensions\n\n\n// you have two options:\n\n\n// use the \n!\n flag to ignore aspect ratio\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n240\n,\n \n240\n,\n \n!\n)\n\n\n.\nwrite\n(\n/path/to/resize.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n// use the .resizeExact with only width and/or height arguments\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresizeExact\n(\n240\n,\n \n240\n)\n\n\n.\nwrite\n(\n/path/to/resize.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u83b7\u53d6\u56fe\u50cf\u7684\u5927\u5c0f\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nsize\n(\nfunction\n \n(\nerr\n,\n \nsize\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n\n    \nconsole\n.\nlog\n(\nsize\n.\nwidth\n \n \nsize\n.\nheight\n \n?\n \nwider\n \n:\n \ntaller than you\n);\n\n\n});\n\n\n\n\n\u8f93\u51fa\u6240\u6709\u53ef\u7528\u7684\u56fe\u50cf\u5c5e\u6027\ngm\n(\n/path/to/img.png\n)\n\n\n.\nidentify\n(\nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndata\n)\n\n\n});\n\n\n\n\n\u62c9\u51fa\u52a8\u753bGIF\u7684\u7b2c\u4e00\u5e27\uff0c\u5e76\u4fdd\u5b58\u4e3aPNG\ngm\n(\n/path/to/animated.gif[0]\n)\n\n\n.\nwrite\n(\n/path/to/firstframe.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nconsole\n.\nlog\n(\naaw, shucks\n);\n\n\n});\n\n\n\n\n\u81ea\u52a8\u5b9a\u4f4d\u56fe\u50cf\ngm\n(\n/path/to/img.jpg\n)\n\n\n.\nautoOrient\n()\n\n\n.\nwrite\n(\n/path/to/oriented.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \n...\n\n\n})\n\n\n\n\n\u75af\u72c2\u7684\u5c0f\u9547\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nflip\n()\n\n\n.\nmagnify\n()\n\n\n.\nrotate\n(\ngreen\n,\n \n45\n)\n\n\n.\nblur\n(\n7\n,\n \n3\n)\n\n\n.\ncrop\n(\n300\n,\n \n300\n,\n \n150\n,\n \n130\n)\n\n\n.\nedge\n(\n3\n)\n\n\n.\nwrite\n(\n/path/to/crazy.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ncrazytown has arrived\n);\n\n\n})\n\n\n\n\n\u6ce8\u91ca\u4e00\u4e2a\u56fe\u50cf\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nstroke\n(\n#ffffff\n)\n\n\n.\ndrawCircle\n(\n10\n,\n \n10\n,\n \n20\n,\n \n10\n)\n\n\n.\nfont\n(\nHelvetica.ttf\n,\n \n12\n)\n\n\n.\ndrawText\n(\n30\n,\n \n20\n,\n \nGMagick!\n)\n\n\n.\nwrite\n(\n/path/to/drawing.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u521b\u9020\u4e00\u4e2a\u5f62\u8c61\ngm\n(\n200\n,\n \n400\n,\n \n#ddff99f3\n)\n\n\n.\ndrawText\n(\n10\n,\n \n50\n,\n \nfrom scratch\n)\n\n\n.\nwrite\n(\n/path/to/brandNewImg.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \n// ...\n\n\n});", 
            "title": "\u57fa\u7840\u7528\u6cd5"
        }, 
        {
            "location": "/BasicUsage/#_1", 
            "text": "// \u5f15\u5165\u7ec4\u4ef6  var   fs   =   require ( fs ) \n   ,   gm   =   require ( gm );   \u8c03\u6574\u548c\u5220\u9664EXIF\u914d\u7f6e\u6587\u4ef6\u6570\u636e gm ( /path/to/my/img.jpg )  . resize ( 240 ,   240 )  . noProfile ()  . write ( /path/to/resize.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u5ffd\u7565\u7eb5\u6a2a\u6bd4 // some files would not be resized appropriately  // http://stackoverflow.com/questions/5870466/imagemagick-incorrect-dimensions  // you have two options:  // use the  !  flag to ignore aspect ratio  gm ( /path/to/my/img.jpg )  . resize ( 240 ,   240 ,   ! )  . write ( /path/to/resize.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });  // use the .resizeExact with only width and/or height arguments  gm ( /path/to/my/img.jpg )  . resizeExact ( 240 ,   240 )  . write ( /path/to/resize.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u83b7\u53d6\u56fe\u50cf\u7684\u5927\u5c0f gm ( /path/to/my/img.jpg )  . size ( function   ( err ,   size )   { \n   if   ( ! err ) \n     console . log ( size . width     size . height   ?   wider   :   taller than you );  });   \u8f93\u51fa\u6240\u6709\u53ef\u7528\u7684\u56fe\u50cf\u5c5e\u6027 gm ( /path/to/img.png )  . identify ( function   ( err ,   data )   { \n   if   ( ! err )   console . log ( data )  });   \u62c9\u51fa\u52a8\u753bGIF\u7684\u7b2c\u4e00\u5e27\uff0c\u5e76\u4fdd\u5b58\u4e3aPNG gm ( /path/to/animated.gif[0] )  . write ( /path/to/firstframe.png ,   function   ( err )   { \n   if   ( err )   console . log ( aaw, shucks );  });   \u81ea\u52a8\u5b9a\u4f4d\u56fe\u50cf gm ( /path/to/img.jpg )  . autoOrient ()  . write ( /path/to/oriented.jpg ,   function   ( err )   { \n   if   ( err )   ...  })   \u75af\u72c2\u7684\u5c0f\u9547 gm ( /path/to/my/img.jpg )  . flip ()  . magnify ()  . rotate ( green ,   45 )  . blur ( 7 ,   3 )  . crop ( 300 ,   300 ,   150 ,   130 )  . edge ( 3 )  . write ( /path/to/crazy.jpg ,   function   ( err )   { \n   if   ( ! err )   console . log ( crazytown has arrived );  })   \u6ce8\u91ca\u4e00\u4e2a\u56fe\u50cf gm ( /path/to/my/img.jpg )  . stroke ( #ffffff )  . drawCircle ( 10 ,   10 ,   20 ,   10 )  . font ( Helvetica.ttf ,   12 )  . drawText ( 30 ,   20 ,   GMagick! )  . write ( /path/to/drawing.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u521b\u9020\u4e00\u4e2a\u5f62\u8c61 gm ( 200 ,   400 ,   #ddff99f3 )  . drawText ( 10 ,   50 ,   from scratch )  . write ( /path/to/brandNewImg.jpg ,   function   ( err )   { \n   // ...  });", 
            "title": "\u57fa\u7840\u7528\u6cd5"
        }, 
        {
            "location": "/Streams/", 
            "text": "\u6d41\n\n\n\u8f93\u5165\u6d41\nvar\n \nreadStream\n \n=\n \nfs\n.\ncreateReadStream\n(\n/path/to/my/img.jpg\n);\n\n\ngm\n(\nreadStream\n,\n \nimg.jpg\n)\n\n\n.\nwrite\n(\n/path/to/reformat.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u8f93\u5165\u8fdc\u7a0b\u6d41\n// \n\n\n\nvar\n \nrequest\n \n=\n \nrequire\n(\nrequest\n);\n\n\nvar\n \nurl\n \n=\n \nwww.abc.com/pic.jpg\n\n\n\ngm\n(\nrequest\n(\nurl\n))\n\n\n.\nwrite\n(\n/path/to/reformat.png\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n\n});\n\n\n\n\n\u8f93\u51fa\u53ef\u8bfb\u6d41\n// can also stream output to a ReadableStream\n\n\n// (can be piped to a local file or remote server)\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n200\n,\n \n200\n)\n\n\n.\nstream\n(\nfunction\n \n(\nerr\n,\n \nstdout\n,\n \nstderr\n)\n \n{\n\n  \nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/resized.jpg\n);\n\n  \nstdout\n.\npipe\n(\nwriteStream\n);\n\n\n});\n\n\n\n// without a callback, .stream() returns a stream\n\n\n// this is just a convenience wrapper for above.\n\n\nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/resized.jpg\n);\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n200\n,\n \n200\n)\n\n\n.\nstream\n()\n\n\n.\npipe\n(\nwriteStream\n);\n\n\n\n\n\u901a\u8fc7\u683c\u5f0f\u6216\u6587\u4ef6\u540dgm\u5c06\u63d0\u4f9b\u76f8\u5e94\u683c\u5f0f\u7684\u6570\u636e\n// pass a format or filename to stream() and\n\n\n// gm will provide image data in that format\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nstream\n(\npng\n,\n \nfunction\n \n(\nerr\n,\n \nstdout\n,\n \nstderr\n)\n \n{\n\n  \nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/reformatted.png\n);\n\n  \nstdout\n.\npipe\n(\nwriteStream\n);\n\n\n});\n\n\n\n// or without the callback\n\n\nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/reformatted.png\n);\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nstream\n(\npng\n)\n\n\n.\npipe\n(\nwriteStream\n);\n\n\n\n\ncombine the two for true streaming image processing\n// combine the two for true streaming image processing\n\n\nvar\n \nreadStream\n \n=\n \nfs\n.\ncreateReadStream\n(\n/path/to/my/img.jpg\n);\n\n\ngm\n(\nreadStream\n)\n\n\n.\nresize\n(\n200\n,\n \n200\n)\n\n\n.\nstream\n(\nfunction\n \n(\nerr\n,\n \nstdout\n,\n \nstderr\n)\n \n{\n\n  \nvar\n \nwriteStream\n \n=\n \nfs\n.\ncreateWriteStream\n(\n/path/to/my/resized.jpg\n);\n\n  \nstdout\n.\npipe\n(\nwriteStream\n);\n\n\n});\n\n\n\n\nGOTCHA\n// GOTCHA:\n\n\n// when working with input streams and any \nidentify\n\n\n// operation (size, format, etc), you must pass \n{bufferStream: true}\n if\n\n\n// you also need to convert (write() or stream()) the image afterwards\n\n\n// NOTE: this buffers the readStream in memory!\n\n\nvar\n \nreadStream\n \n=\n \nfs\n.\ncreateReadStream\n(\n/path/to/my/img.jpg\n);\n\n\ngm\n(\nreadStream\n)\n\n\n.\nsize\n({\nbufferStream\n:\n \ntrue\n},\n \nfunction\n(\nerr\n,\n \nsize\n)\n \n{\n\n  \nthis\n.\nresize\n(\nsize\n.\nwidth\n \n/\n \n2\n,\n \nsize\n.\nheight\n \n/\n \n2\n)\n\n  \nthis\n.\nwrite\n(\n/path/to/resized.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n    \nif\n \n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\ndone\n);\n\n  \n});\n\n\n});", 
            "title": "\u6d41"
        }, 
        {
            "location": "/Streams/#_1", 
            "text": "\u8f93\u5165\u6d41 var   readStream   =   fs . createReadStream ( /path/to/my/img.jpg );  gm ( readStream ,   img.jpg )  . write ( /path/to/reformat.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u8f93\u5165\u8fdc\u7a0b\u6d41 //   var   request   =   require ( request );  var   url   =   www.abc.com/pic.jpg  gm ( request ( url ))  . write ( /path/to/reformat.png ,   function   ( err )   { \n   if   ( ! err )   console . log ( done );  });   \u8f93\u51fa\u53ef\u8bfb\u6d41 // can also stream output to a ReadableStream  // (can be piped to a local file or remote server)  gm ( /path/to/my/img.jpg )  . resize ( 200 ,   200 )  . stream ( function   ( err ,   stdout ,   stderr )   { \n   var   writeStream   =   fs . createWriteStream ( /path/to/my/resized.jpg ); \n   stdout . pipe ( writeStream );  });  // without a callback, .stream() returns a stream  // this is just a convenience wrapper for above.  var   writeStream   =   fs . createWriteStream ( /path/to/my/resized.jpg );  gm ( /path/to/my/img.jpg )  . resize ( 200 ,   200 )  . stream ()  . pipe ( writeStream );   \u901a\u8fc7\u683c\u5f0f\u6216\u6587\u4ef6\u540dgm\u5c06\u63d0\u4f9b\u76f8\u5e94\u683c\u5f0f\u7684\u6570\u636e // pass a format or filename to stream() and  // gm will provide image data in that format  gm ( /path/to/my/img.jpg )  . stream ( png ,   function   ( err ,   stdout ,   stderr )   { \n   var   writeStream   =   fs . createWriteStream ( /path/to/my/reformatted.png ); \n   stdout . pipe ( writeStream );  });  // or without the callback  var   writeStream   =   fs . createWriteStream ( /path/to/my/reformatted.png );  gm ( /path/to/my/img.jpg )  . stream ( png )  . pipe ( writeStream );   combine the two for true streaming image processing // combine the two for true streaming image processing  var   readStream   =   fs . createReadStream ( /path/to/my/img.jpg );  gm ( readStream )  . resize ( 200 ,   200 )  . stream ( function   ( err ,   stdout ,   stderr )   { \n   var   writeStream   =   fs . createWriteStream ( /path/to/my/resized.jpg ); \n   stdout . pipe ( writeStream );  });   GOTCHA // GOTCHA:  // when working with input streams and any  identify  // operation (size, format, etc), you must pass  {bufferStream: true}  if  // you also need to convert (write() or stream()) the image afterwards  // NOTE: this buffers the readStream in memory!  var   readStream   =   fs . createReadStream ( /path/to/my/img.jpg );  gm ( readStream )  . size ({ bufferStream :   true },   function ( err ,   size )   { \n   this . resize ( size . width   /   2 ,   size . height   /   2 ) \n   this . write ( /path/to/resized.jpg ,   function   ( err )   { \n     if   ( ! err )   console . log ( done ); \n   });  });", 
            "title": "\u6d41"
        }, 
        {
            "location": "/Buffers/", 
            "text": "\u7f13\u51b2\u5668\n\n\n// A buffer can be passed instead of a filepath as well\n\n\nvar\n \nbuf\n \n=\n \nrequire\n(\nfs\n).\nreadFileSync\n(\n/path/to/image.jpg\n);\n\n\n\ngm\n(\nbuf\n,\n \nimage.jpg\n)\n\n\n.\nnoise\n(\nlaplacian\n)\n\n\n.\nwrite\n(\n/path/to/out.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nreturn\n \nhandle\n(\nerr\n);\n\n  \nconsole\n.\nlog\n(\nCreated an image from a Buffer!\n);\n\n\n});\n\n\n\n/*\n\n\nA buffer can also be returned instead of a stream\n\n\nThe first argument to toBuffer is optional, it specifies the image format\n\n\n*/\n\n\ngm\n(\nimg.jpg\n)\n\n\n.\nresize\n(\n100\n,\n \n100\n)\n\n\n.\ntoBuffer\n(\nPNG\n,\nfunction\n \n(\nerr\n,\n \nbuffer\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nreturn\n \nhandle\n(\nerr\n);\n\n  \nconsole\n.\nlog\n(\ndone!\n);\n\n\n})", 
            "title": "\u7f13\u51b2\u533a"
        }, 
        {
            "location": "/Buffers/#_1", 
            "text": "// A buffer can be passed instead of a filepath as well  var   buf   =   require ( fs ). readFileSync ( /path/to/image.jpg );  gm ( buf ,   image.jpg )  . noise ( laplacian )  . write ( /path/to/out.jpg ,   function   ( err )   { \n   if   ( err )   return   handle ( err ); \n   console . log ( Created an image from a Buffer! );  });  /*  A buffer can also be returned instead of a stream  The first argument to toBuffer is optional, it specifies the image format  */  gm ( img.jpg )  . resize ( 100 ,   100 )  . toBuffer ( PNG , function   ( err ,   buffer )   { \n   if   ( err )   return   handle ( err ); \n   console . log ( done! );  })", 
            "title": "\u7f13\u51b2\u5668"
        }, 
        {
            "location": "/Montage/", 
            "text": "\u8499\u592a\u5947\n\n\nGraphicsMagick supports montage for combining images side by side. This is exposed through \ngm.montage()\n. Its only argument is an image path with the changes to the base image.\n\n\n\u5f53\u524d, \ngm.montage()\n \u53ea\u63a5\u53d7\u6587\u4ef6\u8def\u5f84.\n\n\ngm.montage(other)\n\n\n\n\n\ngm\n(\n/path/to/image.jpg\n)\n\n\n.\nmontage\n(\n/path/to/second_image.jpg\n)\n\n\n.\ngeometry\n(\n+100+150\n)\n\n\n.\nwrite\n(\n/path/to/montage.png\n,\n \nfunction\n(\nerr\n)\n \n{\n\n    \nif\n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\nWritten montage image.\n);\n\n\n});", 
            "title": "\u8499\u592a\u5947"
        }, 
        {
            "location": "/Montage/#_1", 
            "text": "GraphicsMagick supports montage for combining images side by side. This is exposed through  gm.montage() . Its only argument is an image path with the changes to the base image.  \u5f53\u524d,  gm.montage()  \u53ea\u63a5\u53d7\u6587\u4ef6\u8def\u5f84.  gm.montage(other)  gm ( /path/to/image.jpg )  . montage ( /path/to/second_image.jpg )  . geometry ( +100+150 )  . write ( /path/to/montage.png ,   function ( err )   { \n     if ( ! err )   console . log ( Written montage image. );  });", 
            "title": "\u8499\u592a\u5947"
        }, 
        {
            "location": "/custom/arguments/", 
            "text": "\u81ea\u5b9a\u4e49\u53c2\u6570\n\n\nIf \ngm\n does not supply you with a method you need or does not work as you'd like, you can simply use \ngm().in()\n or \ngm().out()\n to set your own arguments.\n\n\n\n\ngm().command()\n - Custom command such as \nidentify\n or \nconvert\n\n\ngm().in()\n - Custom input arguments\n\n\ngm().out()\n - Custom output arguments\n\n\n\n\nThe command will be formatted in the following order:\n\n\n\n\ncommand\n - ie \nconvert\n\n\nin\n - the input arguments\n\n\nsource\n - stdin or an image file\n\n\nout\n - the output arguments\n\n\noutput\n - stdout or the image file to write to\n\n\n\n\nFor example, suppose you want the following command:\n\n\ngm \nconvert\n \nlabel:Offline\n \nPNG:-\n\n\n\n\n\nHowever, using \ngm().label()\n may not work as intended for you:\n\n\ngm\n()\n\n\n.\nlabel\n(\nOffline\n)\n\n\n.\nstream\n();\n\n\n\n\n\nwould yield:\n\n\ngm \nconvert\n \n-label\n \n\\\nOffline\\\n \nPNG:-\n\n\n\n\n\nInstead, you can use \ngm().out()\n:\n\n\ngm\n()\n\n\n.\nout\n(\nlabel:Offline\n)\n\n\n.\nstream\n();\n\n\n\n\n\nwhich correctly yields:\n\n\ngm \nconvert\n \nlabel:Offline\n \nPNG:-", 
            "title": "\u53c2\u6570"
        }, 
        {
            "location": "/custom/arguments/#_1", 
            "text": "If  gm  does not supply you with a method you need or does not work as you'd like, you can simply use  gm().in()  or  gm().out()  to set your own arguments.   gm().command()  - Custom command such as  identify  or  convert  gm().in()  - Custom input arguments  gm().out()  - Custom output arguments   The command will be formatted in the following order:   command  - ie  convert  in  - the input arguments  source  - stdin or an image file  out  - the output arguments  output  - stdout or the image file to write to   For example, suppose you want the following command:  gm  convert   label:Offline   PNG:-   However, using  gm().label()  may not work as intended for you:  gm ()  . label ( Offline )  . stream ();   would yield:  gm  convert   -label   \\ Offline\\   PNG:-   Instead, you can use  gm().out() :  gm ()  . out ( label:Offline )  . stream ();   which correctly yields:  gm  convert   label:Offline   PNG:-", 
            "title": "\u81ea\u5b9a\u4e49\u53c2\u6570"
        }, 
        {
            "location": "/custom/IdentifyFormatString/", 
            "text": "\u81ea\u5b9a\u4e49\u6807\u8bc6\u683c\u5f0f\u5b57\u7b26\u4e32\n\n\nWhen identifying an image, you may want to use a custom formatting string instead of using \n-verbose\n, which is quite slow.\nYou can use your own \nformatting string\n when using \ngm().identify(format, callback)\n.\nFor example,\n\n\ngm\n(\nimg.png\n).\nformat\n(\nfunction\n \n(\nerr\n,\n \nformat\n)\n \n{\n\n\n\n})\n\n\n\n// is equivalent to\n\n\n\ngm\n(\nimg.png\n).\nidentify\n(\n%m\n,\n \nfunction\n \n(\nerr\n,\n \nformat\n)\n \n{\n\n\n\n})\n\n\n\n\n\nsince \n%m\n is the format option for getting the image file format.", 
            "title": "\u6807\u8bc6\u683c\u5f0f\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/custom/IdentifyFormatString/#_1", 
            "text": "When identifying an image, you may want to use a custom formatting string instead of using  -verbose , which is quite slow.\nYou can use your own  formatting string  when using  gm().identify(format, callback) .\nFor example,  gm ( img.png ). format ( function   ( err ,   format )   {  })  // is equivalent to  gm ( img.png ). identify ( %m ,   function   ( err ,   format )   {  })   since  %m  is the format option for getting the image file format.", 
            "title": "\u81ea\u5b9a\u4e49\u6807\u8bc6\u683c\u5f0f\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/Manipulation/", 
            "text": "\u64cd\u4f5c\n\n\nA\n\n\nadjoin\ngm\n(\nimg.png\n).\nadjoin\n()\n\n\n\n\naffine\ngm\n(\nimg.png\n).\naffine\n(\nmatrix\n)\n\n\n\n\nantialias\n\u6240\u6709\u56fe\u7247\u9ed8\u8ba4\u662f anti-aliased by GraphicsMagick. To disable it pass false.\n\ngm\n(\nimg.png\n).\nantialias\n(\nfalse\n)\n\n\nappend - \u9644\u52a0\u4e00\u7ec4\u56fe\u50cf\n\u53c2\u6570\nimg\n\u53e6\u4e00\u5f20\u56fe\u7247\u5730\u5740\nltr (\u53ef\u9009)\nBoolean - \u6307\u5b9a\u9644\u52a0\u4f4d\u7f6e\ntrue \u662f left-to-right \u5de6\u5230\u53f3\nfalse \u662f top-to-bottom (\u9ed8\u8ba4\u4e0a\u5230\u4e0b)\n  \ngm\n(\nimg.png\n).\nappend\n(\nimg\n \n[,\n \nimg\n,\n \nltr\n])\n\n\n  \n// appends another.jpg to img.png from left-to-right\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\ntrue\n)\n\n\n  \n// appends another.jpg to img.png from left-to-right\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \ntrue\n)\n\n\n  \n// appends another.jpg to img.png from top-to-bottom\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n)\n\n\n  \n// appends third.gif below another.jpg below img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n).\nappend\n(\nthird.gif\n)\n\n\n  \n// appends third.gif below another.jpg below img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n)\n\n\n  \n// appends third.gif to the right of another.jpg to the right to img.png\n\n  \ngm\n(\nimg.png\n).\nappend\n(\nanother.jpg\n,\n \nthird.gif\n,\n \ntrue\n)\n\n\n\n\nauthenticate\n  \ngm\n(\nimg.png\n).\nauthenticate\n(\npassword\n)\n\n\n\n\nautoOrient\nAuto-orients the image according to its EXIF data.\nGraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.\n  \ngm\n(\nimg.jpg\n).\nautoOrient\n()\n\n\n\n\naverage\ngm\n(\nimg.png\n).\naverage\n()\n\n\n\n\nB\n\n\nbackdrop\ngm\n(\nimg.png\n).\nbackdrop\n()\n\n\n\n\nbitdepth\nSpecifies the number of bits of color to preserve in the image. See the docs for more detail.\n\ngm\n(\nimg.png\n).\nbitdepth\n(\nbits\n)\n\n\nblackThreshold\npixels below \nthreshold\n become black.\n\ngm\n(\nimg.png\n).\nblackThreshold\n(\nred\n \n[,\ngreen\n]\n \n[,\nblue\n]\n \n[,\nopacity\n])\n\n\nbluePrimary\ngm\n(\nimg.png\n).\nbluePrimary\n(\nx\n,\n \nx\n)\n\n\n\n\nblur\nAccepts a radius and optional sigma (standard deviation).\n\ngm\n(\nimg.png\n).\nblur\n(\nradius\n \n[,\n \nsigma\n])\n\n\nborder\ngm\n(\nimg.png\n).\nborder\n(\nwidth\n,\n \nheight\n)\n\n\n\n\nborderColor\ngm\n(\nimg.png\n).\nborderColor\n(\ncolor\n)\n\n\n\n\nbox\ngm\n(\nimg.png\n).\nbox\n(\ncolor\n)\n\n\n\n\nC\n\n\nchannel\ntype\n  Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray\n\ngm\n(\nimg.png\n).\nchannel\n(\ntype\n)\n\n\ncharcoal\nSimulates a charcoal drawing. Accepts a factor.\n\ngm\n(\nimg.png\n).\ncharcoal\n(\nfactor\n)\n\n\nchop\nRemoves pixels from the interior of an image.\n\ngm\n(\nimg.png\n).\nchop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\nclip\ngm\n(\nimg.png\n).\nclip\n()\n\n\n\n\ncoalesce\ngm\n(\nimg.png\n).\ncoalesce\n()\n\n\n\n\ncolorize\nColorize the image with optionally separate red, green, and blue values.\n\ngm\n(\nimg.png\n).\ncolorize\n(\nred\n \n[,\n \ngreen\n \n[,\n \nblue\n]])\n\n\ncolorMap\ntype\n  shared or private\n\ngm\n(\nimg.png\n).\ncolorMap\n(\ntype\n)\n\n\ncolors\nSets the preferred number of colors for the image (color reduction).\n\ngm\n(\nimg.png\n).\ncolors\n(\nint\n)\n\n\ncolorspace\nSpecifies the type of colorspace. See the GraphicsMagick docs for val details.\n\ngm\n(\nimg.png\n).\ncolorspace\n(\nval\n)\n\n\ncompose\ngm\n(\nimg.png\n).\ncompose\n(\noperator\n)\n\n\n\n\ncompress\ntype\nNone, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA\n\ngm\n(\nimg.png\n).\ncompress\n(\ntype\n)\n\n\ncomment\nAnnotates an image. See the docs for more info.\n\ngm\n(\nimg.png\n).\ncomment\n(\ntext\n|\nformat\n)\n\n\ncontrast\nIncreases or reduces the image contrast. Accepts a multiplier.\n\ngm\n(\nimg.png\n).\ncontrast\n([\n+-\n]\nmultiplier\n)\n\n\nconvolve\ngm\n(\nimg.png\n).\nconvolve\n(\nkernel\n)\n\n\n\n\ncreateDirectories\ngm\n(\nimg.png\n).\ncreateDirectories\n()\n\n\n\n\ncrop\nCrops the image to the given width and height at the given x and y position.\n\ngm\n(\nimg.png\n).\ncrop\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n)\n\n\ncycle\nDisplace the image colormap by amount. amount is the number of positions each colormap entry is shifted.\n\ngm\n(\nimg.png\n).\ncycle\n(\namount\n)\n\n\nD\n\n\ndeconstruct\ngm\n(\nimg.png\n).\ndeconstruct\n()\n\n\n\n\ndefine\ngm\n(\nimg.png\n).\ndefine\n()\n\n\n\n\ndelay\namount\n is in hundreths of a second.\n\ngm\n(\nimg.png\n).\ndelay\n(\namout\n)\n\n\ndensity\nThis option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image.\n\ngm\n(\nimg.png\n).\ndensity\n(\nwidth\n,\n \nheight\n)\n\n\ndespeckle\nReduces the speckles within the image.\n\ngm\n(\nimg.png\n).\ndespeckle\n()\n\n\ndisplace\nShift image pixels as defined by a displacement map.\n\ngm\n(\nimg.png\n).\ndisplace\n(\nhorizontal\n,\n \nvertical\n)\n\n\ndisplay\ngm\n(\nimg.png\n).\ndisplay\n(\nvalue\n)\n\n\n\n\ndispose\ngm\n(\nimg.png\n).\ndispose\n(\nmethod\n)\n\n\n\n\ndissolve\ngm\n(\nimg.png\n).\ndissolve\n(\nmethod\n)\n\n\n\n\ndither\nApplies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\nNote: either .colors() or .monochrome() must be used for this to take effect.\n\ngm\n(\nimg.png\n).\ndither\n([\nbool\n])\n\n\nE\n\n\nedge\nEmphasizes edges in an image. Takes an optional radius of the emphasis to apply.\n\ngm\n(\nimg.png\n).\nedge\n([\nradius\n])\n\n\nemboss\nEmbosses the image. Takes an optional radius.\n\ngm\n(\nimg.png\n).\nemboss\n([\nradius\n])\n\n\nencoding\ntype\nAdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\ngm(\"img.png\").encoding(type)\n```\nendian\ntype\nMSB, LSB, or Native\n\ngm\n(\nimg.png\n).\nendian\n(\ntype\n)\n\n\nenhance\nEnhances the image.\n\ngm\n(\nimg.png\n).\nenhance\n()\n\n\nequalize\nPerforms histogram equalization to the image.\n\ngm\n(\nimg.png\n).\nequalize\n()\n\n\nextent\ncomposite image on background color canvas image.\n\ngm\n(\nimg.png\n).\nextent\n([\nwidth\n,\n \nheight\n,\n \noptions\n])\n\n\nF\n\n\nfile\ngm\n(\nimg.png\n).\nfile\n(\nfilename\n)\n\n\n\n\nfilter\nSpecifies the filter to use when resizing. see link for available types.\n\ngm\n(\nimg.png\n).\nfilter\n(\ntype\n)\n\n\nflatten\ngm\n(\nimg.png\n).\nflatten\n()\n\n\n\n\nflip\nCreates a mirror image (vertically).\n\ngm\n(\nimg.png\n).\nflip\n()\n\n\nflop\nCreates a mirror image (horizontally).\n\ngm\n(\nimg.png\n).\nflop\n()\n\n\nforeground\ngm\n(\nimg.png\n).\nforeground\n(\ncolor\n)\n\n\n\n\nframe\ngm\n(\nimg.png\n).\nframe\n(\nwidth\n,\n \nheight\n,\n \nouterBevelWidth\n,\n \ninnerBevelWidth\n)\n\n\n\n\nfuzz\ngm\n(\nimg.png\n).\nfuzz\n(\ndistance\n \n[,\npercent\n])\n\n\n\n\nG\n\n\ngamma\nAdjusts the level of gamma correction.\n\ngm\n(\nimg.png\n).\ngamma\n(\nr\n,\n \ng\n,\n \nb\n)\n\n\ngaussian\ngm\n(\nimg.png\n).\ngaussian\n(\nradius\n \n[,\nsigma\n])\n\n\n\n\ngeometry\ngm\n(\nimg.png\n).\ngeometry\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\n\n\ngreenPrimary\ngm\n(\nimg.png\n).\ngreenPrimary\n(\nx\n,\n \ny\n)\n\n\n\n\ngravity\nThe direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\ndirection\nNorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast\n\ngm\n(\nimg.png\n).\ngravity\n(\ndirection\n)\n\n\nH\n\n\nhighlightColor\ngm\n(\nimg.png\n).\nhighlightColor\n(\ncolor\n)\n\n\n\n\nhighlightStyle\ngm\n(\nimg.png\n).\nhighlightStyle\n(\ncolor\n)\n\n\n\n\nI\n\n\niconGeometry\ngm\n(\nimg.png\n).\niconGeometry\n(\ngeometry\n)\n\n\n\n\nimplode\nImplodes the image pixels around the center. Takes an optional factor.\n\ngm\n(\nimg.png\n).\nimplode\n([\nfactor\n])\n\n\nintent\ntype\nAbsolute, Perceptual, Relative, or Saturation\n\ngm\n(\nimg.png\n).\nintent\n(\ntype\n)\n\n\ninterlace\nSpecifies the type of interlacing scheme. Defaults to None.\ntype\nNone|Line|Plane|Partition\n\ngm\n(\nimg.png\n).\ninterlace\n(\ntype\n)\n\n\nL\n\n\nlabel\nAssigns a label to an image.\n\ngm\n(\nimg.png\n).\nlabel\n(\nname\n)\n\n\nlat\ngm\n(\nimg.png\n).\nlat\n(\nwidth\n,\n \nheight\n,\n \noffset\n \n[,\npercent\n])\n\n\n\n\nlevel\ngm\n(\nimg.png\n).\nlevel\n(\nblackPoint\n,\n \ngamma\n,\n \nwhitePoint\n \n[,\npercent\n])\n\n\n\n\nlimit\nSets resource limits.\ntype\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs\n\ngm\n(\nimg.png\n).\nlimit\n(\ntype\n,\n \nval\n)\n\n\nlist\ntype\nColor, Delegate, Format, Magic, Module, Resource, or Type\n\n  \ngm\n(\nimg.png\n).\nlist\n(\ntype\n)\n\n\nlog\nSpecify format for debug log. \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nlog\n(\nformat\n)\n\n\nloop\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nloop\n(\niterations\n)\n\n\nlower\nCreates a pseudo 3D lowering effect of the images edges.\n\ngm\n(\nimg.png\n).\nlower\n(\nwidth\n,\n \nheight\n)\n\n\nM\n\n\nmagnify\nMagnifies the image factor times.\n\ngm\n(\nimg.png\n).\nmagnify\n(\nfactor\n)\n\n\nmap\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmap\n(\nfilename\n)\n\n\nmask\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmask\n(\nfilename\n)\n\n\nmatte\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmatte\n()\n\n\nmatteColor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmatteColor\n(\ncolor\n)\n\n\nmaximumError\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmaximumError\n(\nlimit\n)\n\n\nmedian\nApplies a median filter to the image. The optional param radius adjusts the weight of the effect.\n\ngm\n(\nimg.png\n).\nmedian\n([\nradius\n])\n\n\nminify\nMinifies the image factor times.\n\ngm\n(\nimg.png\n).\nminify\n(\nfactor\n)\n\n\nmode\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmode\n(\nvalue\n)\n\n\nmodulate\nVaries the brightness, saturation, and hue of the image.\n\ngm\n(\nimg.png\n).\nmodulate\n(\nb\n \n[,\n \ns\n \n[,\n \nh\n]])\n\n\nmonitor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmonitor\n()\n\n\nmonochrome\nTransforms the image to black and white.\n\ngm\n(\nimg.png\n).\nmonochrome\n()\n\n\nmorph\nMorphs two images together.\notherImg\nthe path to another img\noutName\nthe path where the image will be saved\ncallback\nA function to be executed when morphing is complete. callback will be passed the standard args that .write() receives.\n\ngm\n(\nimg.png\n).\nmorph\n(\notherImg\n,\n \noutName\n,\n \ncallback\n)\n\n\nmosaic\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmosaic\n()\n\n\nmotionBlur\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nmotionBlur\n(\nradius\n \n[,\n \nsigma\n,\n \nangle\n])\n\n\nN\n\n\nname\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nname\n()\n\n\nnegative\nReplaces every pixel with its complementary color.\n\ngm\n(\nimg.png\n).\nnegative\n()\n\n\nnoise\nAdd or reduce noise in the image.\nadius|type\nTo add noise pass one of the following:\nuniform\ngaussian\nmultiplicative\nimpulse\nlaplacian\npoisson\nOtherwise the argument will be interpreted as a radius which adjusts the weight of the effect.\n\ngm\n(\nimg.png\n).\nnoise\n(\nradius\n|\ntype\n)\n\n\nnoop\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nnoop\n()\n\n\nnormalize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nnormalize\n()\n\n\nO\n\n\nopaque\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nopaque\n(\ncolor\n)\n\n\noperator\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\noperator\n(\nchannel\n,\n \noperator\n,\n \nrvalue\n \n[,\npercent\n])\n\n\norderedDither\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\norderedDither\n(\nchannelType\n,\n \nNxN\n)\n\n\noutputDirectory\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\noutputDirectory\n(\nchannelType\n,\n \nNxN\n)\n\n\nP\n\n\npage\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npage\n(\nwidth\n,\n \nheight\n \n[,\narg\n])\n\n\npause\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npause\n(\nseconds\n)\n\n\npen\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npen\n(\ncolor\n)\n\n\nping\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nping\n()\n\n\npointSize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\npointSize\n(\nvalue\n)\n\n\nnoProfile\nRemoves EXIF, ICM, etc profile data.\n\ngm\n(\nimg.png\n).\nnoProfile\n()\n\n\npreview\ntype\nSee the docs for valid types.\n\ngm\n(\nimg.png\n).\npreview\n(\ntype\n)\n\n\npaint\nSimulates an oil painting.\n\ngm\n(\nimg.png\n).\npaint\n(\nradius\n)\n\n\nprocess\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprocess\n(\ncommand\n)\n\n\nprofile\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprofile\n(\nfilename\n)\n\n\nprogress\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nprogress\n()\n\n\nrandomThreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrandomThreshold\n(\nchannelType\n,\n \nLOWxHIGH\n)\n\n\nQ\n\n\nquality\nAdjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best).\n\ngm\n(\nimg.png\n).\nquality\n(\nval\n)\n\n\nR\n\n\nraise\nCreates a pseudo 3D raising effect of the images edges.\n\ngm\n(\nimg.png\n).\nraise\n(\nwidth\n,\n \nheight\n)\n\n\nrecolor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrecolor\n(\nmatrix\n)\n\n\nredPrimary\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nredPrimary\n(\nx\n,\n \ny\n)\n\n\nregion\nSpecifies that all following methods only apply to the area specified by width, height, x, y.\n\ngm\n(\nimg.png\n).\nregion\n(\nwidth\n,\n \nheight\n,\n \nx\n,\n \ny\n).\nsepia\n()\n\n\n\nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y.\nremote\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nremote\n()\n\n\nrender\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrender\n()\n\n\nrepage\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrepage\n(\nwidth\n,\n \nheight\n,\n \nxoff\n,\n \nyoff\n,\n \narg\n)\n\n\nS\n\n\nsample\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nsample\n(\ngeometry\n)\n\n\nsamplingFactor\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nsamplingFactor\n(\nhorizontalFactor\n,\n \nverticalFactor\n)\n\n\nrawSize\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nrawSize\n(\nwidth\n,\n \nheight\n,\n \noffset\n)\n\n\nresample\nResamples the image to specified horizontal and vertical resolution.\n\ngm\n(\nimg.png\n).\nresample\n(\nhorizontal\n,\n \nvertical\n)\n\n\nresize\nResize the image.\noptions\n%, @, !, \n or \n see the GraphicsMagick docs for details\ngm(\"img.png\").resize(width [, height [, options]])\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40)\nTo resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50)\nTo resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50)\nTo override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\")\nroll\nRolls an image vertically or horizontally.\n\ngm\n(\nimg.png\n).\nroll\n(\nhorizontalInt\n,\n \nverticalInt\n)\n\n\nrotate\nRotates the image by degrees and fills the background with color.\n\ngm\n(\nimg.png\n).\nrotate\n(\ncolor\n,\n \ndegrees\n)\n\n\nS\n\n\nscene\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nscene\n(\nvalue\n)\n\n\nscenes\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nscenes\n(\nstart\n,\n \nend\n)\n\n\nscale\nScales the image.\n\ngm\n(\nimg.png\n).\nscale\n(\nwidth\n,\n \nheight\n)\n\n\nscreen\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nscreen\n()\n\n\n\n\nsegment\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsegment\n(\nclusterThreshold\n,\n \nsmoothingThreshold\n)\n\n\n\n\nselectFrame\nHelpful if we process a large .gif so we don't load in memory each frame.\ngm\n(\nimg.png\n).\nselectFrame\n(\n0\n)\n\n\n\n\nsepia\nA convenience method to apply a sepia effect to the image.\ngm\n(\nimg.png\n).\nsepia\n()\n\n\n\n\nset\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nset\n(\nattribute\n,\n \nvalue\n)\n\n\n\n\nsetFormat\nOverriddes the output image format.\nHelpful if we are outputting an image with no extention but need to change formats.\ngm\n(\nimg.png\n).\nsetFormat\n(\nformat\n)\n\n\n\n\nshade\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshade\n(\nazimuth\n,\n \nelevation\n)\n\n\n\n\nshadow\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshadow\n(\nradius\n,\n \nsigma\n)\n\n\n\n\nsharedMemory\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsharedMemory\n()\n\n\n\n\nshave\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshave\n(\nwidth\n,\n \nheight\n,\n \npercent\n)\n\n\n\n\nsharpen\nSharpens the image.\ngm\n(\nimg.png\n).\nsharpen\n(\nradius\n \n[,\n \nsigma\n])\n\n\n\n\nshear\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nshear\n(\nxDegrees\n,\n \nyDegrees\n)\n\n\n\n\nsilent\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsilent\n()\n\n\n\n\nsnaps\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nsnaps\n(\nvalue\n)\n\n\n\n\nsolarize\nNegates all pixels above threshold percent.\ngm\n(\nimg.png\n).\nsolarize\n(\nthreshold\n)\n\n\n\n\nspread\nDesplaces pixels by a random amount.\ngm\n(\nimg.png\n).\nspread\n(\namount\n)\n\n\n\n\nstegano\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nstegano\n(\noffset\n)\n\n\n\n\nstereo\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nstereo\n()\n\n\n\n\nstrip\nStrips the image of any profiles or comments.\nSimilar to noProfile() but removes both profile and comment data. only works with imageMagick.\ngm\n(\nimg.png\n).\nstrip\n()\n\n\n\n\nswirl\nSwirls pixels arount the center of the image. degrees specifies the tightness of the swirl.\ngm\n(\nimg.png\n).\nswirl\n(\ndegrees\n)\n\n\n\n\nT\n\n\ntextFont\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntextFont\n(\nfont\n)\n\n\n\n\ntexture\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntexture\n(\nfont\n)\n\n\n\n\nthreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nthreshold\n(\nvalue\n \n[,\n \npercent\n])\n\n\n\n\nthumb\nCreates a thumbnail based on minimum sizes.\nwidth\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\"img.png\").thumb(width, height, outName, quality, callback)\ntile\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntile\n(\nfilename\n)\n\n\n\n\ntitle\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntitle\n(\nstring\n)\n\n\n\n\ntransform\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntransform\n(\ncolor\n)\n\n\n\n\ntransparent\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntransparent\n(\ncolor\n)\n\n\n\n\ntreeDepth\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\ntreeDepth\n(\ncolor\n)\n\n\n\n\ntrim\nTrim an image by removing any edges that are exactly the same color as the corner pixels.\ngm\n(\nimg.png\n).\ntrim\n()\n\n\n\n\ntype\nSpecifies the image type.\ntype\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\"img.png\").type(type)\nU\n\n\nupdate\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nupdate\n(\nseconds\n)\n\n\n\n\nunits\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nunits\n(\ntype\n)\n\n\n\n\nunsharp\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nunsharp\n(\nradius\n \n[,\n \nsigma\n,\n \namount\n,\n \nthreshold\n])\n\n\n\n\nusePixmap\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nusePixmap\n()\n\n\n\n\nV\n\n\nview\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nview\n()\n\n\n\n\nvirtualPixel\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nvirtualPixel\n(\nmethod\n)\n\n\n\n\nvisual\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\ngm\n(\nimg.png\n).\nvisual\n(\ntype\n)\n\n\n\n\nW\n\n\nwatermark\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwatermark\n(\nbrightness\n,\n \nsaturation\n)\n\n\nwave\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwave\n(\namplitude\n,\n \nwavelength\n)\n\n\nwhitePoint\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwhitePoint\n(\nx\n,\n \ny\n)\n\n\nwhiteThreshold\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwhiteThreshold\n(\nred\n,\n \ngreen\n,\n \nblue\n,\n \nopacity\n)\n\n\nwindow\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwindow\n(\nid\n)\n\n\nwindowGroup\n\u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002\n\ngm\n(\nimg.png\n).\nwindowGroup\n()", 
            "title": "\u65b9\u6cd5"
        }, 
        {
            "location": "/Manipulation/#_1", 
            "text": "", 
            "title": "\u64cd\u4f5c"
        }, 
        {
            "location": "/Manipulation/#a", 
            "text": "adjoin gm ( img.png ). adjoin ()   affine gm ( img.png ). affine ( matrix )   antialias \u6240\u6709\u56fe\u7247\u9ed8\u8ba4\u662f anti-aliased by GraphicsMagick. To disable it pass false. gm ( img.png ). antialias ( false )  append - \u9644\u52a0\u4e00\u7ec4\u56fe\u50cf \u53c2\u6570 img \u53e6\u4e00\u5f20\u56fe\u7247\u5730\u5740 ltr (\u53ef\u9009) Boolean - \u6307\u5b9a\u9644\u52a0\u4f4d\u7f6e true \u662f left-to-right \u5de6\u5230\u53f3 false \u662f top-to-bottom (\u9ed8\u8ba4\u4e0a\u5230\u4e0b)    gm ( img.png ). append ( img   [,   img ,   ltr ]) \n\n   // appends another.jpg to img.png from left-to-right \n   gm ( img.png ). append ( another.jpg ). append ( true ) \n\n   // appends another.jpg to img.png from left-to-right \n   gm ( img.png ). append ( another.jpg ,   true ) \n\n   // appends another.jpg to img.png from top-to-bottom \n   gm ( img.png ). append ( another.jpg ) \n\n   // appends third.gif below another.jpg below img.png \n   gm ( img.png ). append ( another.jpg ). append ( third.gif ) \n\n   // appends third.gif below another.jpg below img.png \n   gm ( img.png ). append ( another.jpg ,   third.gif ) \n\n   // appends third.gif to the right of another.jpg to the right to img.png \n   gm ( img.png ). append ( another.jpg ,   third.gif ,   true )   authenticate    gm ( img.png ). authenticate ( password )   autoOrient Auto-orients the image according to its EXIF data.\nGraphicsMagick doesn't actually have the -auto-orient option but we emulate this by first reading the EXIF data and rotate/flip from there.    gm ( img.jpg ). autoOrient ()   average gm ( img.png ). average ()", 
            "title": "A"
        }, 
        {
            "location": "/Manipulation/#b", 
            "text": "backdrop gm ( img.png ). backdrop ()   bitdepth Specifies the number of bits of color to preserve in the image. See the docs for more detail. gm ( img.png ). bitdepth ( bits )  blackThreshold pixels below  threshold  become black. gm ( img.png ). blackThreshold ( red   [, green ]   [, blue ]   [, opacity ])  bluePrimary gm ( img.png ). bluePrimary ( x ,   x )   blur Accepts a radius and optional sigma (standard deviation). gm ( img.png ). blur ( radius   [,   sigma ])  border gm ( img.png ). border ( width ,   height )   borderColor gm ( img.png ). borderColor ( color )   box gm ( img.png ). box ( color )", 
            "title": "B"
        }, 
        {
            "location": "/Manipulation/#c", 
            "text": "channel type\n  Red, Green, Blue, Opacity, Matte, Cyan, Magenta, Yellow, Black, or Gray gm ( img.png ). channel ( type )  charcoal Simulates a charcoal drawing. Accepts a factor. gm ( img.png ). charcoal ( factor )  chop Removes pixels from the interior of an image. gm ( img.png ). chop ( width ,   height ,   x ,   y )  clip gm ( img.png ). clip ()   coalesce gm ( img.png ). coalesce ()   colorize Colorize the image with optionally separate red, green, and blue values. gm ( img.png ). colorize ( red   [,   green   [,   blue ]])  colorMap type\n  shared or private gm ( img.png ). colorMap ( type )  colors Sets the preferred number of colors for the image (color reduction). gm ( img.png ). colors ( int )  colorspace Specifies the type of colorspace. See the GraphicsMagick docs for val details. gm ( img.png ). colorspace ( val )  compose gm ( img.png ). compose ( operator )   compress type\nNone, BZip, Fax, Group4, JPEG, Lossless, LZW, RLE, Zip, or LZMA gm ( img.png ). compress ( type )  comment Annotates an image. See the docs for more info. gm ( img.png ). comment ( text | format )  contrast Increases or reduces the image contrast. Accepts a multiplier. gm ( img.png ). contrast ([ +- ] multiplier )  convolve gm ( img.png ). convolve ( kernel )   createDirectories gm ( img.png ). createDirectories ()   crop Crops the image to the given width and height at the given x and y position. gm ( img.png ). crop ( width ,   height ,   x ,   y )  cycle Displace the image colormap by amount. amount is the number of positions each colormap entry is shifted. gm ( img.png ). cycle ( amount )", 
            "title": "C"
        }, 
        {
            "location": "/Manipulation/#d", 
            "text": "deconstruct gm ( img.png ). deconstruct ()   define gm ( img.png ). define ()   delay amount  is in hundreths of a second. gm ( img.png ). delay ( amout )  density This option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats into an image. gm ( img.png ). density ( width ,   height )  despeckle Reduces the speckles within the image. gm ( img.png ). despeckle ()  displace Shift image pixels as defined by a displacement map. gm ( img.png ). displace ( horizontal ,   vertical )  display gm ( img.png ). display ( value )   dispose gm ( img.png ). dispose ( method )   dissolve gm ( img.png ). dissolve ( method )   dither Applies Floyd/Steinberg error diffusion to the image. Pass false to disable dithering.\nNote: either .colors() or .monochrome() must be used for this to take effect. gm ( img.png ). dither ([ bool ])", 
            "title": "D"
        }, 
        {
            "location": "/Manipulation/#e", 
            "text": "edge Emphasizes edges in an image. Takes an optional radius of the emphasis to apply. gm ( img.png ). edge ([ radius ])  emboss Embosses the image. Takes an optional radius. gm ( img.png ). emboss ([ radius ])  encoding type\nAdobeCustom, AdobeExpert, AdobeStandard, AppleRoman, BIG5, GB2312, Latin 2, None, SJIScode, Symbol, Unicode, Wansung\ngm(\"img.png\").encoding(type)\n``` endian type\nMSB, LSB, or Native gm ( img.png ). endian ( type )  enhance Enhances the image. gm ( img.png ). enhance ()  equalize Performs histogram equalization to the image. gm ( img.png ). equalize ()  extent composite image on background color canvas image. gm ( img.png ). extent ([ width ,   height ,   options ])", 
            "title": "E"
        }, 
        {
            "location": "/Manipulation/#f", 
            "text": "file gm ( img.png ). file ( filename )   filter Specifies the filter to use when resizing. see link for available types. gm ( img.png ). filter ( type )  flatten gm ( img.png ). flatten ()   flip Creates a mirror image (vertically). gm ( img.png ). flip ()  flop Creates a mirror image (horizontally). gm ( img.png ). flop ()  foreground gm ( img.png ). foreground ( color )   frame gm ( img.png ). frame ( width ,   height ,   outerBevelWidth ,   innerBevelWidth )   fuzz gm ( img.png ). fuzz ( distance   [, percent ])", 
            "title": "F"
        }, 
        {
            "location": "/Manipulation/#g", 
            "text": "gamma Adjusts the level of gamma correction. gm ( img.png ). gamma ( r ,   g ,   b )  gaussian gm ( img.png ). gaussian ( radius   [, sigma ])   geometry gm ( img.png ). geometry ( width ,   height   [, arg ])   greenPrimary gm ( img.png ). greenPrimary ( x ,   y )   gravity The direction the primitive gravitates to when annotating the image. Defaults to NorthWest.\ndirection\nNorthWest|North|NorthEast|West|Center|East|SouthWest|South|SouthEast gm ( img.png ). gravity ( direction )", 
            "title": "G"
        }, 
        {
            "location": "/Manipulation/#h", 
            "text": "highlightColor gm ( img.png ). highlightColor ( color )   highlightStyle gm ( img.png ). highlightStyle ( color )", 
            "title": "H"
        }, 
        {
            "location": "/Manipulation/#i", 
            "text": "iconGeometry gm ( img.png ). iconGeometry ( geometry )   implode Implodes the image pixels around the center. Takes an optional factor. gm ( img.png ). implode ([ factor ])  intent type\nAbsolute, Perceptual, Relative, or Saturation gm ( img.png ). intent ( type )  interlace Specifies the type of interlacing scheme. Defaults to None. type\nNone|Line|Plane|Partition gm ( img.png ). interlace ( type )", 
            "title": "I"
        }, 
        {
            "location": "/Manipulation/#l", 
            "text": "label Assigns a label to an image. gm ( img.png ). label ( name )  lat gm ( img.png ). lat ( width ,   height ,   offset   [, percent ])   level gm ( img.png ). level ( blackPoint ,   gamma ,   whitePoint   [, percent ])   limit Sets resource limits. type\ndisk|file|map|memory|pixels|threads\nval\nfollows the same rules as specified in the GraphicsMagick docs gm ( img.png ). limit ( type ,   val )  list type\nColor, Delegate, Format, Magic, Module, Resource, or Type    gm ( img.png ). list ( type )  log Specify format for debug log. \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). log ( format )  loop \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). loop ( iterations )  lower Creates a pseudo 3D lowering effect of the images edges. gm ( img.png ). lower ( width ,   height )", 
            "title": "L"
        }, 
        {
            "location": "/Manipulation/#m", 
            "text": "magnify Magnifies the image factor times. gm ( img.png ). magnify ( factor )  map \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). map ( filename )  mask \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mask ( filename )  matte \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). matte ()  matteColor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). matteColor ( color )  maximumError \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). maximumError ( limit )  median Applies a median filter to the image. The optional param radius adjusts the weight of the effect. gm ( img.png ). median ([ radius ])  minify Minifies the image factor times. gm ( img.png ). minify ( factor )  mode \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mode ( value )  modulate Varies the brightness, saturation, and hue of the image. gm ( img.png ). modulate ( b   [,   s   [,   h ]])  monitor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). monitor ()  monochrome Transforms the image to black and white. gm ( img.png ). monochrome ()  morph Morphs two images together. otherImg the path to another img outName the path where the image will be saved callback A function to be executed when morphing is complete. callback will be passed the standard args that .write() receives. gm ( img.png ). morph ( otherImg ,   outName ,   callback )  mosaic \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). mosaic ()  motionBlur \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). motionBlur ( radius   [,   sigma ,   angle ])", 
            "title": "M"
        }, 
        {
            "location": "/Manipulation/#n", 
            "text": "name \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). name ()  negative Replaces every pixel with its complementary color. gm ( img.png ). negative ()  noise Add or reduce noise in the image.\nadius|type\nTo add noise pass one of the following:\nuniform\ngaussian\nmultiplicative\nimpulse\nlaplacian\npoisson\nOtherwise the argument will be interpreted as a radius which adjusts the weight of the effect. gm ( img.png ). noise ( radius | type )  noop \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). noop ()  normalize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). normalize ()", 
            "title": "N"
        }, 
        {
            "location": "/Manipulation/#o", 
            "text": "opaque \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). opaque ( color )  operator \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). operator ( channel ,   operator ,   rvalue   [, percent ])  orderedDither \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). orderedDither ( channelType ,   NxN )  outputDirectory \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). outputDirectory ( channelType ,   NxN )", 
            "title": "O"
        }, 
        {
            "location": "/Manipulation/#p", 
            "text": "page \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). page ( width ,   height   [, arg ])  pause \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pause ( seconds )  pen \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pen ( color )  ping \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). ping ()  pointSize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). pointSize ( value )  noProfile Removes EXIF, ICM, etc profile data. gm ( img.png ). noProfile ()  preview type\nSee the docs for valid types. gm ( img.png ). preview ( type )  paint Simulates an oil painting. gm ( img.png ). paint ( radius )  process \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). process ( command )  profile \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). profile ( filename )  progress \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). progress ()  randomThreshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). randomThreshold ( channelType ,   LOWxHIGH )", 
            "title": "P"
        }, 
        {
            "location": "/Manipulation/#q", 
            "text": "quality Adjusts the jpeg|miff|png|tiff compression level. val ranges from 0 to 100 (best). gm ( img.png ). quality ( val )", 
            "title": "Q"
        }, 
        {
            "location": "/Manipulation/#r", 
            "text": "raise Creates a pseudo 3D raising effect of the images edges. gm ( img.png ). raise ( width ,   height )  recolor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). recolor ( matrix )  redPrimary \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). redPrimary ( x ,   y )  region Specifies that all following methods only apply to the area specified by width, height, x, y. gm ( img.png ). region ( width ,   height ,   x ,   y ). sepia ()  \nIn this case, the sepia effect would only be applied within the area specified by width, height, x, y. remote \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). remote ()  render \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). render ()  repage \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). repage ( width ,   height ,   xoff ,   yoff ,   arg )", 
            "title": "R"
        }, 
        {
            "location": "/Manipulation/#s", 
            "text": "sample \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). sample ( geometry )  samplingFactor \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). samplingFactor ( horizontalFactor ,   verticalFactor )  rawSize \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). rawSize ( width ,   height ,   offset )  resample Resamples the image to specified horizontal and vertical resolution. gm ( img.png ). resample ( horizontal ,   vertical )  resize Resize the image. options\n%, @, !,   or   see the GraphicsMagick docs for details\ngm(\"img.png\").resize(width [, height [, options]])\nTo resize an image to a width of 40px while maintaining aspect ratio: gm(\"img.png\").resize(40) To resize an image to a height of 50px while maintaining aspect ratio: gm(\"img.png\").resize(null, 50) To resize an image to a fit a 40x50 rectangle while maintaining aspect ratio: gm(\"img.png\").resize(40, 50) To override the image's proportions and force a resize to 40x50: gm(\"img.png\").resize(40, 50, \"!\") roll Rolls an image vertically or horizontally. gm ( img.png ). roll ( horizontalInt ,   verticalInt )  rotate Rotates the image by degrees and fills the background with color. gm ( img.png ). rotate ( color ,   degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#s_1", 
            "text": "scene \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). scene ( value )  scenes \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). scenes ( start ,   end )  scale Scales the image. gm ( img.png ). scale ( width ,   height )  screen \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). screen ()   segment \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). segment ( clusterThreshold ,   smoothingThreshold )   selectFrame Helpful if we process a large .gif so we don't load in memory each frame. gm ( img.png ). selectFrame ( 0 )   sepia A convenience method to apply a sepia effect to the image. gm ( img.png ). sepia ()   set \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). set ( attribute ,   value )   setFormat Overriddes the output image format. Helpful if we are outputting an image with no extention but need to change formats. gm ( img.png ). setFormat ( format )   shade \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shade ( azimuth ,   elevation )   shadow \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shadow ( radius ,   sigma )   sharedMemory \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). sharedMemory ()   shave \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shave ( width ,   height ,   percent )   sharpen Sharpens the image. gm ( img.png ). sharpen ( radius   [,   sigma ])   shear \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). shear ( xDegrees ,   yDegrees )   silent \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). silent ()   snaps \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). snaps ( value )   solarize Negates all pixels above threshold percent. gm ( img.png ). solarize ( threshold )   spread Desplaces pixels by a random amount. gm ( img.png ). spread ( amount )   stegano \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). stegano ( offset )   stereo \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). stereo ()   strip Strips the image of any profiles or comments. Similar to noProfile() but removes both profile and comment data. only works with imageMagick. gm ( img.png ). strip ()   swirl Swirls pixels arount the center of the image. degrees specifies the tightness of the swirl. gm ( img.png ). swirl ( degrees )", 
            "title": "S"
        }, 
        {
            "location": "/Manipulation/#t", 
            "text": "textFont \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). textFont ( font )   texture \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). texture ( font )   threshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). threshold ( value   [,   percent ])   thumb Creates a thumbnail based on minimum sizes. width\nthe minimum width of the thumbnail\nheight\nthe minimum height of the thumbnail\noutName\nthe path where the image will be saved\nquality\nAdjusts the image compression level. Ranges from 0 to 100 (best).\ncallback\ncalled after the thumbnail is written. receives the same args that .write(err, stdout, stderr, command) receives.\ngm(\"img.png\").thumb(width, height, outName, quality, callback) tile \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). tile ( filename )   title \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). title ( string )   transform \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). transform ( color )   transparent \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). transparent ( color )   treeDepth \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). treeDepth ( color )   trim Trim an image by removing any edges that are exactly the same color as the corner pixels. gm ( img.png ). trim ()   type Specifies the image type. type\nCan be one of the following:\nBilevel\nGrayscale\nPalette\nPaletteMatte\nTrueColor\nTrueColorMatte\nColorSeparation\nColorSeparationMatte\nOptimize\ngm(\"img.png\").type(type)", 
            "title": "T"
        }, 
        {
            "location": "/Manipulation/#u", 
            "text": "update \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). update ( seconds )   units \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). units ( type )   unsharp \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). unsharp ( radius   [,   sigma ,   amount ,   threshold ])   usePixmap \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). usePixmap ()", 
            "title": "U"
        }, 
        {
            "location": "/Manipulation/#v", 
            "text": "view \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). view ()   virtualPixel \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). virtualPixel ( method )   visual \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). visual ( type )", 
            "title": "V"
        }, 
        {
            "location": "/Manipulation/#w", 
            "text": "watermark \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). watermark ( brightness ,   saturation )  wave \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). wave ( amplitude ,   wavelength )  whitePoint \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). whitePoint ( x ,   y )  whiteThreshold \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). whiteThreshold ( red ,   green ,   blue ,   opacity )  window \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). window ( id )  windowGroup \u8be6\u60c5\u8bf7\u53c2\u9605\u6587\u6863\u3002 gm ( img.png ). windowGroup ()", 
            "title": "W"
        }, 
        {
            "location": "/Getters/", 
            "text": "\u83b7\u53d6\u5668\n\n\n\u6240\u6709\u7684\u83b7\u53d6\u5668\u90fd\u6709\u76f8\u540c\u7684\u7b7e\u540d:\n\n\ngm\n(\nimage.png\n).\nsize\n(\nfunction\n(\nerr\n,\n \nvalue\n){\n\n  \n// \u6ce8\u610f : \u503c\u53ef\u80fd\u4e3a undefined\n\n\n})\n\n\n\n\n\n\n\nsize - \u56fe\u50cf\u5bbd\u9ad8 (WxH)\n\n\nformat - \u683c\u5f0f (gif, jpeg, png, etc)\n\n\ndepth - \u989c\u8272\u6df1\u5ea6\n\n\ncolor - \u989c\u8272\u6570\n\n\nres - \u5206\u8fa8\u7387\n\n\nfilesize - \u6587\u4ef6\u5927\u5c0f\n\n\nidentify - \u6570\u636e\u53ef\u7528\u6027\n\n\norientation - EXIF\u65b9\u5411", 
            "title": "\u83b7\u53d6\u5668"
        }, 
        {
            "location": "/Getters/#_1", 
            "text": "\u6240\u6709\u7684\u83b7\u53d6\u5668\u90fd\u6709\u76f8\u540c\u7684\u7b7e\u540d:  gm ( image.png ). size ( function ( err ,   value ){ \n   // \u6ce8\u610f : \u503c\u53ef\u80fd\u4e3a undefined  })    size - \u56fe\u50cf\u5bbd\u9ad8 (WxH)  format - \u683c\u5f0f (gif, jpeg, png, etc)  depth - \u989c\u8272\u6df1\u5ea6  color - \u989c\u8272\u6570  res - \u5206\u8fa8\u7387  filesize - \u6587\u4ef6\u5927\u5c0f  identify - \u6570\u636e\u53ef\u7528\u6027  orientation - EXIF\u65b9\u5411", 
            "title": "\u83b7\u53d6\u5668"
        }, 
        {
            "location": "/drawing/", 
            "text": "\u57fa\u672c\u7ed8\u56fe\n\n\n\u67e5\u770b \ndrawing.js\n \u6587\u4ef6\u91cc\u7684\u793a\u4f8b.\n\n\n\u753b - draw\nAnnotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods.\n\ngm\n(\nimg.png\n).\ndraw\n(\nargs\n)\n\n\n\u77e9\u5f62 - drawArc\nInscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation.\n\ngm\n(\nimg.png\n).\ndrawArc\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n,\n \nr0\n,\n \nr1\n)\n\n\n\u8d1d\u585e\u5c14\u66f2\u7ebf - drawBezier\ngm\n(\nimg.png\n).\ndrawBezier\n([\nx0\n,\n \ny0\n],\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\u5706 - drawCircle\ngm\n(\nimg.png\n).\ndrawCircle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\u692d\u5706\u5f62 - drawEllipse\ngm\n(\nimg.png\n).\ndrawEllipse\n(\nx0\n,\n \ny0\n,\n \nr0\n,\n \nry\n,\n \nr0\n,\n \nr1\n)\n\n\n\n\n\u7ebf - drawLine\ngm\n(\nimg.png\n).\ndrawLine\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\n\n\n\u70b9 - drawPoint\ngm\n(\nimg.png\n).\ndrawPoint\n(\nx\n,\n \ny\n)\n\n\n\n\n\u591a\u8fb9\u5f62 - drawPolygon\ngm\n(\nimg.png\n).\ndrawPolygon\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\u591a\u6bb5\u7ebf - drawPolyline\ngm\n(\nimg.png\n).\ndrawPolyline\n([\nx0\n,\n \ny0\n]\n \n...\n \n[\nxn\n,\n \nyn\n])\n\n\n\n\n\u77e9\u5f62 - drawRectangle\nwc and hc are optional and add roundness to the corners.\n\ngm\n(\nimg.png\n).\ndrawRectangle\n(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n \n[,\n \nwc\n,\n \nhc\n])\n\n\n\u6587\u672c - drawText\nDraws text on an image at x/y coordinates.\n\ngm\n(\nimg.png\n).\ndrawText\n(\nx\n,\n \ny\n,\n \ntext\n \n[,\n \ngravity\n])\n\n\n\u586b\u5145\u989c\u8272 - fill\nSpecifies the color to use when filling a drawn shape.\n\ngm\n(\nimg.png\n).\nfill\n(\ncolor\n)\n\n\n\u5b57\u4f53 - font\ngm\n(\nimg.png\n).\nfont\n(\nname\n)\n\n\n\n\n\u5b57\u4f53\u5927\u5c0f - fontSize\ngm\n(\nimg.png\n).\nfontSize\n(\nsize\n)\n\n\n\n\n\u5212 - stroke\nSpecifies the color to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstroke\n(\ncolor\n \n[,\n \nwidth\n])\n\n\n\u8bbe\u7f6e\u8fb9\u7684\u5bbd\u5ea6 - strokeWidth\nSpecifies the stroke width to use when stroking a drawn shape.\n\ngm\n(\nimg.png\n).\nstrokeWidth\n(\nwidth\n)\n\n\n\u8bbe\u7f6e\u5c5e\u6027 - setDraw\nSets drawing properties. property can be either \"color\" or \"matte\".\n\ngm\n(\nimg.png\n).\nsetDraw\n(\nproperty\n,\n \nx\n,\n \ny\n,\n \nmethod\n)", 
            "title": "\u547d\u4ee4"
        }, 
        {
            "location": "/drawing/#_1", 
            "text": "\u67e5\u770b  drawing.js  \u6587\u4ef6\u91cc\u7684\u793a\u4f8b.  \u753b - draw Annotate an image with one or more graphic primitives (shapes, text, transformations, pixel operations). Used internally for all drawing methods. gm ( img.png ). draw ( args )  \u77e9\u5f62 - drawArc Inscribe an elliptical arc within a rectangle. Requires a start and end point as well as the degrees of rotation. gm ( img.png ). drawArc ( x0 ,   y0 ,   x1 ,   y1 ,   r0 ,   r1 )  \u8d1d\u585e\u5c14\u66f2\u7ebf - drawBezier gm ( img.png ). drawBezier ([ x0 ,   y0 ],   ...   [ xn ,   yn ])   \u5706 - drawCircle gm ( img.png ). drawCircle ( x0 ,   y0 ,   x1 ,   y1 )   \u692d\u5706\u5f62 - drawEllipse gm ( img.png ). drawEllipse ( x0 ,   y0 ,   r0 ,   ry ,   r0 ,   r1 )   \u7ebf - drawLine gm ( img.png ). drawLine ( x0 ,   y0 ,   x1 ,   y1 )   \u70b9 - drawPoint gm ( img.png ). drawPoint ( x ,   y )   \u591a\u8fb9\u5f62 - drawPolygon gm ( img.png ). drawPolygon ([ x0 ,   y0 ]   ...   [ xn ,   yn ])   \u591a\u6bb5\u7ebf - drawPolyline gm ( img.png ). drawPolyline ([ x0 ,   y0 ]   ...   [ xn ,   yn ])   \u77e9\u5f62 - drawRectangle wc and hc are optional and add roundness to the corners. gm ( img.png ). drawRectangle ( x0 ,   y0 ,   x1 ,   y1   [,   wc ,   hc ])  \u6587\u672c - drawText Draws text on an image at x/y coordinates. gm ( img.png ). drawText ( x ,   y ,   text   [,   gravity ])  \u586b\u5145\u989c\u8272 - fill Specifies the color to use when filling a drawn shape. gm ( img.png ). fill ( color )  \u5b57\u4f53 - font gm ( img.png ). font ( name )   \u5b57\u4f53\u5927\u5c0f - fontSize gm ( img.png ). fontSize ( size )   \u5212 - stroke Specifies the color to use when stroking a drawn shape. gm ( img.png ). stroke ( color   [,   width ])  \u8bbe\u7f6e\u8fb9\u7684\u5bbd\u5ea6 - strokeWidth Specifies the stroke width to use when stroking a drawn shape. gm ( img.png ). strokeWidth ( width )  \u8bbe\u7f6e\u5c5e\u6027 - setDraw Sets drawing properties. property can be either \"color\" or \"matte\". gm ( img.png ). setDraw ( property ,   x ,   y ,   method )", 
            "title": "\u57fa\u672c\u7ed8\u56fe"
        }, 
        {
            "location": "/drawing/example/", 
            "text": "// gm - Copyright Aaron Heckmann \naaron.heckmann+github@gmail.com\n (MIT Licensed)\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\n../\n)\n\n  \n,\n \ndir\n \n=\n \n__dirname\n \n+\n \n/imgs\n\n\n\ngm\n(\ndir\n \n+\n \n/original.png\n)\n\n  \n.\nblur\n(\n8\n,\n \n4\n)\n\n  \n.\nstroke\n(\nred\n,\n \n7\n)\n\n  \n.\nfill\n(\n#ffffffbb\n)\n\n  \n.\ndrawLine\n(\n20\n,\n \n10\n,\n \n50\n,\n \n40\n)\n\n  \n.\nfill\n(\n#2c2\n)\n\n  \n.\nstroke\n(\nblue\n,\n \n1\n)\n\n  \n.\ndrawRectangle\n(\n40\n,\n \n10\n,\n \n50\n,\n \n20\n)\n\n  \n.\ndrawRectangle\n(\n60\n,\n \n10\n,\n \n70\n,\n \n20\n,\n \n3\n)\n\n  \n.\ndrawArc\n(\n80\n,\n \n10\n,\n \n90\n,\n \n20\n,\n \n0\n,\n \n180\n)\n\n  \n.\ndrawEllipse\n(\n105\n,\n \n15\n,\n \n3\n,\n \n5\n)\n\n  \n.\ndrawCircle\n(\n125\n,\n \n15\n,\n \n120\n,\n \n15\n)\n\n  \n.\ndrawPolyline\n([\n140\n,\n \n10\n],\n \n[\n143\n,\n \n13\n],\n \n[\n145\n,\n \n13\n],\n \n[\n147\n,\n \n15\n],\n \n[\n145\n,\n \n17\n],\n \n[\n143\n,\n \n19\n])\n\n  \n.\ndrawPolygon\n([\n160\n,\n \n10\n],\n \n[\n163\n,\n \n13\n],\n \n[\n165\n,\n \n13\n],\n \n[\n167\n,\n \n15\n],\n \n[\n165\n,\n \n17\n],\n \n[\n163\n,\n \n19\n])\n\n  \n.\ndrawBezier\n([\n180\n,\n \n10\n],\n \n[\n183\n,\n \n13\n],\n \n[\n185\n,\n \n13\n],\n \n[\n187\n,\n \n15\n],\n \n[\n185\n,\n \n17\n],\n \n[\n183\n,\n \n19\n])\n\n  \n.\nfontSize\n(\n68\n)\n\n  \n.\nstroke\n(\n#efe\n,\n \n2\n)\n\n  \n.\nfill\n(\n#888\n)\n\n  \n.\ndrawText\n(\n-\n20\n,\n \n98\n,\n \ngraphics magick\n)\n\n  \n.\nwrite\n(\ndir\n \n+\n \n/drawing.png\n,\n \nfunction\n(\nerr\n){\n\n    \nif\n \n(\nerr\n)\n \nreturn\n \nconsole\n.\ndir\n(\narguments\n)\n\n    \nconsole\n.\nlog\n(\nthis\n.\noutname\n \n+\n \n created  :: \n \n+\n \narguments\n[\n3\n])\n\n  \n}\n\n\n)", 
            "title": "\u4e3e\u4f8b"
        }, 
        {
            "location": "/composite/", 
            "text": "\u5408\u5e76\n\n\nGraphicsMagick supports compositing one image on top of another. This is exposed through \ngm.composite()\n. Its first argument is an image path with the changes to the base image, and an optional mask image.\n\n\nCurrently, \ngm.composite()\n only accepts file paths.\n\n\ngm.composite(other [, mask])\n\n\n\n\n\ngm\n(\n/path/to/image.jpg\n)\n\n\n.\ncomposite\n(\n/path/to/second_image.jpg\n)\n\n\n.\ngeometry\n(\n+100+150\n)\n\n\n.\nwrite\n(\n/path/to/composite.png\n,\n \nfunction\n(\nerr\n)\n \n{\n\n    \nif\n(\n!\nerr\n)\n \nconsole\n.\nlog\n(\nWritten composite image.\n);\n\n\n});", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/composite/#_1", 
            "text": "GraphicsMagick supports compositing one image on top of another. This is exposed through  gm.composite() . Its first argument is an image path with the changes to the base image, and an optional mask image.  Currently,  gm.composite()  only accepts file paths.  gm.composite(other [, mask])  gm ( /path/to/image.jpg )  . composite ( /path/to/second_image.jpg )  . geometry ( +100+150 )  . write ( /path/to/composite.png ,   function ( err )   { \n     if ( ! err )   console . log ( Written composite image. );  });", 
            "title": "\u5408\u5e76"
        }, 
        {
            "location": "/composite/example/", 
            "text": "gm\u7684\u5b9e\u73b0\n\n\n// composite\n\n\n\n/**\n\n\n * Composite images together using the `composite` command in graphicsmagick.\n\n\n *\n\n\n * gm(\n/path/to/image.jpg\n)\n\n\n * .composite(\n/path/to/second_image.jpg\n)\n\n\n * .geometry(\n+100+150\n)\n\n\n * .write(\n/path/to/composite.png\n, function(err) {\n\n\n *   if(!err) console.log(\nWritten composite image.\n);\n\n\n * });\n\n\n *\n\n\n * @param {String} other  Path to the image that contains the changes.\n\n\n * @param {String} [mask] Path to the image with opacity informtion. Grayscale.\n\n\n */\n\n\n\nmodule\n.\nexports\n \n=\n \nexports\n \n=\n \nfunction\n(\nproto\n)\n \n{\n\n    \nproto\n.\ncomposite\n \n=\n \nfunction\n(\nother\n,\n \nmask\n)\n \n{\n\n        \nthis\n.\nin\n(\nother\n);\n\n\n        \n// If the mask is defined, add it to the output.\n\n        \nif\n(\ntypeof\n \nmask\n \n!==\n \nundefined\n)\n\n            \nthis\n.\nout\n(\nmask\n);\n\n\n        \nthis\n.\nsubCommand\n(\ncomposite\n);\n\n\n        \nreturn\n \nthis\n;\n\n    \n}\n\n\n}\n\n\n\n\n\nstackoverflow \u7b54\u6848\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\ngm\n);\n\n\n\ngm\n()\n\n  \n.\nin\n(\n-page\n,\n \n+0+0\n)\n\n  \n.\nin\n(\nbg.jpg\n)\n\n  \n.\nin\n(\n-page\n,\n \n+10+20\n)\n \n// location of smallIcon.jpg is x,y -\n 10, 20\n\n  \n.\nin\n(\nsmallIcon.jpg\n)\n\n  \n.\nmosaic\n()\n\n  \n.\nwrite\n(\ntesOutput.jpg\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n    \nif\n \n(\nerr\n)\n \nconsole\n.\nlog\n(\nerr\n);\n\n  \n});", 
            "title": "\u4ee3\u7801"
        }, 
        {
            "location": "/composite/example/#gm", 
            "text": "// composite  /**   * Composite images together using the `composite` command in graphicsmagick.   *   * gm( /path/to/image.jpg )   * .composite( /path/to/second_image.jpg )   * .geometry( +100+150 )   * .write( /path/to/composite.png , function(err) {   *   if(!err) console.log( Written composite image. );   * });   *   * @param {String} other  Path to the image that contains the changes.   * @param {String} [mask] Path to the image with opacity informtion. Grayscale.   */  module . exports   =   exports   =   function ( proto )   { \n     proto . composite   =   function ( other ,   mask )   { \n         this . in ( other ); \n\n         // If the mask is defined, add it to the output. \n         if ( typeof   mask   !==   undefined ) \n             this . out ( mask ); \n\n         this . subCommand ( composite ); \n\n         return   this ; \n     }  }", 
            "title": "gm\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/composite/example/#stackoverflow", 
            "text": "var   gm   =   require ( gm );  gm () \n   . in ( -page ,   +0+0 ) \n   . in ( bg.jpg ) \n   . in ( -page ,   +10+20 )   // location of smallIcon.jpg is x,y -  10, 20 \n   . in ( smallIcon.jpg ) \n   . mosaic () \n   . write ( tesOutput.jpg ,   function   ( err )   { \n     if   ( err )   console . log ( err ); \n   });", 
            "title": "stackoverflow \u7b54\u6848"
        }, 
        {
            "location": "/ImageComparisons/", 
            "text": "\u6bd4\u8f83\n\n\nGraphicsmagicks \ncompare\n command is exposed through \ngm.compare()\n. This allows us to determine if two images can be considered \"equal\".\n\n\nCurrently \ngm.compare\n only accepts file paths.\n\n\ngm.compare(path1, path2 [, options], callback)\n\n\n\n\n\ngm\n.\ncompare\n(\n/path/to/image1.jpg\n,\n \n/path/to/another.png\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n,\n \npath1\n,\n \npath2\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nreturn\n \nhandle\n(\nerr\n);\n\n\n  \n// if the images were considered equal, `isEqual` will be true, otherwise, false.\n\n  \nconsole\n.\nlog\n(\nThe images were equal: %s\n,\n \nisEqual\n);\n\n\n  \n// to see the total equality returned by graphicsmagick we can inspect the `equality` argument.\n\n  \nconsole\n.\nlog\n(\nActual equality: %d\n,\n \nequality\n);\n\n\n  \n// inspect the raw output\n\n  \nconsole\n.\nlog\n(\nraw\n);\n\n\n  \n// print file paths\n\n  \nconsole\n.\nlog\n(\npath1\n,\n \npath2\n);\n\n\n})\n\n\n\n\n\nYou may wish to pass a custom tolerance threshold to increase or decrease the default level of \n0.4\n.\n\n\ngm\n.\ncompare\n(\n/path/to/image1.jpg\n,\n \n/path/to/another.png\n,\n \n1.2\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n)\n \n{\n\n  \n...\n\n\n})\n\n\n\n\n\nTo output a diff image, pass a configuration object to define the diff options and tolerance.\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nfile\n:\n \n/path/to/diff.png\n,\n\n  \nhighlightColor\n:\n \nyellow\n,\n\n  \ntolerance\n:\n \n0.02\n\n\n}\n\n\ngm\n.\ncompare\n(\n/path/to/image1.jpg\n,\n \n/path/to/another.png\n,\n \noptions\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n)\n \n{\n\n  \n...\n\n\n})\n\n\n\n\n\n\u56fe\u50cf\u6bd4\u8f83\n\n\nBoth GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().\n\n\nCurrently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.\n\n\nYour callback will be passed four arguments:\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \nfunction\n \n(\nerr\n,\n \nisEqual\n,\n \nequality\n,\n \nraw\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n  \nconsole\n.\nlog\n(\nThe images are equal: %s\n,\n \nisEqual\n);\n\n  \nconsole\n.\nlog\n(\nActual equality: %d\n,\n \nequality\n)\n\n  \nconsole\n.\nlog\n(\nRaw output was: %j\n,\n \nraw\n);\n\n\n});\n\n\n\n\n\nYou can also output a diff image of the two images by passing a configuration object in place of the tolerance:\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nhighlightColor\n:\n \nyellow\n,\n \n// optional. Defaults to red\n\n  \nfile\n:\n \n./diff.png\n \n// required\n\n\n};\n\n\ngm\n.\ncompare\n(\npath1\n,\n \npath2\n,\n \noptions\n,\n \nfunction\n \n(\nerr\n)\n \n{\n\n  \nif\n \n(\nerr\n)\n \nthrow\n \nerr\n;\n\n\n});", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/ImageComparisons/#_1", 
            "text": "Graphicsmagicks  compare  command is exposed through  gm.compare() . This allows us to determine if two images can be considered \"equal\".  Currently  gm.compare  only accepts file paths.  gm.compare(path1, path2 [, options], callback)  gm . compare ( /path/to/image1.jpg ,   /path/to/another.png ,   function   ( err ,   isEqual ,   equality ,   raw ,   path1 ,   path2 )   { \n   if   ( err )   return   handle ( err ); \n\n   // if the images were considered equal, `isEqual` will be true, otherwise, false. \n   console . log ( The images were equal: %s ,   isEqual ); \n\n   // to see the total equality returned by graphicsmagick we can inspect the `equality` argument. \n   console . log ( Actual equality: %d ,   equality ); \n\n   // inspect the raw output \n   console . log ( raw ); \n\n   // print file paths \n   console . log ( path1 ,   path2 );  })   You may wish to pass a custom tolerance threshold to increase or decrease the default level of  0.4 .  gm . compare ( /path/to/image1.jpg ,   /path/to/another.png ,   1.2 ,   function   ( err ,   isEqual )   { \n   ...  })   To output a diff image, pass a configuration object to define the diff options and tolerance.  var   options   =   { \n   file :   /path/to/diff.png , \n   highlightColor :   yellow , \n   tolerance :   0.02  }  gm . compare ( /path/to/image1.jpg ,   /path/to/another.png ,   options ,   function   ( err ,   isEqual ,   equality ,   raw )   { \n   ...  })", 
            "title": "\u6bd4\u8f83"
        }, 
        {
            "location": "/ImageComparisons/#_2", 
            "text": "Both GraphicsMagick and ImageMagick support image comparisons which are exposed through gm.compare().  Currently both path1 and path2 must be strings (no Buffers or Streams). Optionally pass a custom tolerance level if 0.4 (the default) is too lax for your use case.  Your callback will be passed four arguments:  gm . compare ( path1 ,   path2 ,   function   ( err ,   isEqual ,   equality ,   raw )   { \n   if   ( err )   throw   err ; \n   console . log ( The images are equal: %s ,   isEqual ); \n   console . log ( Actual equality: %d ,   equality ) \n   console . log ( Raw output was: %j ,   raw );  });   You can also output a diff image of the two images by passing a configuration object in place of the tolerance:  var   options   =   { \n   highlightColor :   yellow ,   // optional. Defaults to red \n   file :   ./diff.png   // required  };  gm . compare ( path1 ,   path2 ,   options ,   function   ( err )   { \n   if   ( err )   throw   err ;  });", 
            "title": "\u56fe\u50cf\u6bd4\u8f83"
        }, 
        {
            "location": "/UsingImagemagick/", 
            "text": "\u4f7f\u7528 IMAGEMAGICK\n\n\nSubclass \ngm\n \u6765\u542f\u7528 ImageMagick\n\n\nvar\n \nfs\n \n=\n \nrequire\n(\nfs\n)\n\n  \n,\n \ngm\n \n=\n \nrequire\n(\ngm\n).\nsubClass\n({\nimageMagick\n:\n \ntrue\n});\n\n\n\n// resize and remove EXIF profile data\n\n\ngm\n(\n/path/to/my/img.jpg\n)\n\n\n.\nresize\n(\n240\n,\n \n240\n)\n\n\n...\n\n\n\n\n\nWe have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.\n\n\nvar\n \nimageMagick\n \n=\n \ngm\n.\nsubClass\n({\n \nimageMagick\n:\n \ntrue\n \n});\n\n\n\n\n\nimageMagick\n(\nimg.png\n).\nautoOrient\n().\nwrite\n(\n/path\n,\n \ncallback\n);\n\n\n\n\n\nIMAGEMAGICK OPTIONS\n\n\nUnlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:\n\n\nbrew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528IM"
        }, 
        {
            "location": "/UsingImagemagick/#imagemagick", 
            "text": "Subclass  gm  \u6765\u542f\u7528 ImageMagick  var   fs   =   require ( fs ) \n   ,   gm   =   require ( gm ). subClass ({ imageMagick :   true });  // resize and remove EXIF profile data  gm ( /path/to/my/img.jpg )  . resize ( 240 ,   240 )  ...   We have compatibility with ImageMagick too. Just subclass the gm constructor passing the imageMagick option.  var   imageMagick   =   gm . subClass ({   imageMagick :   true   });   imageMagick ( img.png ). autoOrient (). write ( /path ,   callback );   IMAGEMAGICK OPTIONS  Unlike GraphicsMagick, ImageMagick supports the WebP format. However, you must compile ImageMagick with the WebP option. To do so on OS X, install ImageMagick with the following command using Homebrew:  brew install imagemagick --with-webp\nIf you have already installed ImageMagick, you would have to uninstall it then reinstall it.", 
            "title": "\u4f7f\u7528 IMAGEMAGICK"
        }, 
        {
            "location": "/Extending/", 
            "text": "\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u6269\u5c55 gm \u662f\u5f88\u5bb9\u6613\u7684. \u6240\u6709\u5fc5\u8981\u7684\u662f\u5c06\u4f60\u7684\u65b9\u6cd5\u6dfb\u52a0\u5230 \ngm.prototype\n. \u4f8b\u5982, \u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u68d5\u8910\u8272\u7684\u6269\u5c55\u540d\uff0c\u5b83\u4f1a\u7ed9\u4efb\u4f55\u56fe\u50cf\u4e00\u4e2a\u5f88\u597d\u7684\u201c\nsepia\n\u201d.\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\ngm\n)\n\n\ngm\n.\nprototype\n.\nsepia\n \n=\n \nfunction\n(){\n\n  \nthis\n.\nmodulate\n(\n115\n,\n \n0\n,\n \n100\n).\ncolorize\n(\n7\n,\n \n21\n,\n \n50\n)\n\n  \nreturn\n \nthis\n\n\n}\n\n\n\n\n\n\u563f\uff0c\u770b\u8d77\u6765\u5f88\u7b80\u5355\u5427\uff1f \u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a\n\n\ngm\n(\npath/to/img.png\n)\n\n  \n.\nsepia\n()\n\n  \n.\nwrite\n(\niLoveSepiaAndSoShouldYou.png\n,\n \nfunction\n(\nerr\n){\n \n...\n \n})\n\n\n\n\n\nSo let's take a looky at what's going on here. Within the sepia method, \nthis\n refers to the current instance of gm so you have access to all of the other gm methods and extensions. We're just utilizing two built in \ngm\n methods here to get the effect we want. Notice also that we return \nthis\n, which let's us retain the ability to continue chaining methods. We could return a little more elegantly too since, by convention, every method returns \nthis\n:\n\n\nvar\n \ngm\n \n=\n \nrequire\n(\ngm\n)\n\n\ngm\n.\nprototype\n.\nsepia\n \n=\n \nfunction\n(){\n\n  \nreturn\n \nthis\n.\nmodulate\n(\n115\n,\n \n0\n,\n \n100\n).\ncolorize\n(\n7\n,\n \n21\n,\n \n50\n)\n\n\n}", 
            "title": "\u6269\u5c55"
        }
    ]
}